"use strict";(self.webpackChunkcbor_site=self.webpackChunkcbor_site||[]).push([[287],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(a),u=i,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5829:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1},o="CBOR \u6807\u51c6",l={unversionedId:"cbor",id:"cbor",title:"CBOR \u6807\u51c6",description:"\u672c\u6587\u4f7f\u7528 GPT-4 \u7ffb\u8bd1\uff0c\u505a\u4e86\u4e00\u4e9b\u5fae\u8c03\u548c\u6392\u7248\u4f18\u5316\uff0c\u539f\u6587 RFC 8949\uff1aConcise Binary Object Representation (CBOR).",source:"@site/docs/cbor.md",sourceDirName:".",slug:"/cbor",permalink:"/docs/cbor",draft:!1,editUrl:"https://github.com/cbor-schema/cbor-site/tree/main/docs/cbor.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"JSON Schema \u89c4\u8303",permalink:"/docs/json-schema"}},s={},d=[{value:"1. \u5f15\u8a00\uff08Introduction\uff09",id:"1-\u5f15\u8a00introduction",level:2},{value:"1.1. \u76ee\u6807\uff08Objectives\uff09",id:"11-\u76ee\u6807objectives",level:3},{value:"1.2. \u672f\u8bed\uff08Terminology\uff09",id:"12-\u672f\u8bedterminology",level:3},{value:"2. CBOR \u6570\u636e\u6a21\u578b\uff08CBOR Data Models\uff09",id:"2-cbor-\u6570\u636e\u6a21\u578bcbor-data-models",level:2},{value:"2.1. \u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\uff08Extended Generic Data Models\uff09",id:"21-\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578bextended-generic-data-models",level:3},{value:"2.2. \u7279\u5b9a\u6570\u636e\u6a21\u578b\uff08Specific Data Models\uff09",id:"22-\u7279\u5b9a\u6570\u636e\u6a21\u578bspecific-data-models",level:3},{value:"3. CBOR \u7f16\u7801\u89c4\u8303\uff08Specification of the CBOR Encoding\uff09",id:"3-cbor-\u7f16\u7801\u89c4\u8303specification-of-the-cbor-encoding",level:2},{value:"3.1. \u4e3b\u8981\u7c7b\u578b\uff08Major Types\uff09",id:"31-\u4e3b\u8981\u7c7b\u578bmajor-types",level:3},{value:"3.2. \u4e00\u4e9b\u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6\uff08Indefinite Lengths for Some Major Types\uff09",id:"32-\u4e00\u4e9b\u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6indefinite-lengths-for-some-major-types",level:3},{value:"3.2.1. <code>break</code> \u505c\u6b62\u7801\uff08The &quot;break&quot; Stop Code\uff09",id:"321-break-\u505c\u6b62\u7801the-break-stop-code",level:4},{value:"3.2.2. \u4e0d\u5b9a\u957f\u5ea6\u6570\u7ec4\u548c\u6620\u5c04\uff08Indefinite-Length Arrays and Maps\uff09",id:"322-\u4e0d\u5b9a\u957f\u5ea6\u6570\u7ec4\u548c\u6620\u5c04indefinite-length-arrays-and-maps",level:4},{value:"3.2.3. \u4e0d\u5b9a\u957f\u5ea6\u5b57\u8282\u4e32\u548c\u6587\u672c\u4e32\uff08Indefinite-Length Byte Strings and Text Strings\uff09",id:"323-\u4e0d\u5b9a\u957f\u5ea6\u5b57\u8282\u4e32\u548c\u6587\u672c\u4e32indefinite-length-byte-strings-and-text-strings",level:4},{value:"3.2.4. \u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6\u4f7f\u7528\u603b\u7ed3\uff08Summary of Indefinite-Length Use of Major Types\uff09",id:"324-\u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6\u4f7f\u7528\u603b\u7ed3summary-of-indefinite-length-use-of-major-types",level:4},{value:"3.3. \u6d6e\u70b9\u6570\u548c\u65e0\u5185\u5bb9\u7684\u503c\uff08Floating-Point Numbers and Values with No Content\uff09",id:"33-\u6d6e\u70b9\u6570\u548c\u65e0\u5185\u5bb9\u7684\u503cfloating-point-numbers-and-values-with-no-content",level:3},{value:"3.4. \u6807\u7b7e\u5316\u6570\u636e\u9879\uff08Tagging of Items\uff09",id:"34-\u6807\u7b7e\u5316\u6570\u636e\u9879tagging-of-items",level:3},{value:"3.4.1. \u6807\u51c6\u65e5\u671f/\u65f6\u95f4\u5b57\u7b26\u4e32\uff08Standard Date/Time String\uff09",id:"341-\u6807\u51c6\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32standard-datetime-string",level:4},{value:"3.4.2. \u57fa\u4e8e\u7eaa\u5143\u7684\u65e5\u671f/\u65f6\u95f4\uff08Epoch-Based Date/Time\uff09",id:"342-\u57fa\u4e8e\u7eaa\u5143\u7684\u65e5\u671f\u65f6\u95f4epoch-based-datetime",level:4},{value:"3.4.3. \u5927\u6574\u6570\uff08Bignums\uff09",id:"343-\u5927\u6574\u6570bignums",level:4},{value:"3.4.4. \u5341\u8fdb\u5236\u5206\u6570\u548c\u5927\u6d6e\u70b9\u6570\uff08Decimal Fractions and Bigfloats\uff09",id:"344-\u5341\u8fdb\u5236\u5206\u6570\u548c\u5927\u6d6e\u70b9\u6570decimal-fractions-and-bigfloats",level:4},{value:"3.4.5. \u5185\u5bb9\u63d0\u793a\uff08Content Hints\uff09",id:"345-\u5185\u5bb9\u63d0\u793acontent-hints",level:4},{value:"3.4.5.1. \u7f16\u7801\u7684 CBOR \u6570\u636e\u9879\uff08Encoded CBOR Data Item\uff09",id:"3451-\u7f16\u7801\u7684-cbor-\u6570\u636e\u9879encoded-cbor-data-item",level:5},{value:"3.4.5.2. \u9884\u671f\u7684 CBOR \u5230 JSON \u8f6c\u6362\u5668\u7684\u540e\u7eed\u7f16\u7801\uff08Expected Later Encoding for CBOR-to-JSON Converters\uff09",id:"3452-\u9884\u671f\u7684-cbor-\u5230-json-\u8f6c\u6362\u5668\u7684\u540e\u7eed\u7f16\u7801expected-later-encoding-for-cbor-to-json-converters",level:5},{value:"3.4.5.3. \u7f16\u7801\u6587\u672c\uff08Encoded Text\uff09",id:"3453-\u7f16\u7801\u6587\u672cencoded-text",level:5},{value:"3.4.6. \u81ea\u63cf\u8ff0 CBOR\uff08Self-Described CBOR\uff09",id:"346-\u81ea\u63cf\u8ff0-cborself-described-cbor",level:4},{value:"4. \u5e8f\u5217\u5316\u6ce8\u610f\u4e8b\u9879\uff08Serialization Considerations\uff09",id:"4-\u5e8f\u5217\u5316\u6ce8\u610f\u4e8b\u9879serialization-considerations",level:2},{value:"4.1. \u9996\u9009\u5e8f\u5217\u5316\uff08Preferred Serialization\uff09",id:"41-\u9996\u9009\u5e8f\u5217\u5316preferred-serialization",level:3},{value:"4.2. \u786e\u5b9a\u6027\u7f16\u7801\u7684 CBOR\uff08Deterministically Encoded CBOR\uff09",id:"42-\u786e\u5b9a\u6027\u7f16\u7801\u7684-cbordeterministically-encoded-cbor",level:3},{value:"4.2.1. \u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\uff08Core Deterministic Encoding Requirements\uff09",id:"421-\u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42core-deterministic-encoding-requirements",level:4},{value:"4.2.2. \u5176\u4ed6\u786e\u5b9a\u6027\u7f16\u7801\u6ce8\u610f\u4e8b\u9879\uff08Additional Deterministic Encoding Considerations\uff09",id:"422-\u5176\u4ed6\u786e\u5b9a\u6027\u7f16\u7801\u6ce8\u610f\u4e8b\u9879additional-deterministic-encoding-considerations",level:4},{value:"4.2.3. \u957f\u5ea6\u4f18\u5148\u7684\u6620\u5c04\u952e\u6392\u5e8f\uff08Length-First Map Key Ordering\uff09",id:"423-\u957f\u5ea6\u4f18\u5148\u7684\u6620\u5c04\u952e\u6392\u5e8flength-first-map-key-ordering",level:4},{value:"5. \u521b\u5efa\u57fa\u4e8e CBOR \u7684\u534f\u8bae\uff08Creating CBOR-Based Protocols\uff09",id:"5-\u521b\u5efa\u57fa\u4e8e-cbor-\u7684\u534f\u8baecreating-cbor-based-protocols",level:2},{value:"5.1. CBOR \u5728\u6d41\u5f0f\u5e94\u7528\u4e2d\u7684\u5e94\u7528\uff08CBOR in Streaming Applications\uff09",id:"51-cbor-\u5728\u6d41\u5f0f\u5e94\u7528\u4e2d\u7684\u5e94\u7528cbor-in-streaming-applications",level:3},{value:"5.2. \u901a\u7528\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\uff08Generic Encoders and Decoders\uff09",id:"52-\u901a\u7528\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668generic-encoders-and-decoders",level:3},{value:"5.3. \u6570\u636e\u9879\u6709\u6548\u6027\uff08Validity of Items\uff09",id:"53-\u6570\u636e\u9879\u6709\u6548\u6027validity-of-items",level:3},{value:"5.3.1. \u57fa\u672c\u6709\u6548\u6027\uff08Basic validity\uff09",id:"531-\u57fa\u672c\u6709\u6548\u6027basic-validity",level:4},{value:"5.3.2. \u6807\u7b7e\u6709\u6548\u6027\uff08Tag validity\uff09",id:"532-\u6807\u7b7e\u6709\u6548\u6027tag-validity",level:4},{value:"5.4. \u6709\u6548\u6027\u548c\u6f14\u53d8\uff08Validity and Evolution\uff09",id:"54-\u6709\u6548\u6027\u548c\u6f14\u53d8validity-and-evolution",level:3},{value:"5.5. \u6570\u5b57\uff08Numbers\uff09",id:"55-\u6570\u5b57numbers",level:3},{value:"5.6. \u4e3a\u6620\u5c04\u6307\u5b9a\u952e\uff08Specifying Keys for Maps\uff09",id:"56-\u4e3a\u6620\u5c04\u6307\u5b9a\u952especifying-keys-for-maps",level:3},{value:"5.6.1. \u952e\u7684\u7b49\u4ef7\u6027\uff08Equivalence of Keys\uff09",id:"561-\u952e\u7684\u7b49\u4ef7\u6027equivalence-of-keys",level:4},{value:"5.7. Undefined \u503c\uff08Undefined Values\uff09",id:"57-undefined-\u503cundefined-values",level:3},{value:"6. \u5728 CBOR \u548c JSON \u4e4b\u95f4\u8f6c\u6362\u6570\u636e\uff08Converting Data between CBOR and JSON\uff09",id:"6-\u5728-cbor-\u548c-json-\u4e4b\u95f4\u8f6c\u6362\u6570\u636econverting-data-between-cbor-and-json",level:2},{value:"6.1. \u4ece CBOR \u8f6c\u6362\u4e3a JSON\uff08Converting from CBOR to JSON\uff09",id:"61-\u4ece-cbor-\u8f6c\u6362\u4e3a-jsonconverting-from-cbor-to-json",level:3},{value:"6.2. \u4ece JSON \u8f6c\u6362\u4e3a CBOR\uff08Converting from JSON to CBOR\uff09",id:"62-\u4ece-json-\u8f6c\u6362\u4e3a-cborconverting-from-json-to-cbor",level:3},{value:"7. CBOR \u7684\u672a\u6765\u6f14\u8fdb\uff08Future Evolution of CBOR\uff09",id:"7-cbor-\u7684\u672a\u6765\u6f14\u8fdbfuture-evolution-of-cbor",level:2},{value:"7.1. \u6269\u5c55\u70b9\uff08Extension Points\uff09",id:"71-\u6269\u5c55\u70b9extension-points",level:3},{value:"7.2. \u7b56\u5c55\u9644\u52a0\u4fe1\u606f\u7a7a\u95f4\uff08Curating the Additional Information Space\uff09",id:"72-\u7b56\u5c55\u9644\u52a0\u4fe1\u606f\u7a7a\u95f4curating-the-additional-information-space",level:3},{value:"8. \u8bca\u65ad\u7b26\u53f7\u8868\u793a\u6cd5\uff08Diagnostic Notation\uff09",id:"8-\u8bca\u65ad\u7b26\u53f7\u8868\u793a\u6cd5diagnostic-notation",level:2},{value:"8.1. \u7f16\u7801\u6307\u793a\u7b26\uff08Encoding Indicators\uff09",id:"81-\u7f16\u7801\u6307\u793a\u7b26encoding-indicators",level:2},{value:"9. IANA \u6ce8\u610f\u4e8b\u9879\uff08IANA Considerations\uff09",id:"9-iana-\u6ce8\u610f\u4e8b\u9879iana-considerations",level:2},{value:"9.1. CBOR \u7b80\u5355\u503c\u6ce8\u518c\u8868\uff08CBOR Simple Values Registry\uff09",id:"91-cbor-\u7b80\u5355\u503c\u6ce8\u518c\u8868cbor-simple-values-registry",level:3},{value:"9.2. CBOR \u6807\u7b7e\u6ce8\u518c\u8868\uff08CBOR Tags Registry\uff09",id:"92-cbor-\u6807\u7b7e\u6ce8\u518c\u8868cbor-tags-registry",level:3},{value:"9.3. Media Types Registry\uff08\u7565\uff0c\u89c1\u539f\u6587\uff09",id:"93-media-types-registry\u7565\u89c1\u539f\u6587",level:3},{value:"9.4. CoAP Content-Format Registry\uff08\u7565\uff0c\u89c1\u539f\u6587\uff09",id:"94-coap-content-format-registry\u7565\u89c1\u539f\u6587",level:3},{value:"9.5. Structured Syntax Suffix Registry\uff08\u7565\uff0c\u89c1\u539f\u6587\uff09",id:"95-structured-syntax-suffix-registry\u7565\u89c1\u539f\u6587",level:3},{value:"10. \u5b89\u5168\u6027\u8003\u8651\uff08Security Considerations\uff09",id:"10-\u5b89\u5168\u6027\u8003\u8651security-considerations",level:2},{value:"\u539f\u6587\uff1aConcise Binary Object Representation (CBOR)",id:"\u539f\u6587concise-binary-object-representation-cbor",level:2}],p={toc:d},c="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cbor-\u6807\u51c6"},"CBOR \u6807\u51c6"),(0,i.kt)("p",null,"\u672c\u6587\u4f7f\u7528 GPT-4 \u7ffb\u8bd1\uff0c\u505a\u4e86\u4e00\u4e9b\u5fae\u8c03\u548c\u6392\u7248\u4f18\u5316\uff0c\u539f\u6587 RFC 8949\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc8949"},"Concise Binary Object Representation (CBOR)"),"."),(0,i.kt)("h2",{id:"1-\u5f15\u8a00introduction"},"1. \u5f15\u8a00\uff08Introduction\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"There are hundreds of standardized formats for binary representation of structured data (also known as binary serialization formats). Of those, some are for specific domains of information, while others are generalized for arbitrary data. In the IETF, probably the best-known formats in the latter category are ASN.1's BER and DER ",(0,i.kt)("a",{parentName:"p",href:"https://www.itu.int/rec/T-REC-X.690-201508-I/en"},"ASN.1"),"."),(0,i.kt)("p",null,"The format defined here follows some specific design goals that are not well met by current formats. The underlying data model is an extended version of the JSON data model ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8259"},"RFC8259"),". It is important to note that this is not a proposal that the grammar in RFC 8259 be extended in general, since doing so would cause a significant backwards incompatibility with already deployed JSON documents. Instead, this document simply defines its own data model that starts from JSON."),(0,i.kt)("p",null,"Appendix E lists some existing binary formats and discusses how well they do or do not fit the design objectives of the Concise Binary Object Representation (CBOR)."),(0,i.kt)("p",null,"This document obsoletes ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),", providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.")),(0,i.kt)("p",null,"\u6709\u6570\u767e\u79cd\u6807\u51c6\u5316\u7684\u683c\u5f0f\u7528\u4e8e\u8868\u793a\u7ed3\u6784\u5316\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff08\u4e5f\u79f0\u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\uff09\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u9488\u5bf9\u7279\u5b9a\u9886\u57df\u7684\u4fe1\u606f\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u662f\u9488\u5bf9\u4efb\u610f\u6570\u636e\u8fdb\u884c\u6cdb\u5316\u7684\u3002\u5728 IETF \u4e2d\uff0c\u540e\u4e00\u7c7b\u4e2d\u6700\u8457\u540d\u7684\u683c\u5f0f\u53ef\u80fd\u662f ASN.1 \u7684 BER \u548c DER ",(0,i.kt)("a",{parentName:"p",href:"https://www.itu.int/rec/T-REC-X.690-201508-I/en"},"ASN.1"),"\u3002"),(0,i.kt)("p",null,"\u8fd9\u91cc\u5b9a\u4e49\u7684\u683c\u5f0f\u9075\u5faa\u4e00\u4e9b\u7279\u5b9a\u7684\u8bbe\u8ba1\u76ee\u6807\uff0c\u8fd9\u4e9b\u76ee\u6807\u5e76\u6ca1\u6709\u88ab\u5f53\u524d\u7684\u683c\u5f0f\u5f88\u597d\u5730\u6ee1\u8db3\u3002\u5e95\u5c42\u6570\u636e\u6a21\u578b\u662f JSON \u6570\u636e\u6a21\u578b\u7684\u6269\u5c55\u7248\u672c ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8259"},"RFC8259"),"\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u5e76\u4e0d\u662f\u5efa\u8bae\u5c06 RFC 8259 \u4e2d\u7684\u8bed\u6cd5\u8fdb\u884c\u4e00\u822c\u6027\u6269\u5c55\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u4e0e\u5df2\u90e8\u7f72\u7684 JSON \u6587\u6863\u7684\u91cd\u5927\u5411\u540e\u4e0d\u517c\u5bb9\u3002\u76f8\u53cd\uff0c\u672c\u6587\u6863\u53ea\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4ece JSON \u5f00\u59cb\u7684\u81ea\u6709\u6570\u636e\u6a21\u578b\u3002"),(0,i.kt)("p",null,"\u9644\u5f55 E \u5217\u51fa\u4e86\u4e00\u4e9b\u73b0\u6709\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u5e76\u8ba8\u8bba\u4e86\u5b83\u4eec\u662f\u5426\u7b26\u5408\u7b80\u660e\u4e8c\u8fdb\u5236\u5bf9\u8c61\u8868\u793a\u6cd5\uff08CBOR\uff09\u7684\u8bbe\u8ba1\u76ee\u6807\u3002"),(0,i.kt)("p",null,"\u672c\u6587\u6863\u53d6\u4ee3\u4e86 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),"\uff0c\u5728\u4fdd\u6301\u4e0e RFC 7049 \u4ea4\u6362\u683c\u5f0f\u7684\u5b8c\u5168\u517c\u5bb9\u6027\u7684\u540c\u65f6\uff0c\u63d0\u4f9b\u4e86\u7f16\u8f91\u6539\u8fdb\u3001\u65b0\u7684\u7ec6\u8282\u548c\u9519\u8bef\u4fee\u6b63\u3002\u5b83\u5e76\u672a\u521b\u5efa\u683c\u5f0f\u7684\u65b0\u7248\u672c\u3002"),(0,i.kt)("h3",{id:"11-\u76ee\u6807objectives"},"1.1. \u76ee\u6807\uff08Objectives\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"The objectives of CBOR, roughly in decreasing order of importance, are:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The representation must be able to unambiguously encode most common data formats used in Internet standards.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'It must represent a reasonable set of basic data types and structures using binary encoding. "Reasonable" here is largely influenced by the capabilities of JSON, with the major addition of binary byte strings. The structures supported are limited to arrays and trees; loops and lattice-style graphs are not supported.'),(0,i.kt)("li",{parentName:"ul"},'There is no requirement that all data formats be uniquely encoded; that is, it is acceptable that the number "7" might be encoded in multiple different ways.')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"The code for an encoder or decoder must be able to be compact in order to support systems with very limited memory, processor power, and instruction sets.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An encoder and a decoder need to be implementable in a very small amount of code (for example, in class 1 constrained nodes as defined in ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc7228"},"RFC7228"),")."),(0,i.kt)("li",{parentName:"ul"},"The format should use contemporary machine representations of data (for example, not requiring binary-to-decimal conversion).")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Data must be able to be decoded without a schema description.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Similar to JSON, encoded data should be self-describing so that a generic decoder can be written.")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"The serialization must be reasonably compact, but data compactness is secondary to code compactness for the encoder and decoder.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"Reasonable" here is bounded by JSON as an upper bound in size and by the implementation complexity, which limits the amount of effort that can go into achieving that compactness. Using either general compression schemes or extensive bit-fiddling violates the complexity goals.')),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},"The format must be applicable to both constrained nodes and high-volume applications.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This means it must be reasonably frugal in CPU usage for both encoding and decoding. This is relevant both for constrained nodes and for potential usage in applications with a very high volume of data.")),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},"The format must support all JSON data types for conversion to and from JSON.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It must support a reasonable level of conversion as long as the data represented is within the capabilities of JSON. It must be possible to define a unidirectional mapping towards JSON for all types of data.")),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},"The format must be extensible, and the extended data must be decodable by earlier decoders.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The format is designed for decades of use."),(0,i.kt)("li",{parentName:"ul"},"The format must support a form of extensibility that allows fallback so that a decoder that does not understand an extension can still decode the message."),(0,i.kt)("li",{parentName:"ul"},"The format must be able to be extended in the future by later IETF standards."))),(0,i.kt)("p",null,"CBOR \u7684\u76ee\u6807\uff0c\u5927\u81f4\u6309\u91cd\u8981\u6027\u9012\u51cf\u987a\u5e8f\uff0c\u5982\u4e0b\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u8868\u793a\u5fc5\u987b\u80fd\u591f\u65e0\u6b67\u4e49\u5730\u7f16\u7801\u4e92\u8054\u7f51\u6807\u51c6\u4e2d\u4f7f\u7528\u7684\u6700\u5e38\u89c1\u6570\u636e\u683c\u5f0f\u3002")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5b83\u5fc5\u987b\u4f7f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\u6765\u8868\u793a\u4e00\u7ec4\u5408\u7406\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548c\u7ed3\u6784\u3002\u8fd9\u91cc\u7684\u201c\u5408\u7406\u201d\uff08Reasonable\uff09\u4e3b\u8981\u53d7 JSON \u7684\u529f\u80fd\u5f71\u54cd\uff0c\u4e3b\u8981\u589e\u52a0\u4e86\u4e8c\u8fdb\u5236\u5b57\u8282\u4e32\u3002\u652f\u6301\u7684\u7ed3\u6784\u4ec5\u9650\u4e8e\u6570\u7ec4\u548c\u6811\uff1b\u4e0d\u652f\u6301\u5faa\u73af\u548c\u683c\u72b6\uff08lattice-style\uff09\u56fe\u7ed3\u6784\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u6ca1\u6709\u8981\u6c42\u6240\u6709\u6570\u636e\u683c\u5f0f\u90fd\u5177\u6709\u552f\u4e00\u7f16\u7801\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u6570\u5b57\u201c7\u201d\u7528\u591a\u79cd\u4e0d\u540c\u65b9\u5f0f\u7f16\u7801\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"\u7f16\u7801\u5668\u6216\u89e3\u7801\u5668\u7684\u4ee3\u7801\u5fc5\u987b\u80fd\u591f\u7d27\u51d1\uff0c\u4ee5\u652f\u6301\u5177\u6709\u975e\u5e38\u6709\u9650\u7684\u5185\u5b58\u3001\u5904\u7406\u5668\u80fd\u529b\u548c\u6307\u4ee4\u96c6\u7684\u7cfb\u7edf\u3002")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u9700\u8981\u5728\u975e\u5e38\u5c11\u91cf\u7684\u4ee3\u7801\u4e2d\u5b9e\u73b0\uff08\u4f8b\u5982\uff0c\u5728 ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc7228"},"RFC7228")," \u4e2d\u5b9a\u4e49\u76841\u7c7b\uff08class 1\uff09\u53d7\u9650\u8282\u70b9\u4e2d\uff09\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u683c\u5f0f\u5e94\u4f7f\u7528\u73b0\u4ee3\u673a\u5668\u6570\u636e\u8868\u793a\uff08\u4f8b\u5982\uff0c\u4e0d\u9700\u8981\u4e8c\u8fdb\u5236\u5230\u5341\u8fdb\u5236\u8f6c\u6362\uff09\u3002")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"\u6570\u636e\u5fc5\u987b\u80fd\u591f\u5728\u6ca1\u6709\u6a21\u5f0f\u63cf\u8ff0\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u89e3\u7801\u3002")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e0e JSON \u7c7b\u4f3c\uff0c\u7f16\u7801\u6570\u636e\u5e94\u662f\u81ea\u63cf\u8ff0\u7684\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u7f16\u5199\u901a\u7528\u89e3\u7801\u5668\u3002")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"\u5e8f\u5217\u5316\u5fc5\u987b\u76f8\u5f53\u7d27\u51d1\uff0c\u4f46\u6570\u636e\u7d27\u51d1\u6027\u5bf9\u4e8e\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u4ee3\u7801\u7d27\u51d1\u6027\u662f\u6b21\u8981\u7684\u3002")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u8fd9\u91cc\u7684\u201c\u5408\u7406\u201d\uff08Reasonable\uff09\u53d7 JSON \u5728\u5927\u5c0f\u4e0a\u7684\u4e0a\u9650\u7ea6\u675f\uff0c\u4ee5\u53ca\u5b9e\u73b0\u590d\u6742\u6027\uff0c\u8fd9\u9650\u5236\u4e86\u4e3a\u5b9e\u73b0\u7d27\u51d1\u6027\u6240\u80fd\u4ed8\u51fa\u7684\u52aa\u529b\u3002\u4f7f\u7528\u901a\u7528\u538b\u7f29\u65b9\u6848\u6216\u5927\u91cf\u7684\u4f4d\u64cd\u4f5c\u8fdd\u53cd\u4e86\u590d\u6742\u6027\u76ee\u6807\u3002")),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},"\u8be5\u683c\u5f0f\u5fc5\u987b\u9002\u7528\u4e8e\u53d7\u9650\u8282\u70b9\u548c\u5927\u5bb9\u91cf\u5e94\u7528\u7a0b\u5e8f\u3002")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u8fd9\u610f\u5473\u7740\u5b83\u5728\u7f16\u7801\u548c\u89e3\u7801\u65b9\u9762\u5fc5\u987b\u5bf9 CPU \u4f7f\u7528\u76f8\u5f53\u8282\u4fed\u3002\u8fd9\u65e2\u9002\u7528\u4e8e\u53d7\u9650\u8282\u70b9\uff0c\u4e5f\u9002\u7528\u4e8e\u5177\u6709\u975e\u5e38\u5927\u6570\u636e\u91cf\u7684\u5e94\u7528\u7a0b\u5e8f\u3002")),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},"\u683c\u5f0f\u5fc5\u987b\u652f\u6301\u6240\u6709 JSON \u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5728 JSON \u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u53ea\u8981\u6240\u8868\u793a\u7684\u6570\u636e\u5728 JSON \u7684\u529f\u80fd\u8303\u56f4\u5185\uff0c\u5c31\u5fc5\u987b\u652f\u6301\u5408\u7406\u6c34\u5e73\u7684\u8f6c\u6362\u3002\u5fc5\u987b\u80fd\u591f\u4e3a\u6240\u6709\u7c7b\u578b\u7684\u6570\u636e\u5b9a\u4e49\u671d\u5411 JSON \u7684\u5355\u5411\u6620\u5c04\u3002")),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},"\u683c\u5f0f\u5fc5\u987b\u5177\u6709\u53ef\u6269\u5c55\u6027\uff0c\u6269\u5c55\u540e\u7684\u6570\u636e\u5fc5\u987b\u80fd\u88ab\u65e9\u671f\u7684\u89e3\u7801\u5668\u89e3\u7801\u3002")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u8be5\u683c\u5f0f\u8bbe\u8ba1\u7528\u4e8e\u51e0\u5341\u5e74\u7684\u4f7f\u7528\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u683c\u5f0f\u5fc5\u987b\u652f\u6301\u4e00\u79cd\u5141\u8bb8\u56de\u9000\u7684\u53ef\u6269\u5c55\u6027\u5f62\u5f0f\uff0c\u4ee5\u4fbf\u4e0d\u7406\u89e3\u6269\u5c55\u7684\u89e3\u7801\u5668\u4ecd\u7136\u53ef\u4ee5\u89e3\u7801\u6d88\u606f\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u683c\u5f0f\u5fc5\u987b\u80fd\u591f\u5728\u5c06\u6765\u7531\u540e\u6765\u7684 IETF \u6807\u51c6\u8fdb\u884c\u6269\u5c55\u3002")),(0,i.kt)("h3",{id:"12-\u672f\u8bedterminology"},"1.2. \u672f\u8bed\uff08Terminology\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 ',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc2119"},"RFC2119")," ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8174"},"RFC8174")," when, and only when, they appear in all capitals, as shown here."),(0,i.kt)("p",null,'The term "byte" is used in its now-customary sense as a synonym for "octet". All multi-byte values are encoded in network byte order (that is, most significant byte first, also known as "big-endian").'),(0,i.kt)("p",null,"This specification makes use of the following terminology:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data item"),': A single piece of CBOR data. The structure of a data item may contain zero, one, or more nested data items. The term is used both for the data item in representation format and for the abstract idea that can be derived from that by a decoder; the former can be addressed specifically by using the term "encoded data item".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Decoder"),": A process that decodes a well-formed encoded CBOR data item and makes it available to an application. Formally speaking, a decoder contains a parser to break up the input using the syntax rules of CBOR, as well as a semantic processor to prepare the data in a form suitable to the application."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Encoder"),": A process that generates the (well-formed) representation format of a CBOR data item from application information."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data Stream"),": A sequence of zero or more data items, not further assembled into a larger containing data item (see ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc8742"},"RFC8742"),' for one application). The independent data items that make up a data stream are sometimes also referred to as "top-level data items".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Well-formed"),": A data item that follows the syntactic structure of CBOR. A well-formed data item uses the initial bytes and the byte strings and/or data items that are implied by their values as defined in CBOR and does not include following extraneous data. CBOR decoders by definition only return contents from well-formed data items."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Valid"),": A data item that is well-formed and also follows the semantic restrictions that apply to CBOR data items (Section 5.3)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Expected"),': Besides its normal English meaning, the term "expected" is used to describe requirements beyond CBOR validity that an application has on its input data. Well-formed (processable at all), valid (checked by a validity-checking generic decoder), and expected (checked by the application) form a hierarchy of layers of acceptability.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Stream decoder"),": A process that decodes a data stream and makes each of the data items in the sequence available to an application as they are received.")),(0,i.kt)("p",null,"Terms and concepts for floating-point values such as Infinity, NaN (not a number), negative zero, and subnormal are defined in ",(0,i.kt)("a",{parentName:"p",href:"https://ieeexplore.ieee.org/document/8766229"},"IEEE754"),"."),(0,i.kt)("p",null,"Where bit arithmetic or data types are explained, this document uses the notation familiar from the programming language ",(0,i.kt)("a",{parentName:"p",href:"https://www.iso.org/standard/74528.html"},"C"),', except that ".." denotes a range that includes both ends given, and superscript notation denotes exponentiation. For example, 2 to the power of 64 is notated: 2^64. In the plain-text version of this specification, superscript notation is not available and therefore is rendered by a surrogate notation. That notation is not optimized for this RFC; it is unfortunately ambiguous with C\'s exclusive-or (which is only used in the appendices, which in turn do not use exponentiation) and requires circumspection from the reader of the plain-text version.'),(0,i.kt)("p",null,"Examples and pseudocode assume that signed integers use two's complement representation and that right shifts of signed integers perform sign extension; these assumptions are also specified in Sections 6.8.1 (basic.fundamental) and 7.6.7 (expr.shift) of the 2020 version of C++ (currently available as a final draft, ",(0,i.kt)("a",{parentName:"p",href:"https://isocpp.org/files/papers/N4860.pdf"},"Cplusplus20"),")."),(0,i.kt)("p",null,'Similar to the "0x" notation for hexadecimal numbers, numbers in binary notation are prefixed with "0b". Underscores can be added to a number solely for readability, so 0b00100001 (0x21) might be written 0b001_00001 to emphasize the desired interpretation of the bits in the byte; in this case, it is split into three bits and five bits. Encoded CBOR data items are sometimes given in the "0x" or "0b" notation; these values are first interpreted as numbers as in C and are then interpreted as byte strings in network byte order, including any leading zero bytes expressed in the notation.'),(0,i.kt)("p",null,"Words may be italicized for emphasis; in the plain text form of this specification, this is indicated by surrounding words with underscore characters. Verbatim text (e.g., names from a programming language) may be set in monospace type; in plain text, this is approximated somewhat ambiguously by surrounding the text in double quotes (which also retain their usual meaning).")),(0,i.kt)("p",null,'\u672c\u6587\u6863\u4e2d\u7684\u5173\u952e\u8bcd "MUST"\uff08\u5fc5\u987b\uff09, "MUST NOT"\uff08\u5fc5\u987b\u4e0d\uff09, "REQUIRED"\uff08\u8981\u6c42\uff09, "SHALL"\uff08\u5e94\u5f53\uff09, "SHALL NOT"\uff08\u4e0d\u5e94\u5f53\uff09, "SHOULD"\uff08\u5e94\u8be5\uff09, "SHOULD NOT"\uff08\u4e0d\u5e94\u8be5\uff09, "RECOMMENDED"\uff08\u5efa\u8bae\uff09, "NOT RECOMMENDED"\uff08\u4e0d\u5efa\u8bae\uff09, "MAY"\uff08\u53ef\u4ee5\uff09\u548c "OPTIONAL"\uff08\u53ef\u9009\uff09\u5e94\u6309\u7167 BCP 14 ',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc2119"},"RFC2119")," ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8174"},"RFC8174")," \u4e2d\u7684\u63cf\u8ff0\u8fdb\u884c\u89e3\u91ca\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u4ee5\u5927\u5199\u5b57\u6bcd\u51fa\u73b0\u65f6\uff0c\u5982\u672c\u6587\u6240\u793a\u3002"),(0,i.kt)("p",null,"\u672f\u8bed ",(0,i.kt)("inlineCode",{parentName:"p"},"byte"),"\uff08\u5b57\u8282\uff09\u5728\u6b64\u4ee5\u73b0\u6709\u7684\u4e60\u60ef\u610f\u4e49\u7528\u4f5c ",(0,i.kt)("inlineCode",{parentName:"p"},"octet"),"\uff08\u516b\u4f4d\u7ec4\uff09\u7684\u540c\u4e49\u8bcd\u3002\u6240\u6709\u591a\u5b57\u8282\u503c\u5747\u4ee5\u7f51\u7edc\u5b57\u8282\u5e8f\u7f16\u7801\uff08\u5373\uff0c\u6700\u9ad8\u6709\u6548\u5b57\u8282\u4f18\u5148\uff0c\u4e5f\u79f0\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"big-endian"),"\uff08\u5927\u7aef\u5e8f\uff09\uff09\u3002"),(0,i.kt)("p",null,"\u672c\u89c4\u8303\u4f7f\u7528\u4ee5\u4e0b\u672f\u8bed\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u6570\u636e\u9879\uff08Data item\uff09"),"\uff1a\u5355\u4e2a CBOR \u6570\u636e\u3002\u6570\u636e\u9879\u7684\u7ed3\u6784\u53ef\u80fd\u5305\u542b\u96f6\u4e2a\u3001\u4e00\u4e2a\u6216\u591a\u4e2a\u5d4c\u5957\u6570\u636e\u9879\u3002\u672f\u8bed\u65e2\u7528\u4e8e\u8868\u793a\u683c\u5f0f\u7684\u6570\u636e\u9879\uff0c\u4e5f\u7528\u4e8e\u7531\u89e3\u7801\u5668\u4ece\u4e2d\u5f97\u51fa\u7684\u62bd\u8c61\u6982\u5ff5\uff1b\u524d\u8005\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u672f\u8bed\u201c\u7f16\u7801\u6570\u636e\u9879\u201d\u8fdb\u884c\u5177\u4f53\u63cf\u8ff0\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u89e3\u7801\u5668\uff08Decoder\uff09"),"\uff1a\u89e3\u7801\u683c\u5f0f\u826f\u597d\u7684\u7f16\u7801 CBOR \u6570\u636e\u9879\u5e76\u4f7f\u5176\u53ef\u4f9b\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u8fc7\u7a0b\u3002\u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u89e3\u7801\u5668\u5305\u542b\u4e00\u4e2a\u89e3\u6790\u5668\uff0c\u7528\u4e8e\u6839\u636e CBOR \u7684\u8bed\u6cd5\u89c4\u5219\u62c6\u5206\u8f93\u5165\uff0c\u4ee5\u53ca\u4e00\u4e2a\u8bed\u4e49\u5904\u7406\u5668\uff0c\u7528\u4e8e\u4ee5\u9002\u5408\u5e94\u7528\u7a0b\u5e8f\u7684\u5f62\u5f0f\u51c6\u5907\u6570\u636e\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u7f16\u7801\u5668\uff08Encoder\uff09"),"\uff1a\u4ece\u5e94\u7528\u7a0b\u5e8f\u4fe1\u606f\u751f\u6210 CBOR \u6570\u636e\u9879\u7684\uff08\u683c\u5f0f\u826f\u597d\u7684\uff09\u8868\u793a\u683c\u5f0f\u7684\u8fc7\u7a0b\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u6570\u636e\u6d41\uff08Data Stream\uff09"),"\uff1a\u96f6\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u9879\u7684\u5e8f\u5217\uff0c\u6ca1\u6709\u8fdb\u4e00\u6b65\u7ec4\u88c5\u6210\u66f4\u5927\u7684\u5305\u542b\u6570\u636e\u9879\uff08\u6709\u5173\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u8bf7\u53c2\u89c1 ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc8742"},"RFC8742"),"\uff09\u3002\u7ec4\u6210\u6570\u636e\u6d41\u7684\u72ec\u7acb\u6570\u636e\u9879\u6709\u65f6\u4e5f\u79f0\u4e3a\u201c\u9876\u7ea7\u6570\u636e\u9879\u201d\uff08top-level data items\uff09\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u683c\u5f0f\u826f\u597d\uff08Well-formed\uff09"),"\uff1a\u9075\u5faa CBOR \u8bed\u6cd5\u7ed3\u6784\u7684\u6570\u636e\u9879\u3002\u683c\u5f0f\u826f\u597d\u7684\u6570\u636e\u9879\u4f7f\u7528\u6839\u636e CBOR \u5b9a\u4e49\u7684\u521d\u59cb\u5b57\u8282\u4ee5\u53ca\u7531\u5b83\u4eec\u7684\u503c\u6240\u9690\u542b\u7684\u5b57\u8282\u4e32\u548c/\u6216\u6570\u636e\u9879\uff0c\u5e76\u4e14\u4e0d\u5305\u62ec\u540e\u7eed\u7684\u591a\u4f59\u6570\u636e\u3002CBOR \u89e3\u7801\u5668\u6309\u5b9a\u4e49\u4ec5\u4ece\u683c\u5f0f\u826f\u597d\u7684\u6570\u636e\u9879\u8fd4\u56de\u5185\u5bb9\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u6709\u6548\uff08Valid\uff09"),"\uff1a\u683c\u5f0f\u826f\u597d\u4e14\u9075\u5faa\u9002\u7528\u4e8e CBOR \u6570\u636e\u9879\u7684\u8bed\u4e49\u9650\u5236\uff08\u7b2c5.3\u8282\uff09\u7684\u6570\u636e\u9879\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u9884\u671f\uff08Expected\uff09"),"\uff1a\u9664\u4e86\u6b63\u5e38\u7684\u82f1\u8bed\u610f\u4e49\u5916\uff0c\u672f\u8bed ",(0,i.kt)("inlineCode",{parentName:"li"},"expected")," \u7528\u4e8e\u63cf\u8ff0\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5176\u8f93\u5165\u6570\u636e\u7684 CBOR \u6709\u6548\u6027\u4e4b\u5916\u7684\u8981\u6c42\u3002\u683c\u5f0f\u826f\u597d\uff08\u53ef\u5904\u7406\uff09\uff0c\u6709\u6548\uff08\u7531\u6709\u6548\u6027\u68c0\u67e5\u901a\u7528\u89e3\u7801\u5668\u68c0\u67e5\uff09\u548c\u9884\u671f\uff08\u7531\u5e94\u7528\u7a0b\u5e8f\u68c0\u67e5\uff09\u5f62\u6210\u4e86\u53ef\u63a5\u53d7\u6027\u5c42\u6b21\u7ed3\u6784\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u6d41\u89e3\u7801\u5668\uff08Stream decoder\uff09"),"\uff1a\u89e3\u7801\u6570\u636e\u6d41\u5e76\u4f7f\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u9879\u5728\u63a5\u6536\u65f6\u63d0\u4f9b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002")),(0,i.kt)("p",null,"\u5173\u4e8e\u6d6e\u70b9\u6570\u503c\u7684\u672f\u8bed\u548c\u6982\u5ff5\uff0c\u4f8b\u5982 Infinity\uff08\u65e0\u7a77\u5927\uff09\uff0cNaN\uff08\u975e\u6570\u5b57\uff09\uff0cnegative zero\uff08\u8d1f\u96f6\uff09\u548c subnormal\uff08\u6b21\u6b63\u89c4\u6570\uff09\uff0c\u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://ieeexplore.ieee.org/document/8766229"},"IEEE754")," \u4e2d\u6709\u5b9a\u4e49\u3002"),(0,i.kt)("p",null,"\u5728\u89e3\u91ca\u4f4d\u8fd0\u7b97\u6216\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u672c\u6587\u6863\u4f7f\u7528\u6765\u81ea\u7f16\u7a0b\u8bed\u8a00 ",(0,i.kt)("a",{parentName:"p",href:"https://www.iso.org/standard/74528.html"},"C")," \u7684\u719f\u6089\u8868\u793a\u6cd5\uff0c\u53ea\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"..")," \u8868\u793a\u5305\u542b\u7ed9\u5b9a\u4e24\u7aef\u7684\u8303\u56f4\uff0c\u4e0a\u6807\u8868\u793a\u6cd5\u8868\u793a\u6307\u6570\u8fd0\u7b97\u3002\u4f8b\u5982\uff0c2 \u7684 64 \u6b21\u65b9\u8868\u793a\u4e3a\uff1a2^64\u3002\u5728\u672c\u89c4\u8303\u7684\u7eaf\u6587\u672c\u7248\u672c\u4e2d\uff0c\u4e0a\u6807\u8868\u793a\u6cd5\u4e0d\u53ef\u7528\uff0c\u56e0\u6b64\u7528\u66ff\u4ee3\u8868\u793a\u6cd5\u5448\u73b0\u3002\u8be5\u8868\u793a\u6cd5\u4e0d\u662f\u9488\u5bf9\u6b64 RFC \u4f18\u5316\u7684\uff1b\u5b83\u4e0d\u5e78\u5730\u4e0e C \u7684\u5f02\u6216\uff08\u4ec5\u5728\u9644\u5f55\u4e2d\u4f7f\u7528\uff0c\u9644\u5f55\u53cd\u8fc7\u6765\u53c8\u4e0d\u4f7f\u7528\u6307\u6570\u8fd0\u7b97\uff09\u4ea7\u751f\u6b67\u4e49\uff0c\u5e76\u8981\u6c42\u7eaf\u6587\u672c\u7248\u672c\u7684\u8bfb\u8005\u8c28\u614e\u9605\u8bfb\u3002"),(0,i.kt)("p",null,"\u793a\u4f8b\u548c\u4f2a\u4ee3\u7801\u5047\u8bbe\u6709\u7b26\u53f7\u6574\u6570\u4f7f\u7528\u4e8c\u8fdb\u5236\u8865\u7801\u8868\u793a\uff0c\u6709\u7b26\u53f7\u6574\u6570\u7684\u53f3\u79fb\u6267\u884c\u7b26\u53f7\u6269\u5c55\uff1b\u8fd9\u4e9b\u5047\u8bbe\u4e5f\u5728 2020 \u5e74 C++ \u7684\u7b2c 6.8.1 \u8282\uff08basic.fundamental\uff09\u548c\u7b2c 7.6.7 \u8282\uff08expr.shift\uff09\u4e2d\u6307\u5b9a\uff08\u76ee\u524d\u5df2\u4f5c\u4e3a\u6700\u7ec8\u8349\u6848\u63d0\u4f9b\uff0c",(0,i.kt)("a",{parentName:"p",href:"https://isocpp.org/files/papers/N4860.pdf"},"Cplusplus20"),"\uff09\u3002"),(0,i.kt)("p",null,"\u4e0e\u5341\u516d\u8fdb\u5236\u6570\u5b57\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"0x")," \u8868\u793a\u6cd5\u7c7b\u4f3c\uff0c\u4e8c\u8fdb\u5236\u6570\u5b57\u8868\u793a\u6cd5\u4ee5 ",(0,i.kt)("inlineCode",{parentName:"p"},"0b")," \u4e3a\u524d\u7f00\u3002\u4e3a\u4e86\u4fbf\u4e8e\u9605\u8bfb\uff0c\u53ef\u4ee5\u4ec5\u5411\u6570\u5b57\u4e2d\u6dfb\u52a0\u4e0b\u5212\u7ebf\uff0c\u4f8b\u5982\u5c06 0b00100001\uff080x21\uff09\u5199\u4e3a 0b001_00001\uff0c\u4ee5\u5f3a\u8c03\u5b57\u8282\u4e2d\u4f4d\u7684\u671f\u671b\u89e3\u91ca\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u88ab\u62c6\u5206\u4e3a\u4e09\u4f4d\u548c\u4e94\u4f4d\u3002\u7f16\u7801\u7684 CBOR \u6570\u636e\u9879\u6709\u65f6\u4ee5 ",(0,i.kt)("inlineCode",{parentName:"p"},"0x")," \u6216 ",(0,i.kt)("inlineCode",{parentName:"p"},"0b")," \u8868\u793a\u6cd5\u7ed9\u51fa\uff1b\u8fd9\u4e9b\u503c\u9996\u5148\u6309\u7167 C \u4e2d\u7684\u6570\u5b57\u89e3\u91ca\uff0c\u7136\u540e\u89e3\u91ca\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u5b57\u8282\u4e32\uff0c\u5305\u62ec\u8868\u793a\u6cd5\u4e2d\u8868\u793a\u7684\u4efb\u4f55\u524d\u5bfc\u96f6\u5b57\u8282\u3002"),(0,i.kt)("p",null,"\u4e3a\u4e86\u5f3a\u8c03\uff0c\u5355\u8bcd\u53ef\u80fd\u4f1a\u88ab\u659c\u4f53\uff1b\u5728\u672c\u89c4\u8303\u7684\u7eaf\u6587\u672c\u5f62\u5f0f\u4e2d\uff0c\u8fd9\u7528\u4e0b\u5212\u7ebf\u5b57\u7b26\u8868\u793a\u3002\u9010\u5b57\u6587\u672c\uff08\u4f8b\u5982\uff0c\u6765\u81ea\u7f16\u7a0b\u8bed\u8a00\u7684\u540d\u79f0\uff09\u53ef\u80fd\u8bbe\u7f6e\u4e3a\u7b49\u5bbd\u5b57\u4f53\uff1b\u5728\u7eaf\u6587\u672c\u4e2d\uff0c\u8fd9\u901a\u8fc7\u5c06\u6587\u672c\u653e\u5728\u53cc\u5f15\u53f7\u4e2d\u6765\u8fd1\u4f3c\u8868\u793a\uff08\u53cc\u5f15\u53f7\u4e5f\u4fdd\u7559\u5176\u901a\u5e38\u7684\u542b\u4e49\uff09\u3002"),(0,i.kt)("h2",{id:"2-cbor-\u6570\u636e\u6a21\u578bcbor-data-models"},"2. CBOR \u6570\u636e\u6a21\u578b\uff08CBOR Data Models\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'CBOR is explicit about its generic data model, which defines the set of all data items that can be represented in CBOR. Its basic generic data model is extensible by the registration of "simple values" and tags. Applications can then create a subset of the resulting extended generic data model to build their specific data models.'),(0,i.kt)("p",null,"Within environments that can represent the data items in the generic data model, generic CBOR encoders and decoders can be implemented (which usually involves defining additional implementation data types for those data items that do not already have a natural representation in the environment). The ability to provide generic encoders and decoders is an explicit design goal of CBOR; however, many applications will provide their own application-specific encoders and/or decoders."),(0,i.kt)("p",null,"In the basic (unextended) generic data model defined in Section 3, a data item is one of the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an integer in the range -2^64..2^64-1 inclusive"),(0,i.kt)("li",{parentName:"ul"},"a simple value, identified by a number between 0 and 255, but distinct from that number itself"),(0,i.kt)("li",{parentName:"ul"},"a floating-point value, distinct from an integer, out of the set representable by IEEE 754 binary64 (including non-finites) ",(0,i.kt)("a",{parentName:"li",href:"https://ieeexplore.ieee.org/document/8766229"},"IEEE754")),(0,i.kt)("li",{parentName:"ul"},'a sequence of zero or more bytes ("byte string")'),(0,i.kt)("li",{parentName:"ul"},'a sequence of zero or more Unicode code points ("text string")'),(0,i.kt)("li",{parentName:"ul"},'a sequence of zero or more data items ("array")'),(0,i.kt)("li",{parentName:"ul"},'a mapping (mathematical function) from zero or more data items ("keys") each to a data item ("values"), ("map")'),(0,i.kt)("li",{parentName:"ul"},'a tagged data item ("tag"), comprising a tag number (an integer in the range 0..2^64-1) and the tag content (a data item)')),(0,i.kt)("p",null,"Note that integer and floating-point values are distinct in this model, even if they have the same numeric value."),(0,i.kt)("p",null,'Also note that serialization variants are not visible at the generic data model level. This deliberate absence of visibility includes the number of bytes of the encoded floating-point value. It also includes the choice of encoding for an "argument" (see Section 3) such as the encoding for an integer, the encoding for the length of a text or byte string, the encoding for the number of elements in an array or pairs in a map, or the encoding for a tag number.')),(0,i.kt)("p",null,"CBOR \u660e\u786e\u6307\u51fa\u5176\u901a\u7528\u6570\u636e\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u5b9a\u4e49\u4e86\u53ef\u5728 CBOR \u4e2d\u8868\u793a\u7684\u6240\u6709\u6570\u636e\u9879\u7684\u96c6\u5408\u3002\u901a\u8fc7\u6ce8\u518c\u201c\u7b80\u5355\u503c\u201d\uff08simple values\uff09\u548c\u6807\u7b7e\uff0c\u53ef\u4ee5\u6269\u5c55\u5176\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u3002\u7136\u540e\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4ece\u751f\u6210\u7684\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u521b\u5efa\u4e00\u4e2a\u5b50\u96c6\u4ee5\u6784\u5efa\u5176\u7279\u5b9a\u7684\u6570\u636e\u6a21\u578b\u3002"),(0,i.kt)("p",null,"\u5728\u53ef\u4ee5\u8868\u793a\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u7684\u6570\u636e\u9879\u7684\u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u5b9e\u73b0\u901a\u7528 CBOR \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\uff08\u901a\u5e38\u6d89\u53ca\u4e3a\u90a3\u4e9b\u5728\u73af\u5883\u4e2d\u5c1a\u65e0\u81ea\u7136\u8868\u793a\u7684\u6570\u636e\u9879\u5b9a\u4e49\u989d\u5916\u7684\u5b9e\u73b0\u6570\u636e\u7c7b\u578b\uff09\u3002\u63d0\u4f9b\u901a\u7528\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u80fd\u529b\u662f CBOR \u7684\u4e00\u4e2a\u660e\u786e\u8bbe\u8ba1\u76ee\u6807\uff1b\u7136\u800c\uff0c\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u5c06\u63d0\u4f9b\u81ea\u5df1\u7684\u7279\u5b9a\u4e8e\u5e94\u7528\u7684\u7f16\u7801\u5668\u548c/\u6216\u89e3\u7801\u5668\u3002"),(0,i.kt)("p",null,"\u5728\u7b2c3\u8282\u4e2d\u5b9a\u4e49\u7684\u57fa\u672c\uff08\u672a\u6269\u5c55\uff09\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\uff0c\u6570\u636e\u9879\uff08data item\uff09\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5305\u542b -2^64..2^64-1 \u8303\u56f4\u5185\u7684\u6574\u6570"),(0,i.kt)("li",{parentName:"ul"},"\u7531 0 \u5230 255 \u4e4b\u95f4\u7684\u6570\u5b57\u6807\u8bc6\u7684\u7b80\u5355\u503c\uff0c\u4f46\u4e0e\u8be5\u6570\u5b57\u672c\u8eab\u4e0d\u540c"),(0,i.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u6d6e\u70b9\u503c\uff0c\u4e0d\u540c\u4e8e\u6574\u6570\uff0c\u4ece IEEE 754 binary64 \u53ef\u8868\u793a\u7684\u96c6\u5408\u4e2d\u9009\u53d6\uff08\u5305\u62ec\u975e\u6709\u9650\u503c\uff09",(0,i.kt)("a",{parentName:"li",href:"https://ieeexplore.ieee.org/document/8766229"},"IEEE754")),(0,i.kt)("li",{parentName:"ul"},'\u96f6\u4e2a\u6216\u591a\u4e2a\u5b57\u8282\u7684\u5e8f\u5217\uff08\u201c\u5b57\u8282\u4e32\u201d\uff08"byte string"\uff09\uff09'),(0,i.kt)("li",{parentName:"ul"},'\u96f6\u4e2a\u6216\u591a\u4e2a Unicode \u7801\u4f4d\u7684\u5e8f\u5217\uff08\u201c\u6587\u672c\u4e32\u201d\uff08"text string"\uff09\uff09'),(0,i.kt)("li",{parentName:"ul"},'\u96f6\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u9879\u7684\u5e8f\u5217\uff08\u201c\u6570\u7ec4\u201d\uff08"array"\uff09\uff09'),(0,i.kt)("li",{parentName:"ul"},'\u4ece\u96f6\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u9879\uff08\u201c\u952e\u201d\uff08"keys"\uff09\uff09\u5230\u6570\u636e\u9879\uff08\u201c\u503c\u201d\uff08"values"\uff09\uff09\u7684\u6620\u5c04\uff08\u6570\u5b66\u51fd\u6570\uff09\uff08\u201c\u6620\u5c04\u201d\uff08"map"\uff09\uff09'),(0,i.kt)("li",{parentName:"ul"},'\u4e00\u4e2a\u5e26\u6807\u7b7e\u7684\u6570\u636e\u9879\uff08\u201c\u6807\u7b7e\u201d\uff08"tag"\uff09\uff09\uff0c\u5305\u62ec\u4e00\u4e2a\u6807\u7b7e\u53f7\uff080..2^64-1 \u8303\u56f4\u5185\u7684\u6574\u6570\uff09\u548c\u6807\u7b7e\u5185\u5bb9\uff08\u4e00\u4e2a\u6570\u636e\u9879\uff09')),(0,i.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u5728\u6b64\u6a21\u578b\u4e2d\uff0c\u6574\u6570\u548c\u6d6e\u70b9\u6570\u503c\u662f\u4e0d\u540c\u7684\uff0c\u5373\u4f7f\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u6570\u503c\u3002"),(0,i.kt)("p",null,"\u8fd8\u8981\u6ce8\u610f\uff0c\u5728\u901a\u7528\u6570\u636e\u6a21\u578b\u7ea7\u522b\uff0c\u5e8f\u5217\u5316\u53d8\u4f53\u4e0d\u53ef\u89c1\u3002\u8fd9\u79cd\u6545\u610f\u7684\u53ef\u89c1\u6027\u7f3a\u5931\u5305\u62ec\u7f16\u7801\u6d6e\u70b9\u503c\u7684\u5b57\u8282\u6570\u3002\u8fd9\u8fd8\u5305\u62ec\u201c\u53c2\u6570\u201d\uff08argument\uff09\u7684\u7f16\u7801\u9009\u62e9\uff08\u53c2\u89c1\u7b2c 3 \u8282\uff09\uff0c\u4f8b\u5982\u6574\u6570\u7684\u7f16\u7801\u3001\u6587\u672c\u6216\u5b57\u8282\u4e32\u957f\u5ea6\u7684\u7f16\u7801\u3001\u6570\u7ec4\u4e2d\u5143\u7d20\u6570\u91cf\u6216\u6620\u5c04\u4e2d\u5bf9\u7684\u6570\u91cf\u7684\u7f16\u7801\uff0c\u6216\u6807\u7b7e\u53f7\u7684\u7f16\u7801\u3002"),(0,i.kt)("h3",{id:"21-\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578bextended-generic-data-models"},"2.1. \u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\uff08Extended Generic Data Models\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"This basic generic data model has been extended in this document by the registration of a number of simple values and tag numbers, such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"false, true, null, and undefined (simple values identified by 20..23, Section 3.3)"),(0,i.kt)("li",{parentName:"ul"},"integer and floating-point values with a larger range and precision than the above (tag numbers 2 to 5, Section 3.4)"),(0,i.kt)("li",{parentName:"ul"},"application data types such as a point in time or date/time string defined in RFC 3339 (tag numbers 1 and 0, Section 3.4)")),(0,i.kt)("p",null,"Additional elements of the extended generic data model can be (and have been) defined via the IANA registries created for CBOR. Even if such an extension is unknown to a generic encoder or decoder, data items using that extension can be passed to or from the application by representing them at the application interface within the basic generic data model, i.e., as generic simple values or generic tags."),(0,i.kt)("p",null,"In other words, the basic generic data model is stable as defined in this document, while the extended generic data model expands by the registration of new simple values or tag numbers, but never shrinks."),(0,i.kt)("p",null,"While there is a strong expectation that generic encoders and decoders can represent false, true, and null (undefined is intentionally omitted) in the form appropriate for their programming environment, the implementation of the data model extensions created by tags is truly optional and a matter of implementation quality.")),(0,i.kt)("p",null,"\u901a\u8fc7\u6ce8\u518c\u4e00\u4e9b\u7b80\u5355\u503c\u548c\u6807\u7b7e\u53f7\uff0c\u672c\u6587\u6863\u5df2\u7ecf\u6269\u5c55\u4e86\u8fd9\u4e2a\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\uff0c\u4f8b\u5982\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"false"),"\u3001",(0,i.kt)("inlineCode",{parentName:"li"},"true"),"\u3001",(0,i.kt)("inlineCode",{parentName:"li"},"null")," \u548c ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"\uff08\u7531 20..23 \u6807\u8bc6\u7684\u7b80\u5355\u503c\uff0c\u7b2c 3.3 \u8282\uff09"),(0,i.kt)("li",{parentName:"ul"},"\u6bd4\u4e0a\u8ff0\u66f4\u5927\u8303\u56f4\u548c\u7cbe\u5ea6\u7684\u6574\u6570\u548c\u6d6e\u70b9\u6570\u503c\uff08\u6807\u7b7e\u53f7 2 \u5230 5\uff0c\u7b2c 3.4 \u8282\uff09"),(0,i.kt)("li",{parentName:"ul"},"\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982 RFC 3339 \u4e2d\u5b9a\u4e49\u7684\u65f6\u95f4\u70b9\u6216\u65e5\u671f/\u65f6\u95f4\u5b57\u7b26\u4e32\uff08\u6807\u7b7e\u53f7 1 \u548c 0\uff0c\u7b2c 3.4 \u8282\uff09")),(0,i.kt)("p",null,"\u53ef\u4ee5\uff08\u4e14\u5df2\u7ecf\uff09\u901a\u8fc7\u4e3a CBOR \u521b\u5efa\u7684 IANA \u6ce8\u518c\u8868\u5b9a\u4e49\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\u7684\u5176\u4ed6\u5143\u7d20\u3002\u5373\u4f7f\u8fd9\u6837\u7684\u6269\u5c55\u5bf9\u901a\u7528\u7f16\u7801\u5668\u6216\u89e3\u7801\u5668\u672a\u77e5\uff0c\u4e5f\u53ef\u4ee5\u5c06\u4f7f\u7528\u8be5\u6269\u5c55\u7684\u6570\u636e\u9879\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u6216\u4ece\u5e94\u7528\u7a0b\u5e8f\u4f20\u9012\uff0c\u5373\u5728\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3\u8868\u793a\u5b83\u4eec\uff0c\u5982\u901a\u7528\u7b80\u5355\u503c\u6216\u901a\u7528\u6807\u7b7e\u3002"),(0,i.kt)("p",null,"\u6362\u53e5\u8bdd\u8bf4\uff0c\u672c\u6587\u6863\u5b9a\u4e49\u7684\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u662f\u7a33\u5b9a\u7684\uff0c\u800c\u901a\u8fc7\u6ce8\u518c\u65b0\u7684\u7b80\u5355\u503c\u6216\u6807\u7b7e\u53f7\uff0c\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\u4e0d\u65ad\u6269\u5c55\uff0c\u4f46\u4ece\u4e0d\u6536\u7f29\u3002"),(0,i.kt)("p",null,"\u5c3d\u7ba1\u6709\u5f3a\u70c8\u7684\u671f\u671b\uff0c\u901a\u7528\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u53ef\u4ee5\u5c06 false\u3001true \u548c null\uff08\u6545\u610f\u7701\u7565\u4e86 undefined\uff09\u8868\u793a\u4e3a\u9002\u5408\u5176\u7f16\u7a0b\u73af\u5883\u7684\u5f62\u5f0f\uff0c\u4f46\u901a\u8fc7\u6807\u7b7e\u521b\u5efa\u7684\u6570\u636e\u6a21\u578b\u6269\u5c55\u7684\u5b9e\u73b0\u786e\u5b9e\u662f\u53ef\u9009\u7684\uff0c\u662f\u5b9e\u73b0\u8d28\u91cf\u7684\u95ee\u9898\u3002"),(0,i.kt)("h3",{id:"22-\u7279\u5b9a\u6570\u636e\u6a21\u578bspecific-data-models"},"2.2. \u7279\u5b9a\u6570\u636e\u6a21\u578b\uff08Specific Data Models\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'The specific data model for a CBOR-based protocol usually takes a subset of the extended generic data model and assigns application semantics to the data items within this subset and its components. When documenting such specific data models and specifying the types of data items, it is preferable to identify the types by their generic data model names ("negative integer", "array") instead of referring to aspects of their CBOR representation ("major type 1", "major type 4").'),(0,i.kt)("p",null,"Specific data models can also specify value equivalency (including values of different types) for the purposes of map keys and encoder freedom. For example, in the generic data model, a valid map MAY have both 0 and 0.0 as keys, and an encoder MUST NOT encode 0.0 as an integer (major type 0, Section 3.1). However, if a specific data model declares that floating-point and integer representations of integral values are equivalent, using both map keys 0 and 0.0 in a single map would be considered duplicates, even while encoded as different major types, and so invalid; and an encoder could encode integral-valued floats as integers or vice versa, perhaps to save encoded bytes.")),(0,i.kt)("p",null,'\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u7684\u7279\u5b9a\u6570\u636e\u6a21\u578b\u901a\u5e38\u4ece\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u83b7\u53d6\u4e00\u4e2a\u5b50\u96c6\uff0c\u5e76\u4e3a\u6b64\u5b50\u96c6\u53ca\u5176\u7ec4\u4ef6\u5185\u7684\u6570\u636e\u9879\u5206\u914d\u5e94\u7528\u8bed\u4e49\u3002\u5728\u8bb0\u5f55\u8fd9\u4e9b\u7279\u5b9a\u6570\u636e\u6a21\u578b\u5e76\u6307\u5b9a\u6570\u636e\u9879\u7c7b\u578b\u65f6\uff0c\u6700\u597d\u901a\u8fc7\u5b83\u4eec\u7684\u901a\u7528\u6570\u636e\u6a21\u578b\u540d\u79f0\uff08\u5982 "negative integer"\u3001"array"\uff09\u6765\u6807\u8bc6\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5f15\u7528\u5b83\u4eec\u7684 CBOR \u8868\u793a\u7684\u65b9\u9762\uff08\u5982 "major type 1"\u3001"major type 4"\uff09\u3002'),(0,i.kt)("p",null,"\u7279\u5b9a\u6570\u636e\u6a21\u578b\u8fd8\u53ef\u4ee5\u4e3a\u6620\u5c04\u952e\u548c\u7f16\u7801\u5668\u81ea\u7531\u6307\u5b9a\u503c\u7b49\u6548\u6027\uff08\u5305\u62ec\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff09\u3002\u4f8b\u5982\uff0c\u5728\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\uff0c\u4e00\u4e2a\u6709\u6548\u7684\u6620\u5c04\u53ef\u80fd\uff08MAY\uff09\u540c\u65f6\u5177\u6709 ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0")," \u4f5c\u4e3a\u952e\uff0c\u7f16\u7801\u5668\u4e0d\u80fd\uff08MUST NOT\uff09\u5c06 ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0"),' \u7f16\u7801\u4e3a\u6574\u6570\uff08"major type 0"\uff0c\u7b2c 3.1 \u8282\uff09\u3002\u7136\u800c\uff0c\u5982\u679c\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\u6a21\u578b\u58f0\u660e\u6d6e\u70b9\u6570\u548c\u6574\u6570\u8868\u793a\u7684\u6574\u6570\u503c\u662f\u7b49\u4ef7\u7684\uff0c\u90a3\u4e48\u5728\u5355\u4e2a\u6620\u5c04\u4e2d\u540c\u65f6\u4f7f\u7528\u6620\u5c04\u952e ',(0,i.kt)("inlineCode",{parentName:"p"},"0")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0")," \u5c06\u88ab\u8ba4\u4e3a\u662f\u91cd\u590d\u7684\uff0c\u5373\u4f7f\u5b83\u4eec\u88ab\u7f16\u7801\u4e3a\u4e0d\u540c\u7684\u4e3b\u7c7b\u578b\uff0c\u56e0\u6b64\u662f\u65e0\u6548\u7684\uff1b\u800c\u4e14\u7f16\u7801\u5668\u53ef\u4ee5\u5c06\u6574\u6570\u503c\u6d6e\u70b9\u6570\u7f16\u7801\u4e3a\u6574\u6570\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u6216\u8bb8\u662f\u4e3a\u4e86\u8282\u7701\u7f16\u7801\u5b57\u8282\u3002"),(0,i.kt)("h2",{id:"3-cbor-\u7f16\u7801\u89c4\u8303specification-of-the-cbor-encoding"},"3. CBOR \u7f16\u7801\u89c4\u8303\uff08Specification of the CBOR Encoding\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"A CBOR data item (Section 2) is encoded to or decoded from a byte string carrying a well-formed encoded data item as described in this section. The encoding is summarized in Table 7 in Appendix B, indexed by the initial byte. An encoder MUST produce only well-formed encoded data items. A decoder MUST NOT return a decoded data item when it encounters input that is not a well-formed encoded CBOR data item (this does not detract from the usefulness of diagnostic and recovery tools that might make available some information from a damaged encoded CBOR data item)."),(0,i.kt)("p",null,'The initial byte of each encoded data item contains both information about the major type (the high-order 3 bits, described in Section 3.1) and additional information (the low-order 5 bits). With a few exceptions, the additional information\'s value describes how to load an unsigned integer "argument":'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Less than 24"),": The argument's value is the value of the additional information."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"24, 25, 26, or 27"),": The argument's value is held in the following 1, 2, 4, or 8 bytes, respectively, in network byte order. For major type 7 and additional information value 25, 26, 27, these bytes are not used as an integer argument, but as a floating-point value (see Section 3.3)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"28, 29, 30"),": These values are reserved for future additions to the CBOR format. In the present version of CBOR, the encoded item is not well-formed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"31"),": No argument value is derived. If the major type is 0, 1, or 6, the encoded item is not well-formed. For major types 2 to 5, the item's length is indefinite, and for major type 7, the byte does not constitute a data item at all but terminates an indefinite-length item; all are described in Section 3.2.")),(0,i.kt)("p",null,"The initial byte and any additional bytes consumed to construct the argument are collectively referred to as the head of the data item."),(0,i.kt)("p",null,"The meaning of this argument depends on the major type. For example, in major type 0, the argument is the value of the data item itself (and in major type 1, the value of the data item is computed from the argument); in major type 2 and 3, it gives the length of the string data in bytes that follow; and in major types 4 and 5, it is used to determine the number of data items enclosed."),(0,i.kt)("p",null,"If the encoded sequence of bytes ends before the end of a data item, that item is not well-formed. If the encoded sequence of bytes still has bytes remaining after the outermost encoded item is decoded, that encoding is not a single well-formed CBOR item. Depending on the application, the decoder may either treat the encoding as not well-formed or just identify the start of the remaining bytes to the application."),(0,i.kt)("p",null,"A CBOR decoder implementation can be based on a jump table with all 256 defined values for the initial byte (",(0,i.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc8949#jumptable"},"Table 7"),"). A decoder in a constrained implementation can instead use the structure of the initial byte and following bytes for more compact code (see Appendix C for a rough impression of how this could look).")),(0,i.kt)("p",null,"CBOR \u6570\u636e\u9879\uff08\u7b2c 2 \u8282\uff09\u6309\u7167\u672c\u8282\u6240\u8ff0\uff0c\u7f16\u7801\u4e3a\u6216\u89e3\u7801\u81ea\u643a\u5e26\u683c\u5f0f\u826f\u597d\u7684\u7f16\u7801\u6570\u636e\u9879\u7684\u5b57\u8282\u4e32\u3002\u7f16\u7801\u5728\u9644\u5f55 B \u7684\u88687\u4e2d\u603b\u7ed3\uff0c\u4ee5\u521d\u59cb\u5b57\u8282\u4e3a\u7d22\u5f15\u3002\u7f16\u7801\u5668\u5fc5\u987b\uff08MUST\uff09\u53ea\u751f\u6210\u683c\u5f0f\u826f\u597d\u7684\u7f16\u7801\u6570\u636e\u9879\u3002\u89e3\u7801\u5668\u5728\u9047\u5230\u4e0d\u662f\u683c\u5f0f\u826f\u597d\u7684\u7f16\u7801 CBOR \u6570\u636e\u9879\u7684\u8f93\u5165\u65f6\uff0c\u5fc5\u987b\u4e0d\uff08MUST NOT\uff09\u8fd4\u56de\u89e3\u7801\u6570\u636e\u9879\uff08\u8fd9\u5e76\u4e0d\u5f71\u54cd\u8bca\u65ad\u548c\u6062\u590d\u5de5\u5177\u7684\u6709\u7528\u6027\uff0c\u8fd9\u4e9b\u5de5\u5177\u53ef\u80fd\u4ece\u635f\u574f\u7684\u7f16\u7801 CBOR \u6570\u636e\u9879\u4e2d\u63d0\u4f9b\u4e00\u4e9b\u4fe1\u606f\uff09\u3002"),(0,i.kt)("p",null,"\u6bcf\u4e2a\u7f16\u7801\u6570\u636e\u9879\u7684\u521d\u59cb\u5b57\u8282\u5305\u542b\u5173\u4e8e\u4e3b\u7c7b\u578b\uff08major type\uff0c\u9ad8\u9636 3 \u4f4d\uff0c\u7b2c 3.1 \u8282\u4e2d\u63cf\u8ff0\uff09\u548c\u9644\u52a0\u4fe1\u606f\uff08additional information\uff0c\u4f4e\u9636 5 \u4f4d\uff09\u7684\u4fe1\u606f\u3002\u9664\u5c11\u6570\u4f8b\u5916\uff0c\u9644\u52a0\u4fe1\u606f\u7684\u503c\u63cf\u8ff0\u4e86\u5982\u4f55\u52a0\u8f7d\u975e\u8d1f\u6574\u6570\u201c\u53c2\u6570\u201d\uff08argument\uff09\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u5c0f\u4e8e 24"),"\uff1a\u53c2\u6570\u7684\u503c\u662f\u9644\u52a0\u4fe1\u606f\u7684\u503c\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"24\uff0c25\uff0c26 \u6216 27"),"\uff1a\u53c2\u6570\u7684\u503c\u5206\u522b\u5728\u63a5\u4e0b\u6765\u7684 1\uff0c2\uff0c4 \u6216 8 \u4e2a\u5b57\u8282\u4e2d\uff0c\u4ee5\u7f51\u7edc\u5b57\u8282\u5e8f\u5b58\u50a8\u3002\u5bf9\u4e8e\u4e3b\u7c7b\u578b 7 \u548c\u9644\u52a0\u4fe1\u606f\u503c 25\uff0c26\uff0c27\uff0c\u8fd9\u4e9b\u5b57\u8282\u4e0d\u4f5c\u4e3a\u6574\u6570\u53c2\u6570\u4f7f\u7528\uff0c\u800c\u662f\u4f5c\u4e3a\u6d6e\u70b9\u6570\u503c\uff08\u89c1\u7b2c 3.3 \u8282\uff09\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"28\uff0c29\uff0c30"),"\uff1a\u8fd9\u4e9b\u503c\u4fdd\u7559\u7528\u4e8e\u672a\u6765\u6dfb\u52a0\u5230 CBOR \u683c\u5f0f\u3002\u5728 CBOR \u7684\u5f53\u524d\u7248\u672c\u4e2d\uff0c\u8fd9\u4e9b\u7f16\u7801\u9879\u662f\u683c\u5f0f\u4e0d\u6b63\u786e\u7684\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"31"),"\uff1a\u4e0d\u751f\u6210\u53c2\u6570\u503c\u3002\u5982\u679c\u4e3b\u7c7b\u578b\u4e3a 0\uff0c1 \u6216 6\uff0c\u5219\u7f16\u7801\u9879\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\u5bf9\u4e8e\u4e3b\u7c7b\u578b 2 \u5230 5\uff0c\u8be5\u9879\u7684\u957f\u5ea6\u662f\u4e0d\u5b9a\u7684\uff0c\u5bf9\u4e8e\u4e3b\u7c7b\u578b 7\uff0c\u8be5\u5b57\u8282\u6839\u672c\u4e0d\u6784\u6210\u6570\u636e\u9879\uff0c\u800c\u662f\u7ec8\u6b62\u4e0d\u5b9a\u957f\u5ea6\u9879\uff1b\u6240\u6709\u8fd9\u4e9b\u90fd\u5728\u7b2c 3.2 \u8282\u4e2d\u63cf\u8ff0\u3002")),(0,i.kt)("p",null,"\u521d\u59cb\u5b57\u8282\u548c\u4efb\u4f55\u6d88\u8017\u5728\u6784\u9020\u53c2\u6570\u4e0a\u7684\u989d\u5916\u5b57\u8282\u7edf\u79f0\u4e3a\u6570\u636e\u9879\u7684\u5934\u90e8\u3002"),(0,i.kt)("p",null,"\u8be5\u53c2\u6570\u7684\u542b\u4e49\u53d6\u51b3\u4e8e\u4e3b\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5728\u4e3b\u7c7b\u578b 0 \u4e2d\uff0c\u53c2\u6570\u5c31\u662f\u6570\u636e\u9879\u672c\u8eab\u7684\u503c\uff08\u5728\u4e3b\u7c7b\u578b 1 \u4e2d\uff0c\u6570\u636e\u9879\u7684\u503c\u662f\u6839\u636e\u53c2\u6570\u8ba1\u7b97\u7684\uff09\uff1b\u5728\u4e3b\u7c7b\u578b 2 \u548c 3 \u4e2d\uff0c\u5b83\u7ed9\u51fa\u4e86\u540e\u9762\u7684\u5b57\u7b26\u4e32\u6570\u636e\u7684\u5b57\u8282\u957f\u5ea6\uff1b\u5728\u4e3b\u7c7b\u578b 4 \u548c 5 \u4e2d\uff0c\u5b83\u7528\u4e8e\u786e\u5b9a\u5305\u542b\u7684\u6570\u636e\u9879\u7684\u6570\u91cf\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u7f16\u7801\u7684\u5b57\u8282\u5e8f\u5217\u5728\u6570\u636e\u9879\u7ed3\u675f\u524d\u5c31\u7ed3\u675f\u4e86\uff0c\u90a3\u4e48\u8be5\u9879\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\u5982\u679c\u5728\u6700\u5916\u5c42\u7f16\u7801\u9879\u89e3\u7801\u540e\uff0c\u7f16\u7801\u7684\u5b57\u8282\u5e8f\u5217\u4ecd\u7136\u6709\u5269\u4f59\u5b57\u8282\uff0c\u90a3\u4e48\u8be5\u7f16\u7801\u4e0d\u662f\u5355\u4e2a\u683c\u5f0f\u826f\u597d\u7684 CBOR \u9879\u3002\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u6c42\uff0c\u89e3\u7801\u5668\u53ef\u4ee5\u5c06\u7f16\u7801\u89c6\u4e3a\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u6216\u8005\u53ea\u662f\u5c06\u5269\u4f59\u5b57\u8282\u7684\u5f00\u59cb\u6807\u8bc6\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002"),(0,i.kt)("p",null,"CBOR \u89e3\u7801\u5668\u5b9e\u73b0\u53ef\u4ee5\u57fa\u4e8e\u5177\u6709\u6240\u6709 256 \u4e2a\u521d\u59cb\u5b57\u8282\u7684\u5df2\u5b9a\u4e49\u503c\uff08",(0,i.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc8949#jumptable"},"\u8868 7"),"\uff09\u7684\u8df3\u8f6c\u8868\u3002\u53d7\u9650\u5236\u5b9e\u73b0\u4e2d\u7684\u89e3\u7801\u5668\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u5b57\u8282\u548c\u540e\u7eed\u5b57\u8282\u7684\u7ed3\u6784\u6765\u5b9e\u73b0\u66f4\u7d27\u51d1\u7684\u4ee3\u7801\uff08\u53c2\u89c1\u9644\u5f55 C \u4ee5\u83b7\u53d6\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u7684\u7c97\u7565\u5370\u8c61\uff09\u3002"),(0,i.kt)("h3",{id:"31-\u4e3b\u8981\u7c7b\u578bmajor-types"},"3.1. \u4e3b\u8981\u7c7b\u578b\uff08Major Types\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"The following lists the major types and the additional information and other bytes associated with the type."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major type 0"),": An unsigned integer in the range 0..2^64-1 inclusive. The value of the encoded item is the argument itself. For example, the integer 10 is denoted as the one byte 0b000_01010 (major type 0, additional information 10). The integer 500 would be 0b000_11001 (major type 0, additional information 25) followed by the two bytes 0x01f4, which is 500 in decimal."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major type 1"),": A negative integer in the range -2^64..-1 inclusive. The value of the item is -1 minus the argument. For example, the integer -500 would be 0b001_11001 (major type 1, additional information 25) followed by the two bytes 0x01f3, which is 499 in decimal."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major type 2"),": A byte string. The number of bytes in the string is equal to the argument. For example, a byte string whose length is 5 would have an initial byte of 0b010_00101 (major type 2, additional information 5 for the length), followed by 5 bytes of binary content. A byte string whose length is 500 would have 3 initial bytes of 0b010_11001 (major type 2, additional information 25 to indicate a two-byte length) followed by the two bytes 0x01f4 for a length of 500, followed by 500 bytes of binary content."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major type 3"),": A text string (Section 2) encoded as UTF-8 ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc3629"},"RFC3629"),'. The number of bytes in the string is equal to the argument. A string containing an invalid UTF-8 sequence is well-formed but invalid (Section 1.2). This type is provided for systems that need to interpret or display human-readable text, and allows the differentiation between unstructured bytes and text that has a specified repertoire (that of Unicode) and encoding (UTF-8). In contrast to formats such as JSON, the Unicode characters in this type are never escaped. Thus, a newline character (U+000A) is always represented in a string as the byte 0x0a, and never as the bytes 0x5c6e (the characters "\\" and "n") nor as 0x5c7530303061 (the characters "\\", "u", "0", "0", "0", and "a").'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major type 4"),': An array of data items. In other formats, arrays are also called lists, sequences, or tuples (a "CBOR sequence" is something slightly different, though ',(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc8742"},"RFC8742"),"). The argument is the number of data items in the array. Items in an array do not need to all be of the same type. For example, an array that contains 10 items of any type would have an initial byte of 0b100_01010 (major type 4, additional information 10 for the length) followed by the 10 remaining items."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major type 5"),": A map of pairs of data items. Maps are also called tables, dictionaries, hashes, or objects (in JSON). A map is comprised of pairs of data items, each pair consisting of a key that is immediately followed by a value. The argument is the number of pairs of data items in the map. For example, a map that contains 9 pairs would have an initial byte of 0b101_01001 (major type 5, additional information 9 for the number of pairs) followed by the 18 remaining items. The first item is the first key, the second item is the first value, the third item is the second key, and so on. Because items in a map come in pairs, their total number is always even: a map that contains an odd number of items (no value data present after the last key data item) is not well-formed. A map that has duplicate keys may be well-formed, but it is not valid, and thus it causes indeterminate decoding; see also Section 5.6."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major type 6"),': A tagged data item ("tag") whose tag number, an integer in the range 0..2^64-1 inclusive, is the argument and whose enclosed data item (tag content) is the single encoded data item that follows the head. See Section 3.4.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major type 7"),': Floating-point numbers and simple values, as well as the "break" stop code. See Section 3.3.')),(0,i.kt)("p",null,"These eight major types lead to a simple table showing which of the 256 possible values for the initial byte of a data item are used (",(0,i.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc8949#jumptable"},"Table 7"),")."),(0,i.kt)("p",null,"In major types 6 and 7, many of the possible values are reserved for future specification. See Section 9 for more information on these values."),(0,i.kt)("p",null,"Table 1 summarizes the major types defined by CBOR, ignoring Section 3.2 for now. The number N in this table stands for the argument."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Major Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,i.kt)("th",{parentName:"tr",align:null},"Content"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"unsigned integer N"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"negative integer -1-N"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"N bytes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"N bytes (UTF-8 text)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"N data items (elements)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"map"),(0,i.kt)("td",{parentName:"tr",align:null},"2N data items (key/value pairs)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"6"),(0,i.kt)("td",{parentName:"tr",align:null},"tag of number N"),(0,i.kt)("td",{parentName:"tr",align:null},"1 data item")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"7"),(0,i.kt)("td",{parentName:"tr",align:null},"simple/float"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("p",null,"Table 1: Overview over the Definite-Length Use of CBOR Major Types (N = Argument)")),(0,i.kt)("p",null,"\u4ee5\u4e0b\u5217\u8868\u4ecb\u7ecd\u4e86\u5404\u4e2a\u4e3b\u8981\u7c7b\u578b\u53ca\u4e0e\u7c7b\u578b\u76f8\u5173\u7684\u9644\u52a0\u4fe1\u606f\u548c\u5176\u4ed6\u5b57\u8282\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u4e3b\u7c7b\u578b 0"),"\uff1a\u8303\u56f4\u5728 0..2^64-1\uff08\u5305\u62ec\uff09\u4e4b\u95f4\u7684\u975e\u8d1f\u6574\u6570\uff08unsigned integer\uff09\u3002\u7f16\u7801\u9879\u7684\u503c\u5c31\u662f\u53c2\u6570\u672c\u8eab\u3002\u4f8b\u5982\uff0c\u6574\u6570 10 \u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u8282 0b000_01010\uff08\u4e3b\u7c7b\u578b 0\uff0c\u9644\u52a0\u4fe1\u606f 10\uff09\u3002\u6574\u6570 500 \u4e3a 0b000_11001\uff08\u4e3b\u7c7b\u578b 0\uff0c\u9644\u52a0\u4fe1\u606f 25\uff09\uff0c\u540e\u8ddf\u4e24\u4e2a\u5b57\u8282 0x01f4\uff0c\u5373\u5341\u8fdb\u5236\u4e2d\u7684 500\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u4e3b\u7c7b\u578b 1"),"\uff1a\u8303\u56f4\u5728 -2^64..-1\uff08\u5305\u62ec\uff09\u4e4b\u95f4\u7684\u8d1f\u6574\u6570\uff08negative integer\uff09\u3002\u9879\u7684\u503c\u662f -1 \u51cf\u53bb\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u6574\u6570 -500 \u5c06\u4e3a 0b001_11001\uff08\u4e3b\u7c7b\u578b 1\uff0c\u9644\u52a0\u4fe1\u606f 25\uff09\uff0c\u540e\u8ddf\u4e24\u4e2a\u5b57\u8282 0x01f3\uff0c\u5373\u5341\u8fdb\u5236\u4e2d\u7684 499\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u4e3b\u7c7b\u578b 2"),"\uff1a\u5b57\u8282\u4e32\uff08byte string\uff09\u3002\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u8282\u6570\u7b49\u4e8e\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u957f\u5ea6\u4e3a 5 \u7684\u5b57\u8282\u4e32\u7684\u521d\u59cb\u5b57\u8282\u4e3a 0b010_00101\uff08\u4e3b\u7c7b\u578b 2\uff0c\u9644\u52a0\u4fe1\u606f 5 \u8868\u793a\u957f\u5ea6\uff09\uff0c\u540e\u8ddf 5 \u4e2a\u4e8c\u8fdb\u5236\u5185\u5bb9\u5b57\u8282\u3002\u957f\u5ea6\u4e3a 500 \u7684\u5b57\u8282\u4e32\u7684\u524d 3 \u4e2a\u5b57\u8282\u4e3a 0b010_11001\uff08\u4e3b\u7c7b\u578b 2\uff0c\u9644\u52a0\u4fe1\u606f 25 \u8868\u793a\u4e24\u5b57\u8282\u957f\u5ea6\uff09\uff0c\u540e\u8ddf\u4e24\u4e2a\u5b57\u8282 0x01f4 \u4f5c\u4e3a\u957f\u5ea6 500\uff0c\u7136\u540e\u8ddf\u7740 500 \u4e2a\u4e8c\u8fdb\u5236\u5185\u5bb9\u5b57\u8282\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u4e3b\u7c7b\u578b 3"),"\uff1a\u4ee5 UTF-8 ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc3629"},"RFC3629"),' \u7f16\u7801\u7684\u6587\u672c\u4e32\uff08text string\uff0c\u7b2c 2 \u8282\uff09\u3002\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u8282\u6570\u7b49\u4e8e\u53c2\u6570\u3002\u5305\u542b\u65e0\u6548 UTF-8 \u5e8f\u5217\u7684\u5b57\u7b26\u4e32\u662f\u683c\u5f0f\u826f\u597d\uff08well-formed\uff09\u4f46\u65e0\u6548\uff08invalid\uff09\u7684\uff08\u7b2c 1.2 \u8282\uff09\u3002\u6b64\u7c7b\u578b\u9002\u7528\u4e8e\u9700\u8981\u89e3\u91ca\u6216\u663e\u793a\u4eba\u7c7b\u53ef\u8bfb\u6587\u672c\u7684\u7cfb\u7edf\uff0c\u5e76\u5141\u8bb8\u533a\u5206\u65e0\u7ed3\u6784\u5b57\u8282\u548c\u5177\u6709\u6307\u5b9a\u5b57\u7b26\u96c6\uff08Unicode\uff09\u548c\u7f16\u7801\uff08UTF-8\uff09\u7684\u6587\u672c\u3002\u4e0e JSON \u7b49\u683c\u5f0f\u4e0d\u540c\uff0c\u6b64\u7c7b\u578b\u4e2d\u7684 Unicode \u5b57\u7b26\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8f6c\u4e49\u3002\u56e0\u6b64\uff0c\u6362\u884c\u7b26\uff08U+000A\uff09\u5728\u5b57\u7b26\u4e32\u4e2d\u603b\u662f\u8868\u793a\u4e3a\u5b57\u8282 0x0a\uff0c\u800c\u4e0d\u662f\u5b57\u8282 0x5c6e\uff08\u5b57\u7b26 "\\" \u548c "n"\uff09\u6216 0x5c7530303061\uff08\u5b57\u7b26 "\\", "u", "0", "0", "0", \u548c "a"\uff09\u3002'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u4e3b\u7c7b\u578b 4"),'\uff1a\u7531\u6570\u636e\u9879\u7ec4\u6210\u7684\u6570\u7ec4\uff08array\uff09\u3002\u5728\u5176\u4ed6\u683c\u5f0f\u4e2d\uff0c\u6570\u7ec4\u4e5f\u88ab\u79f0\u4e3a\u5217\u8868\uff08lists\uff09\u3001\u5e8f\u5217\uff08sequences\uff09\u6216\u5143\u7ec4\uff08tuples\uff09\uff08\u5c3d\u7ba1 "CBOR sequence" \u662f\u7a0d\u5fae\u4e0d\u540c\u7684\u4e1c\u897f ',(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc8742"},"RFC8742"),"\uff09\u3002\u53c2\u6570\u662f\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u9879\u6570\u91cf\u3002\u6570\u7ec4\u4e2d\u7684\u9879\u4e0d\u9700\u8981\u5168\u90e8\u662f\u76f8\u540c\u7c7b\u578b\u7684\u3002\u4f8b\u5982\uff0c\u5305\u542b\u4efb\u610f\u7c7b\u578b\u7684 10 \u4e2a\u9879\u7684\u6570\u7ec4\u7684\u521d\u59cb\u5b57\u8282\u4e3a 0b100_01010\uff08\u4e3b\u7c7b\u578b 4\uff0c\u9644\u52a0\u4fe1\u606f 10 \u8868\u793a\u957f\u5ea6\uff09\uff0c\u540e\u8ddf 10 \u4e2a\u5269\u4f59\u9879\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u4e3b\u7c7b\u578b 5"),"\uff1a\u4e00\u7ec4\u6570\u636e\u9879\u5bf9\u7684\u6620\u5c04\uff08map\uff09\u3002\u6620\u5c04\u4e5f\u79f0\u4e3a\u8868\uff08tables\uff09\u3001\u5b57\u5178\uff08dictionaries\uff09\u3001\u54c8\u5e0c\uff08hashes\uff09\u6216\u5bf9\u8c61\uff08objects\uff0c\u5728 JSON \u4e2d\uff09\u3002\u6620\u5c04\u7531\u6570\u636e\u9879\u5bf9\u7ec4\u6210\uff0c\u6bcf\u5bf9\u5305\u62ec\u4e00\u4e2a\u7d27\u8ddf\u5176\u540e\u7684\u952e\u548c\u503c\u3002\u53c2\u6570\u662f\u6620\u5c04\u4e2d\u6570\u636e\u9879\u5bf9\u7684\u6570\u91cf\u3002\u4f8b\u5982\uff0c\u5305\u542b 9 \u5bf9\u7684\u6620\u5c04\u7684\u521d\u59cb\u5b57\u8282\u4e3a 0b101_01001\uff08\u4e3b\u7c7b\u578b 5\uff0c\u9644\u52a0\u4fe1\u606f 9 \u8868\u793a\u5bf9\u6570\uff09\uff0c\u540e\u8ddf 18 \u4e2a\u5269\u4f59\u9879\u3002\u7b2c\u4e00\u4e2a\u9879\u662f\u7b2c\u4e00\u4e2a\u952e\uff0c\u7b2c\u4e8c\u4e2a\u9879\u662f\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e09\u4e2a\u9879\u662f\u7b2c\u4e8c\u4e2a\u952e\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u56e0\u4e3a\u6620\u5c04\u4e2d\u7684\u9879\u6210\u5bf9\u51fa\u73b0\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u603b\u6570\u603b\u662f\u5076\u6570\uff1a\u5305\u542b\u5947\u6570\u4e2a\u9879\u7684\u6620\u5c04\uff08\u5728\u6700\u540e\u4e00\u4e2a\u952e\u6570\u636e\u9879\u4e4b\u540e\u6ca1\u6709\u503c\u6570\u636e\u9879\uff09\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\u5177\u6709\u91cd\u590d\u952e\u7684\u6620\u5c04\u53ef\u80fd\u683c\u5f0f\u826f\u597d\uff0c\u4f46\u65e0\u6548\uff0c\u56e0\u6b64\u5bfc\u81f4\u4e0d\u786e\u5b9a\u89e3\u7801\uff1b\u53e6\u8bf7\u53c2\u89c1\u7b2c 5.6 \u8282\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u4e3b\u7c7b\u578b 6"),"\uff1a\u4e00\u4e2a\u5e26\u6709\u6807\u7b7e\u7684\u6570\u636e\u9879\uff08tag\uff09\uff0c\u5176\u6807\u7b7e\u53f7\u662f\u8303\u56f4\u5728 0..2^64-1\uff08\u5305\u62ec\uff09\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u53c2\u6570\u4e3a\u8be5\u6574\u6570\uff0c\u5176\u5305\u542b\u7684\u6570\u636e\u9879\uff08\u6807\u7b7e\u5185\u5bb9\uff09\u662f\u7d27\u8ddf\u5728\u5934\u90e8\u540e\u9762\u7684\u5355\u4e2a\u7f16\u7801\u6570\u636e\u9879\u3002\u8bf7\u53c2\u9605\u7b2c 3.4 \u8282\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u4e3b\u7c7b\u578b 7"),"\uff1a\u7b80\u5355\u503c\uff08simple values\uff09\u548c\u6d6e\u70b9\u6570\uff08floating-point numbers\uff09\uff0c\u4ee5\u53ca ",(0,i.kt)("inlineCode",{parentName:"li"},"break")," \u505c\u6b62\u7801\u3002\u8bf7\u53c2\u9605\u7b2c 3.3 \u8282\u3002")),(0,i.kt)("p",null,"\u8fd9\u516b\u4e2a\u4e3b\u8981\u7c7b\u578b\u5f62\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u8868\u683c\uff0c\u663e\u793a\u4e86\u6570\u636e\u9879\u7684\u521d\u59cb\u5b57\u8282\u7684 256 \u4e2a\u53ef\u80fd\u503c\u4e2d\u7684\u54ea\u4e9b\u503c\u88ab\u4f7f\u7528\uff08",(0,i.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc8949#jumptable"},"\u8868 7"),"\uff09\u3002"),(0,i.kt)("p",null,"\u5728\u4e3b\u7c7b\u578b 6 \u548c 7 \u4e2d\uff0c\u8bb8\u591a\u53ef\u80fd\u7684\u503c\u90fd\u662f\u4e3a\u672a\u6765\u89c4\u8303\u4fdd\u7559\u7684\u3002\u6709\u5173\u8fd9\u4e9b\u503c\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7b2c 9 \u8282\u3002"),(0,i.kt)("p",null,"\u8868\u683c 1 \u603b\u7ed3\u4e86 CBOR \u5b9a\u4e49\u7684\u4e3b\u8981\u7c7b\u578b\uff0c\u6682\u65f6\u5ffd\u7565\u7b2c 3.2 \u8282\u3002\u8868\u683c\u4e2d\u7684\u6570\u5b57 N \u8868\u793a\u53c2\u6570\u3002"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Major Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,i.kt)("th",{parentName:"tr",align:null},"Content"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"\u975e\u8d1f\u6574\u6570 unsigned integer N"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"\u8d1f\u6574\u6570 negative integer -1-N"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"\u5b57\u8282\u4e32 byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"N bytes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"\u6587\u672c\u4e32 text string"),(0,i.kt)("td",{parentName:"tr",align:null},"N bytes (UTF-8 text)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"\u6570\u7ec4 array"),(0,i.kt)("td",{parentName:"tr",align:null},"N data items (elements)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"\u6620\u5c04 map"),(0,i.kt)("td",{parentName:"tr",align:null},"2N data items (key/value pairs)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"6"),(0,i.kt)("td",{parentName:"tr",align:null},"\u6807\u7b7e tag of number N"),(0,i.kt)("td",{parentName:"tr",align:null},"1 data item")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"7"),(0,i.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355\u503c/\u6d6e\u70b9\u6570 simple/float"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("p",null,"Table 1: CBOR \u4e3b\u7c7b\u578b\u7684\u56fa\u5b9a\u957f\u5ea6\u7528\u6cd5\u6982\u8ff0\uff08N = \u53c2\u6570\uff09"),(0,i.kt)("h3",{id:"32-\u4e00\u4e9b\u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6indefinite-lengths-for-some-major-types"},"3.2. \u4e00\u4e9b\u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6\uff08Indefinite Lengths for Some Major Types\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'Four CBOR items (arrays, maps, byte strings, and text strings) can be encoded with an indefinite length using additional information value 31. This is useful if the encoding of the item needs to begin before the number of items inside the array or map, or the total length of the string, is known. (The ability to start sending a data item before all of it is known is often referred to as "streaming" within that data item.)'),(0,i.kt)("p",null,"Indefinite-length arrays and maps are dealt with differently than indefinite-length strings (byte strings and text strings).")),(0,i.kt)("p",null,"\u56db\u79cd CBOR \u6570\u636e\u9879\uff08\u6570\u7ec4\u3001\u6620\u5c04\u3001\u5b57\u8282\u4e32\u548c\u6587\u672c\u4e32\uff09\u53ef\u4ee5\u4f7f\u7528\u9644\u52a0\u4fe1\u606f\u503c 31 \u7f16\u7801\u4e3a\u4e0d\u5b9a\u957f\u5ea6\uff08indefinite length\uff09\u3002\u8fd9\u5728\u9700\u8981\u5728\u5df2\u77e5\u6570\u7ec4\u6216\u6620\u5c04\u5185\u7684\u9879\u6570\u91cf\u6216\u5b57\u7b26\u4e32\u7684\u603b\u957f\u5ea6\u4e4b\u524d\u5f00\u59cb\u5bf9\u9879\u8fdb\u884c\u7f16\u7801\u65f6\u975e\u5e38\u6709\u7528\u3002\uff08\u5728\u6570\u636e\u9879\u5185\u5f00\u59cb\u53d1\u9001\u6570\u636e\u9879\u4e4b\u524d\uff0c\u5e38\u5e38\u79f0\u4e3a\u201c\u6d41\u5f0f\u201d\u5904\u7406\u3002\uff09"),(0,i.kt)("p",null,"\u4e0d\u5b9a\u957f\u5ea6\u6570\u7ec4\u548c\u6620\u5c04\u4e0e\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\uff08\u5b57\u8282\u4e32\u548c\u6587\u672c\u4e32\uff09\u7684\u5904\u7406\u65b9\u5f0f\u4e0d\u540c\u3002"),(0,i.kt)("h4",{id:"321-break-\u505c\u6b62\u7801the-break-stop-code"},"3.2.1. ",(0,i.kt)("inlineCode",{parentName:"h4"},"break"),' \u505c\u6b62\u7801\uff08The "break" Stop Code\uff09'),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'The "break" stop code is encoded with major type 7 and additional information value 31 (0b111_11111). It is not itself a data item: it is just a syntactic feature to close an indefinite-length item.'),(0,i.kt)("p",null,'If the "break" stop code appears where a data item is expected, other than directly inside an indefinite-length string, array, or map -- for example, directly inside a definite-length array or map -- the enclosing item is not well-formed.')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u505c\u6b62\u7801\u4f7f\u7528\u4e3b\u7c7b\u578b 7 \u548c\u9644\u52a0\u4fe1\u606f\u503c 31 \u7f16\u7801\uff080b111_11111\uff09\u3002\u5b83\u672c\u8eab\u4e0d\u662f\u6570\u636e\u9879\uff1a\u5b83\u53ea\u662f\u4e00\u4e2a\u8bed\u6cd5\u7279\u6027\uff0c\u7528\u4e8e\u5173\u95ed\u4e0d\u5b9a\u957f\u5ea6\u9879\u3002"),(0,i.kt)("p",null,"\u5982\u679c ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u505c\u6b62\u7801\u51fa\u73b0\u5728\u9884\u671f\u4e3a\u6570\u636e\u9879\u7684\u4f4d\u7f6e\uff0c\u9664\u4e86\u76f4\u63a5\u5728\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u6216\u6620\u5c04\u5185\u90e8\u4e4b\u5916 - \u4f8b\u5982\uff0c\u76f4\u63a5\u5728\u5b9a\u957f\u6570\u7ec4\u6216\u6620\u5c04\u5185\u90e8 - \u5219\u5c01\u88c5\u9879\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\u3002"),(0,i.kt)("h4",{id:"322-\u4e0d\u5b9a\u957f\u5ea6\u6570\u7ec4\u548c\u6620\u5c04indefinite-length-arrays-and-maps"},"3.2.2. \u4e0d\u5b9a\u957f\u5ea6\u6570\u7ec4\u548c\u6620\u5c04\uff08Indefinite-Length Arrays and Maps\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'Indefinite-length arrays and maps are represented using their major type with the additional information value of 31, followed by an arbitrary-length sequence of zero or more items for an array or key/value pairs for a map, followed by the "break" stop code (Section 3.2.1). In other words, indefinite-length arrays and maps look identical to other arrays and maps except for beginning with the additional information value of 31 and ending with the "break" stop code.'),(0,i.kt)("p",null,'If the "break" stop code appears after a key in a map, in place of that key\'s value, the map is not well-formed.'),(0,i.kt)("p",null,'There is no restriction against nesting indefinite-length array or map items. A "break" only terminates a single item, so nested indefinite-length items need exactly as many "break" stop codes as there are type bytes starting an indefinite-length item.'),(0,i.kt)("p",null,"For example, assume an encoder wants to represent the abstract array [1, ","[2, 3]",", ","[4, 5]","]. The definite-length encoding would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"0x8301820203820405\n83        -- Array of length 3\n   01     -- 1\n   82     -- Array of length 2\n      02  -- 2\n      03  -- 3\n   82     -- Array of length 2\n      04  -- 4\n      05  -- 5\n")),(0,i.kt)("p",null,"Indefinite-length encoding could be applied independently to each of the three arrays encoded in this data item, as required, leading to representations such as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},'0x9f018202039f0405ffff\n9F        -- Start indefinite-length array\n   01     -- 1\n   82     -- Array of length 2\n      02  -- 2\n      03  -- 3\n   9F     -- Start indefinite-length array\n      04  -- 4\n      05  -- 5\n      FF  -- "break" (inner array)\n   FF     -- "break" (outer array)\n0x9f01820203820405ff\n9F        -- Start indefinite-length array\n   01     -- 1\n   82     -- Array of length 2\n      02  -- 2\n      03  -- 3\n   82     -- Array of length 2\n      04  -- 4\n      05  -- 5\n   FF     -- "break"\n0x83018202039f0405ff\n83        -- Array of length 3\n   01     -- 1\n   82     -- Array of length 2\n      02  -- 2\n      03  -- 3\n   9F     -- Start indefinite-length array\n      04  -- 4\n      05  -- 5\n      FF  -- "break"\n0x83019f0203ff820405\n83        -- Array of length 3\n   01     -- 1\n   9F     -- Start indefinite-length array\n      02  -- 2\n      03  -- 3\n      FF  -- "break"\n   82     -- Array of length 2\n      04  -- 4\n      05  -- 5\n')),(0,i.kt)("p",null,"An example of an indefinite-length map (that happens to have two key/value pairs) might be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},'0xbf6346756ef563416d7421ff\nBF           -- Start indefinite-length map\n   63        -- First key, UTF-8 string length 3\n      46756e --   "Fun"\n   F5        -- First value, true\n   63        -- Second key, UTF-8 string length 3\n      416d74 --   "Amt"\n   21        -- Second value, -2\n   FF        -- "break"\n'))),(0,i.kt)("p",null,"\u4e0d\u5b9a\u957f\u5ea6\u6570\u7ec4\u548c\u6620\u5c04\u4f7f\u7528\u5176\u4e3b\u7c7b\u578b\u548c\u9644\u52a0\u4fe1\u606f\u503c 31 \u8868\u793a\uff0c\u540e\u8ddf\u96f6\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u9879\u7684\u4efb\u610f\u957f\u5ea6\u5e8f\u5217\uff08\u7528\u4e8e\u6570\u7ec4\uff09\u6216\u952e/\u503c\u5bf9\uff08\u7528\u4e8e\u6620\u5c04\uff09\uff0c\u7136\u540e\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u505c\u6b62\u7801\uff08\u7b2c 3.2.1 \u8282\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e0d\u5b9a\u957f\u5ea6\u6570\u7ec4\u548c\u6620\u5c04\u770b\u8d77\u6765\u4e0e\u5176\u4ed6\u6570\u7ec4\u548c\u6620\u5c04\u5b8c\u5168\u76f8\u540c\uff0c\u53ea\u662f\u4ee5\u9644\u52a0\u4fe1\u606f\u503c 31 \u5f00\u5934\u5e76\u4ee5 ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u505c\u6b62\u7801\u7ed3\u5c3e\u3002"),(0,i.kt)("p",null,"\u5982\u679c ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u505c\u6b62\u7801\u51fa\u73b0\u5728\u6620\u5c04\u4e2d\u7684\u952e\u4e4b\u540e\uff0c\u53d6\u4ee3\u8be5\u952e\u7684\u503c\uff0c\u5219\u6620\u5c04\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\u3002"),(0,i.kt)("p",null,"\u5d4c\u5957\u4e0d\u5b9a\u957f\u5ea6\u6570\u7ec4\u6216\u6620\u5c04\u9879\u6ca1\u6709\u9650\u5236\u3002",(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u4ec5\u7ec8\u6b62\u5355\u4e2a\u6570\u636e\u9879\uff0c\u56e0\u6b64\u5d4c\u5957\u7684\u4e0d\u5b9a\u957f\u5ea6\u6570\u636e\u9879\u9700\u8981\u4e0e\u5f00\u59cb\u4e0d\u5b9a\u957f\u5ea6\u6570\u636e\u9879\u7684\u7c7b\u578b\u5b57\u8282\u4e00\u6837\u591a\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u505c\u6b62\u7801\u3002"),(0,i.kt)("p",null,"\u4f8b\u5982\uff0c\u5047\u8bbe\u7f16\u7801\u5668\u60f3\u8981\u8868\u793a\u62bd\u8c61\u6570\u7ec4 [1, ","[2, 3]",", ","[4, 5]","]\u3002\u5b9a\u957f\u7f16\u7801\u5c06\u662f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"0x8301820203820405\n83        -- Array of length 3\n   01     -- 1\n   82     -- Array of length 2\n      02  -- 2\n      03  -- 3\n   82     -- Array of length 2\n      04  -- 4\n      05  -- 5\n")),(0,i.kt)("p",null,"\u6839\u636e\u9700\u8981\uff0c\u53ef\u4ee5\u5c06\u4e0d\u5b9a\u957f\u5ea6\u7f16\u7801\u72ec\u7acb\u5e94\u7528\u4e8e\u6b64\u6570\u636e\u9879\u4e2d\u7f16\u7801\u7684\u4e09\u4e2a\u6570\u7ec4\uff0c\u4ece\u800c\u5bfc\u81f4\u8bf8\u5982\u4ee5\u4e0b\u7684\u8868\u793a\u5f62\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},'0x9f018202039f0405ffff\n9F        -- Start indefinite-length array\n   01     -- 1\n   82     -- Array of length 2\n      02  -- 2\n      03  -- 3\n   9F     -- Start indefinite-length array\n      04  -- 4\n      05  -- 5\n      FF  -- "break" (inner array)\n   FF     -- "break" (outer array)\n0x9f01820203820405ff\n9F        -- Start indefinite-length array\n   01     -- 1\n   82     -- Array of length 2\n      02  -- 2\n      03  -- 3\n   82     -- Array of length 2\n      04  -- 4\n      05  -- 5\n   FF     -- "break"\n0x83018202039f0405ff\n83        -- Array of length 3\n   01     -- 1\n   82     -- Array of length 2\n      02  -- 2\n      03  -- 3\n   9F     -- Start indefinite-length array\n      04  -- 4\n      05  -- 5\n      FF  -- "break"\n0x83019f0203ff820405\n83        -- Array of length 3\n   01     -- 1\n   9F     -- Start indefinite-length array\n      02  -- 2\n      03  -- 3\n      FF  -- "break"\n   82     -- Array of length 2\n      04  -- 4\n      05  -- 5\n')),(0,i.kt)("p",null,"\u4e00\u4e2a\u5177\u6709\u4e0d\u786e\u5b9a\u957f\u5ea6\u7684\u6620\u5c04\u7684\u4f8b\u5b50\uff08\u6070\u597d\u6709\u4e24\u4e2a\u952e/\u503c\u5bf9\uff09\u53ef\u80fd\u662f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},'0xbf6346756ef563416d7421ff\nBF           -- Start indefinite-length map\n   63        -- First key, UTF-8 string length 3\n      46756e --   "Fun"\n   F5        -- First value, true\n   63        -- Second key, UTF-8 string length 3\n      416d74 --   "Amt"\n   21        -- Second value, -2\n   FF        -- "break"\n')),(0,i.kt)("h4",{id:"323-\u4e0d\u5b9a\u957f\u5ea6\u5b57\u8282\u4e32\u548c\u6587\u672c\u4e32indefinite-length-byte-strings-and-text-strings"},"3.2.3. \u4e0d\u5b9a\u957f\u5ea6\u5b57\u8282\u4e32\u548c\u6587\u672c\u4e32\uff08Indefinite-Length Byte Strings and Text Strings\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'Indefinite-length strings are represented by a byte containing the major type for byte string or text string with an additional information value of 31, followed by a series of zero or more strings of the specified type ("chunks") that have definite lengths, and finished by the "break" stop code (Section 3.2.1). The data item represented by the indefinite-length string is the concatenation of the chunks. If no chunks are present, the data item is an empty string of the specified type. Zero-length chunks, while not particularly useful, are permitted.'),(0,i.kt)("p",null,'If any item between the indefinite-length string indicator (0b010_11111 or 0b011_11111) and the "break" stop code is not a definite-length string item of the same major type, the string is not well-formed.'),(0,i.kt)("p",null,"The design does not allow nesting indefinite-length strings as chunks into indefinite-length strings. If it were allowed, it would require decoder implementations to keep a stack, or at least a count, of nesting levels. It is unnecessary on the encoder side because the inner indefinite-length string would consist of chunks, and these could instead be put directly into the outer indefinite-length string."),(0,i.kt)("p",null,"If any definite-length text string inside an indefinite-length text string is invalid, the indefinite-length text string is invalid. Note that this implies that the UTF-8 bytes of a single Unicode code point (scalar value) cannot be spread between chunks: a new chunk of a text string can only be started at a code point boundary."),(0,i.kt)("p",null,"For example, assume an encoded data item consisting of the bytes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},'0b010_11111 0b010_00100 0xaabbccdd 0b010_00011 0xeeff99 0b111_11111\n5F              -- Start indefinite-length byte string\n   44           -- Byte string of length 4\n      aabbccdd  -- Bytes content\n   43           -- Byte string of length 3\n      eeff99    -- Bytes content\n   FF           -- "break"\n')),(0,i.kt)("p",null,"After decoding, this results in a single byte string with seven bytes: ",(0,i.kt)("inlineCode",{parentName:"p"},"0xaabbccddeeff99"),".")),(0,i.kt)("p",null,"\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u7531\u4e00\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u8be5\u5b57\u8282\u5305\u542b\u5b57\u8282\u4e32\u6216\u6587\u672c\u4e32\u7684\u4e3b\u7c7b\u578b\u548c\u9644\u52a0\u4fe1\u606f\u503c 31\uff0c\u540e\u8ddf\u6307\u5b9a\u7c7b\u578b\u7684\u96f6\u4e2a\u6216\u591a\u4e2a\u5177\u6709\u5b9a\u957f\u7684\u5b57\u7b26\u4e32\u201c\u5757\u201d\uff08chunks\uff09\uff0c\u6700\u540e\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u505c\u6b62\u7801\uff08\u7b2c 3.2.1 \u8282\uff09\u3002\u7531\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u8868\u793a\u7684\u6570\u636e\u9879\u662f\u8fd9\u4e9b\u5757\u7684\u8fde\u63a5\u3002\u5982\u679c\u6ca1\u6709\u5757\uff0c\u5219\u6570\u636e\u9879\u4e3a\u7a7a\u7684\u6307\u5b9a\u7c7b\u578b\u5b57\u7b26\u4e32\u3002\u867d\u7136\u96f6\u957f\u5ea6\u5757\u4e0d\u662f\u7279\u522b\u6709\u7528\uff0c\u4f46\u662f\u5141\u8bb8\u4f7f\u7528\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u6307\u793a\u7b26\uff080b010_11111 \u6216 0b011_11111\uff09\u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," \u505c\u6b62\u7801\u4e4b\u95f4\u7684\u4efb\u4f55\u6570\u636e\u9879\u4e0d\u662f\u76f8\u540c\u4e3b\u7c7b\u578b\u7684\u5b9a\u957f\u5b57\u7b26\u4e32\u9879\uff0c\u5219\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\u3002"),(0,i.kt)("p",null,"\u8bbe\u8ba1\u4e0d\u5141\u8bb8\u5c06\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5757\u5d4c\u5957\u5230\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u4e2d\u3002\u5982\u679c\u5141\u8bb8\u8fd9\u6837\u505a\uff0c\u5c06\u9700\u8981\u89e3\u7801\u5668\u5b9e\u73b0\u4fdd\u6301\u5806\u6808\uff0c\u6216\u8005\u81f3\u5c11\u662f\u5d4c\u5957\u7ea7\u522b\u7684\u8ba1\u6570\u3002\u5728\u7f16\u7801\u5668\u65b9\u9762\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u5185\u90e8\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u5c06\u7531\u5757\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5757\u53ef\u4ee5\u76f4\u63a5\u653e\u5165\u5916\u90e8\u4e0d\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u4e2d\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u4e0d\u5b9a\u957f\u5ea6\u6587\u672c\u4e32\u5185\u7684\u4efb\u4f55\u5b9a\u957f\u6587\u672c\u4e32\u65e0\u6548\uff0c\u5219\u4e0d\u5b9a\u957f\u5ea6\u6587\u672c\u4e32\u65e0\u6548\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740\u5355\u4e2a Unicode \u7801\u70b9\uff08\u6807\u91cf\u503c\uff09\u7684 UTF-8 \u5b57\u8282\u4e0d\u80fd\u5728\u5757\u4e4b\u95f4\u4f20\u64ad\uff1a\u6587\u672c\u4e32\u7684\u65b0\u5757\u53ea\u80fd\u5728\u7801\u70b9\u8fb9\u754c\u5f00\u59cb\u3002"),(0,i.kt)("p",null,"\u4f8b\u5982\uff0c\u5047\u8bbe\u4e00\u4e2a\u7f16\u7801\u6570\u636e\u9879\u7531\u4ee5\u4e0b\u5b57\u8282\u7ec4\u6210\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},'0b010_11111 0b010_00100 0xaabbccdd 0b010_00011 0xeeff99 0b111_11111\n5F              -- Start indefinite-length byte string\n   44           -- Byte string of length 4\n      aabbccdd  -- Bytes content\n   43           -- Byte string of length 3\n      eeff99    -- Bytes content\n   FF           -- "break"\n')),(0,i.kt)("p",null,"\u89e3\u7801\u540e\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u7b80\u5355\u7684 7 \u5b57\u8282\u7684\u5b57\u8282\u4e32: ",(0,i.kt)("inlineCode",{parentName:"p"},"0xaabbccddeeff99"),"."),(0,i.kt)("h4",{id:"324-\u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6\u4f7f\u7528\u603b\u7ed3summary-of-indefinite-length-use-of-major-types"},"3.2.4. \u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6\u4f7f\u7528\u603b\u7ed3\uff08Summary of Indefinite-Length Use of Major Types\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Table 2 summarizes the major types defined by CBOR as used for indefinite-length encoding (with additional information set to 31)."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Major Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,i.kt)("th",{parentName:"tr",align:null},'Enclosed up to "break" Stop Code'))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"(not well-formed)"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"(not well-formed)"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"definite-length byte strings")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"definite-length text strings")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"data items (elements)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"map"),(0,i.kt)("td",{parentName:"tr",align:null},"data items (key/value pairs)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"6"),(0,i.kt)("td",{parentName:"tr",align:null},"(not well-formed)"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"7"),(0,i.kt)("td",{parentName:"tr",align:null},'"break" stop code'),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("p",null,"Table 2: Overview of the Indefinite-Length Use of CBOR Major Types (Additional Information = 31)")),(0,i.kt)("p",null,"\u8868 2 \u603b\u7ed3\u4e86 CBOR \u5b9a\u4e49\u7684\u7528\u4e8e\u4e0d\u5b9a\u957f\u5ea6\u7f16\u7801\u7684\u4e3b\u7c7b\u578b\uff08\u9644\u52a0\u4fe1\u606f\u8bbe\u7f6e\u4e3a 31\uff09\u3002"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Major Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,i.kt)("th",{parentName:"tr",align:null},'Enclosed up to "break" Stop Code'))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"(not well-formed)"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"(not well-formed)"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"definite-length byte strings")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"definite-length text strings")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"data items (elements)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"map"),(0,i.kt)("td",{parentName:"tr",align:null},"data items (key/value pairs)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"6"),(0,i.kt)("td",{parentName:"tr",align:null},"(not well-formed)"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"7"),(0,i.kt)("td",{parentName:"tr",align:null},'"break" stop code'),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("p",null,"\u8868 2\uff1aCBOR \u4e3b\u7c7b\u578b\u7684\u4e0d\u5b9a\u957f\u5ea6\u4f7f\u7528\u6982\u8ff0\uff08\u9644\u52a0\u4fe1\u606f = 31\uff09"),(0,i.kt)("h3",{id:"33-\u6d6e\u70b9\u6570\u548c\u65e0\u5185\u5bb9\u7684\u503cfloating-point-numbers-and-values-with-no-content"},"3.3. \u6d6e\u70b9\u6570\u548c\u65e0\u5185\u5bb9\u7684\u503c\uff08Floating-Point Numbers and Values with No Content\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'Major type 7 is for two types of data: floating-point numbers and "simple values" that do not need any content. Each value of the 5-bit additional information in the initial byte has its own separate meaning, as defined in Table 3. Like the major types for integers, items of this major type do not carry content data; all the information is in the initial bytes (the head).'),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"5-Bit Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Semantics"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..23"),(0,i.kt)("td",{parentName:"tr",align:null},"Simple value (value 0..23)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"24"),(0,i.kt)("td",{parentName:"tr",align:null},"Simple value (value 32..255 in following byte)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"25"),(0,i.kt)("td",{parentName:"tr",align:null},"IEEE 754 Half-Precision Float (16 bits follow)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"26"),(0,i.kt)("td",{parentName:"tr",align:null},"IEEE 754 Single-Precision Float (32 bits follow)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"27"),(0,i.kt)("td",{parentName:"tr",align:null},"IEEE 754 Double-Precision Float (64 bits follow)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"28-30"),(0,i.kt)("td",{parentName:"tr",align:null},"Reserved, not well-formed in the present document")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"31"),(0,i.kt)("td",{parentName:"tr",align:null},'"break" stop code for indefinite-length items (Section 3.2.1)')))),(0,i.kt)("p",null,"Table 3: Values for Additional Information in Major Type 7"),(0,i.kt)("p",null,"As with all other major types, the 5-bit value 24 signifies a single-byte extension: it is followed by an additional byte to represent the simple value. (To minimize confusion, only the values 32 to 255 are used.) This maintains the structure of the initial bytes: as for the other major types, the length of these always depends on the additional information in the first byte. Table 4 lists the numeric values assigned and available for simple values."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Semantics"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..19"),(0,i.kt)("td",{parentName:"tr",align:null},"(unassigned)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"20"),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"21"),(0,i.kt)("td",{parentName:"tr",align:null},"true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"22"),(0,i.kt)("td",{parentName:"tr",align:null},"null")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"23"),(0,i.kt)("td",{parentName:"tr",align:null},"undefined")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"24..31"),(0,i.kt)("td",{parentName:"tr",align:null},"(reserved)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"32..255"),(0,i.kt)("td",{parentName:"tr",align:null},"(unassigned)")))),(0,i.kt)("p",null,"Table 4: Simple Values"),(0,i.kt)("p",null,"An encoder MUST NOT issue two-byte sequences that start with 0xf8 (major type 7, additional information 24) and continue with a byte less than 0x20 (32 decimal). Such sequences are not well-formed. (This implies that an encoder cannot encode false, true, null, or undefined in two-byte sequences and that only the one-byte variants of these are well-formed; more generally speaking, each simple value only has a single representation variant)."),(0,i.kt)("p",null,"The 5-bit values of 25, 26, and 27 are for 16-bit, 32-bit, and 64-bit IEEE 754 binary floating-point values ",(0,i.kt)("a",{parentName:"p",href:"https://ieeexplore.ieee.org/document/8766229"},"IEEE754"),". These floating-point values are encoded in the additional bytes of the appropriate size. (See Appendix D for some information about 16-bit floating-point numbers.)")),(0,i.kt)("p",null,'\u4e3b\u7c7b\u578b 7 \u7528\u4e8e\u4e24\u79cd\u7c7b\u578b\u7684\u6570\u636e\uff1a\u6d6e\u70b9\u6570\u548c\u4e0d\u9700\u8981\u4efb\u4f55\u5185\u5bb9\u7684 "\u7b80\u5355\u503c"\u3002\u521d\u59cb\u5b57\u8282\u4e2d 5 \u4f4d\u9644\u52a0\u4fe1\u606f\u7684\u6bcf\u4e2a\u503c\u90fd\u6709\u81ea\u5df1\u5355\u72ec\u7684\u542b\u4e49\uff0c\u5982\u8868 3 \u6240\u5b9a\u4e49\u3002\u4e0e\u6574\u6570\u7684\u4e3b\u7c7b\u578b\u4e00\u6837\uff0c\u6b64\u4e3b\u7c7b\u578b\u7684\u6570\u636e\u9879\u4e0d\u643a\u5e26\u5185\u5bb9\u6570\u636e\uff1b\u6240\u6709\u4fe1\u606f\u90fd\u5728\u521d\u59cb\u5b57\u8282\uff08\u5934\u90e8\uff09\u4e2d\u3002'),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"5-Bit Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Semantics"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..23"),(0,i.kt)("td",{parentName:"tr",align:null},"Simple value (value 0..23)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"24"),(0,i.kt)("td",{parentName:"tr",align:null},"Simple value (value 32..255 in following byte)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"25"),(0,i.kt)("td",{parentName:"tr",align:null},"IEEE 754 Half-Precision Float (16 bits follow)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"26"),(0,i.kt)("td",{parentName:"tr",align:null},"IEEE 754 Single-Precision Float (32 bits follow)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"27"),(0,i.kt)("td",{parentName:"tr",align:null},"IEEE 754 Double-Precision Float (64 bits follow)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"28-30"),(0,i.kt)("td",{parentName:"tr",align:null},"Reserved, not well-formed in the present document")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"31"),(0,i.kt)("td",{parentName:"tr",align:null},'"break" stop code for indefinite-length items (Section 3.2.1)')))),(0,i.kt)("p",null,"\u8868 3\uff1a\u4e3b\u7c7b\u578b 7 \u4e2d\u9644\u52a0\u4fe1\u606f\u7684\u503c"),(0,i.kt)("p",null,"\u4e0e\u6240\u6709\u5176\u4ed6\u4e3b\u7c7b\u578b\u4e00\u6837\uff0c5 \u4f4d\u503c 24 \u8868\u793a\u5355\u5b57\u8282\u6269\u5c55\uff1a\u540e\u8ddf\u4e00\u4e2a\u9644\u52a0\u5b57\u8282\u8868\u793a\u7b80\u5355\u503c\u3002\uff08\u4e3a\u4e86\u6700\u5c0f\u5316\u6df7\u6dc6\uff0c\u53ea\u4f7f\u7528 32 \u5230 255 \u7684\u503c\u3002\uff09\u8fd9\u4fdd\u6301\u4e86\u521d\u59cb\u5b57\u8282\u7684\u7ed3\u6784\uff1a\u5bf9\u4e8e\u5176\u4ed6\u4e3b\u7c7b\u578b\uff0c\u8fd9\u4e9b\u957f\u5ea6\u59cb\u7ec8\u53d6\u51b3\u4e8e\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e2d\u7684\u9644\u52a0\u4fe1\u606f\u3002\u8868 4 \u5217\u51fa\u4e86\u5206\u914d\u548c\u53ef\u7528\u4e8e\u7b80\u5355\u503c\u7684\u6570\u503c\u3002"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Semantics"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..19"),(0,i.kt)("td",{parentName:"tr",align:null},"(unassigned)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"20"),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"21"),(0,i.kt)("td",{parentName:"tr",align:null},"true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"22"),(0,i.kt)("td",{parentName:"tr",align:null},"null")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"23"),(0,i.kt)("td",{parentName:"tr",align:null},"undefined")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"24..31"),(0,i.kt)("td",{parentName:"tr",align:null},"(reserved)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"32..255"),(0,i.kt)("td",{parentName:"tr",align:null},"(unassigned)")))),(0,i.kt)("p",null,"\u8868 4\uff1a\u7b80\u5355\u503c"),(0,i.kt)("p",null,"\u7f16\u7801\u5668\u5728\u5f00\u59cb\u4e3a 0xf8\uff08\u4e3b\u7c7b\u578b 7\uff0c\u9644\u52a0\u4fe1\u606f 24\uff09\u548c\u7ee7\u7eed\u4e3a\u5c0f\u4e8e 0x20\uff0832 \u5341\u8fdb\u5236\uff09\u7684\u5b57\u8282\u65f6\uff0c\u4e0d\u5f97\uff08MUST NOT\uff09\u53d1\u51fa\u4e24\u5b57\u8282\u5e8f\u5217\u3002\u8fd9\u6837\u7684\u5e8f\u5217\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\uff08\u8fd9\u610f\u5473\u7740\u7f16\u7801\u5668\u4e0d\u80fd\u5728\u4e24\u5b57\u8282\u5e8f\u5217\u4e2d\u7f16\u7801 false\u3001true\u3001null \u6216 undefined\uff0c\u4e14\u8fd9\u4e9b\u503c\u7684\u5355\u5b57\u8282\u53d8\u4f53\u683c\u5f0f\u6b63\u786e\uff1b\u66f4\u4e00\u822c\u5730\u8bf4\uff0c\u6bcf\u4e2a\u7b80\u5355\u503c\u53ea\u6709\u4e00\u4e2a\u8868\u793a\u53d8\u4f53\uff09\u3002"),(0,i.kt)("p",null,"5 \u4f4d\u503c 25\u300126 \u548c 27 \u5206\u522b\u7528\u4e8e 16 \u4f4d\u300132 \u4f4d\u548c 64 \u4f4d IEEE 754 \u4e8c\u8fdb\u5236\u6d6e\u70b9\u503c ",(0,i.kt)("a",{parentName:"p",href:"https://ieeexplore.ieee.org/document/8766229"},"IEEE754"),"\u3002\u8fd9\u4e9b\u6d6e\u70b9\u503c\u5728\u9002\u5f53\u5927\u5c0f\u7684\u9644\u52a0\u5b57\u8282\u4e2d\u8fdb\u884c\u7f16\u7801\u3002\uff08\u5173\u4e8e 16 \u4f4d\u6d6e\u70b9\u6570\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u9644\u5f55 D\u3002\uff09"),(0,i.kt)("h3",{id:"34-\u6807\u7b7e\u5316\u6570\u636e\u9879tagging-of-items"},"3.4. \u6807\u7b7e\u5316\u6570\u636e\u9879\uff08Tagging of Items\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"In CBOR, a data item can be enclosed by a tag to give it some additional semantics, as uniquely identified by a tag number. The tag is major type 6, its argument (Section 3) indicates the tag number, and it contains a single enclosed data item, the tag content. (If a tag requires further structure to its content, this structure is provided by the enclosed data item.) We use the term tag for the entire data item consisting of both a tag number and the tag content: the tag content is the data item that is being tagged."),(0,i.kt)("p",null,"For example, assume that a byte string of length 12 is marked with a tag of number 2 to indicate it is an unsigned bignum (Section 3.4.3). The encoded data item would start with a byte 0b110_00010 (major type 6, additional information 2 for the tag number) followed by the encoded tag content: 0b010_01100 (major type 2, additional information 12 for the length) followed by the 12 bytes of the bignum."),(0,i.kt)("p",null,"In the extended generic data model, a tag number's definition describes the additional semantics conveyed with the tag number. These semantics may include equivalence of some tagged data items with other data items, including some that can be represented in the basic generic data model. For instance, 0xc24101, a bignum the tag content of which is the byte string with the single byte 0x01, is equivalent to an integer 1, which could also be encoded as 0x01, 0x1801, or 0x190001. The tag definition may specify a preferred serialization (Section 4.1) that is recommended for generic encoders; this may prefer basic generic data model representations over ones that employ a tag."),(0,i.kt)("p",null,"The tag definition usually defines which nested data items are valid for such tags. Tag definitions may restrict their content to a very specific syntactic structure, as the tags defined in this document do, or they may define their content more semantically. An example for the latter is how tags 40 and 1040 accept multiple ways to represent arrays ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8746"},"RFC8746"),"."),(0,i.kt)("p",null,"As a matter of convention, many tags do not accept null or undefined values as tag content; instead, the expectation is that a null or undefined value can be used in place of the entire tag; Section 3.4.2 provides some further considerations for one specific tag about the handling of this convention in application protocols and in mapping to platform types."),(0,i.kt)("p",null,"Decoders do not need to understand tags of every tag number, and tags may be of little value in applications where the implementation creating a particular CBOR data item and the implementation decoding that stream know the semantic meaning of each item in the data flow. The primary purpose of tags in this specification is to define common data types such as dates. A secondary purpose is to provide conversion hints when it is foreseen that the CBOR data item needs to be translated into a different format, requiring hints about the content of items. Understanding the semantics of tags is optional for a decoder; it can simply present both the tag number and the tag content to the application, without interpreting the additional semantics of the tag."),(0,i.kt)("p",null,"A tag applies semantics to the data item it encloses. Tags can nest: if tag A encloses tag B, which encloses data item C, tag A applies to the result of applying tag B on data item C."),(0,i.kt)("p",null,"IANA maintains a registry of tag numbers as described in Section 9.2. Table 5 provides a list of tag numbers that were defined in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," with definitions in the rest of this section. (Tag number 35 was also defined in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),"; a discussion of this tag number follows in Section 3.4.5.3.) Note that many other tag numbers have been defined since the publication of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),"; see the registry described at Section 9.2 for the complete list."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Tag"),(0,i.kt)("th",{parentName:"tr",align:null},"Data Item"),(0,i.kt)("th",{parentName:"tr",align:null},"Semantics"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"Standard date/time string; see Section 3.4.1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"integer or float"),(0,i.kt)("td",{parentName:"tr",align:null},"Epoch-based date/time; see Section 3.4.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"Unsigned bignum; see Section 3.4.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"Negative bignum; see Section 3.4.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"Decimal fraction; see Section 3.4.4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"Bigfloat; see Section 3.4.4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"21"),(0,i.kt)("td",{parentName:"tr",align:null},"(any)"),(0,i.kt)("td",{parentName:"tr",align:null},"Expected conversion to base64url encoding; see Section 3.4.5.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"22"),(0,i.kt)("td",{parentName:"tr",align:null},"(any)"),(0,i.kt)("td",{parentName:"tr",align:null},"Expected conversion to base64 encoding; see Section 3.4.5.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"23"),(0,i.kt)("td",{parentName:"tr",align:null},"(any)"),(0,i.kt)("td",{parentName:"tr",align:null},"Expected conversion to base16 encoding; see Section 3.4.5.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"24"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"Encoded CBOR data item; see Section 3.4.5.1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"32"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"URI; see Section 3.4.5.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"33"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"base64url; see Section 3.4.5.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"34"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"base64; see Section 3.4.5.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"36"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"MIME message; see Section 3.4.5.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"55799"),(0,i.kt)("td",{parentName:"tr",align:null},"(any)"),(0,i.kt)("td",{parentName:"tr",align:null},"Self-described CBOR; see Section 3.4.6")))),(0,i.kt)("p",null,"Table 5: Tag Numbers Defined in RFC 7049"),(0,i.kt)("p",null,"Conceptually, tags are interpreted in the generic data model, not at (de-)serialization time. A small number of tags (at this time, tag number 25 and tag number 29 ",(0,i.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/cbor-tags"},"IANA.cbor-tags"),") have been registered with semantics that may require processing at (de-)serialization time: the decoder needs to be aware of, and the encoder needs to be in control of, the exact sequence in which data items are encoded into the CBOR data item. This means these tags cannot be implemented on top of an arbitrary generic CBOR encoder/decoder (which might not reflect the serialization order for entries in a map at the data model level and vice versa); their implementation therefore typically needs to be integrated into the generic encoder/decoder. The definition of new tags with this property is NOT RECOMMENDED."),(0,i.kt)("p",null,"IANA allocated tag numbers 65535, 4294967295, and 18446744073709551615 (binary all-ones in 16-bit, 32-bit, and 64-bit). These can be used as a convenience for implementers who want a single-integer data structure to indicate either the presence of a specific tag or absence of a tag. That allocation is described in Section 10 of ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/draft-bormann-cbor-notable-tags-02"},"CBOR-TAGS"),". These tags are not intended to occur in actual CBOR data items; implementations MAY flag such an occurrence as an error."),(0,i.kt)("p",null,"Protocols can extend the generic data model (Section 2) with data items representing points in time by using tag numbers 0 and 1, with arbitrarily sized integers by using tag numbers 2 and 3, and with floating-point values of arbitrary size and precision by using tag numbers 4 and 5.")),(0,i.kt)("p",null,"\u5728 CBOR \u4e2d\uff0c\u53ef\u4ee5\u7528\u6807\u7b7e\u5c06\u6570\u636e\u9879\u5c01\u88c5\u8d77\u6765\uff0c\u4ee5\u8d4b\u4e88\u5b83\u7531\u6807\u7b7e\u53f7\u552f\u4e00\u6807\u8bc6\u7684\u4e00\u4e9b\u9644\u52a0\u8bed\u4e49\u3002\u6807\u7b7e\u662f\u4e3b\u7c7b\u578b 6\uff0c\u5176\u53c2\u6570\uff08\u7b2c 3 \u8282\uff09\u8868\u793a\u6807\u7b7e\u53f7\uff08tag number\uff09\uff0c\u5e76\u5305\u542b\u5355\u4e2a\u5c01\u88c5\u7684\u6570\u636e\u9879\uff0c\u5373\u6807\u7b7e\u5185\u5bb9\uff08tag content\uff09\u3002\uff08\u5982\u679c\u6807\u7b7e\u9700\u8981\u4e3a\u5176\u5185\u5bb9\u63d0\u4f9b\u8fdb\u4e00\u6b65\u7684\u7ed3\u6784\uff0c\u5219\u6b64\u7ed3\u6784\u7531\u5c01\u88c5\u7684\u6570\u636e\u9879\u63d0\u4f9b\u3002\uff09\u6211\u4eec\u4f7f\u7528\u672f\u8bed\u6807\u7b7e\u8868\u793a\u7531\u6807\u7b7e\u53f7\u548c\u6807\u7b7e\u5185\u5bb9\u7ec4\u6210\u7684\u6574\u4e2a\u6570\u636e\u9879\uff1a\u6807\u7b7e\u5185\u5bb9\u662f\u88ab\u6807\u8bb0\u7684\u6570\u636e\u9879\u3002"),(0,i.kt)("p",null,"\u4f8b\u5982\uff0c\u5047\u8bbe\u4e00\u4e2a\u957f\u5ea6\u4e3a 12 \u7684\u5b57\u8282\u4e32\u7528\u6807\u7b7e\u53f7 2 \u6807\u8bb0\uff0c\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u975e\u8d1f\u5927\u6574\u6570\uff08\u7b2c 3.4.3 \u8282\uff09\u3002\u7f16\u7801\u7684\u6570\u636e\u9879\u5c06\u4ece\u5b57\u8282 0b110_00010\uff08\u4e3b\u7c7b\u578b 6\uff0c\u9644\u52a0\u4fe1\u606f 2 \u8868\u793a\u6807\u7b7e\u53f7\uff09\u5f00\u59cb\uff0c\u540e\u8ddf\u7f16\u7801\u7684\u6807\u7b7e\u5185\u5bb9\uff1a0b010_01100\uff08\u4e3b\u7c7b\u578b 2\uff0c\u9644\u52a0\u4fe1\u606f 12 \u8868\u793a\u957f\u5ea6\uff09\uff0c\u7136\u540e\u662f\u5927\u6570\u7684 12 \u4e2a\u5b57\u8282\u3002"),(0,i.kt)("p",null,"\u5728\u6269\u5c55\u7684\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\uff0c\u6807\u7b7e\u53f7\u7684\u5b9a\u4e49\u63cf\u8ff0\u4e86\u4e0e\u6807\u7b7e\u53f7\u4e00\u8d77\u4f20\u8f93\u7684\u9644\u52a0\u8bed\u4e49\u3002\u8fd9\u4e9b\u8bed\u4e49\u53ef\u80fd\u5305\u62ec\u67d0\u4e9b\u6807\u7b7e\u6570\u636e\u9879\u4e0e\u5176\u4ed6\u6570\u636e\u9879\u7684\u7b49\u4ef7\u6027\uff0c\u5305\u62ec\u53ef\u4ee5\u5728\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u8868\u793a\u7684\u67d0\u4e9b\u6570\u636e\u9879\u3002\u4f8b\u5982\uff0c0xc24101 \u662f\u4e00\u4e2a\u975e\u8d1f\u5927\u6574\u6570\uff0c\u5176\u6807\u7b7e\u5185\u5bb9\u662f\u5177\u6709\u5355\u4e2a\u5b57\u8282 0x01 \u7684\u5b57\u8282\u4e32\uff0c\u7b49\u4ef7\u4e8e\u6574\u6570 1\uff0c\u4e5f\u53ef\u4ee5\u7f16\u7801\u4e3a 0x01\u30010x1801 \u6216 0x190001\u3002\u6807\u7b7e\u5b9a\u4e49\u53ef\u4ee5\u6307\u5b9a\u5efa\u8bae\u7528\u4e8e\u901a\u7528\u7f16\u7801\u5668\u7684\u9996\u9009\u5e8f\u5217\u5316\uff08\u7b2c 4.1 \u8282\uff09\uff1b\u8fd9\u53ef\u80fd\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u8868\u793a\u800c\u4e0d\u662f\u4f7f\u7528\u6807\u7b7e\u3002"),(0,i.kt)("p",null,"\u6807\u7b7e\u5b9a\u4e49\u901a\u5e38\u5b9a\u4e49\u4e86\u5bf9\u4e8e\u8fd9\u4e9b\u6807\u7b7e\u6709\u6548\u7684\u5d4c\u5957\u6570\u636e\u9879\u3002\u6807\u7b7e\u5b9a\u4e49\u53ef\u4ee5\u5c06\u5176\u5185\u5bb9\u9650\u5236\u4e3a\u975e\u5e38\u7279\u5b9a\u7684\u8bed\u6cd5\u7ed3\u6784\uff0c\u5c31\u50cf\u672c\u6587\u6863\u4e2d\u5b9a\u4e49\u7684\u6807\u7b7e\u90a3\u6837\uff0c\u6216\u8005\u53ef\u4ee5\u66f4\u8bed\u4e49\u5730\u5b9a\u4e49\u5176\u5185\u5bb9\u3002\u540e\u8005\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u7b7e 40 \u548c 1040 \u5982\u4f55\u63a5\u53d7\u8868\u793a\u6570\u7ec4\u7684\u591a\u79cd\u65b9\u5f0f ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8746"},"RFC8746"),"\u3002"),(0,i.kt)("p",null,"\u6309\u7167\u60ef\u4f8b\uff0c\u8bb8\u591a\u6807\u7b7e\u4e0d\u63a5\u53d7\u7a7a\u503c\u6216\u672a\u5b9a\u4e49\u503c\u4f5c\u4e3a\u6807\u7b7e\u5185\u5bb9\uff1b\u76f8\u53cd\uff0c\u671f\u671b\u5728\u6574\u4e2a\u6807\u7b7e\u7684\u4f4d\u7f6e\u53ef\u4ee5\u4f7f\u7528\u7a7a\u503c\u6216\u672a\u5b9a\u4e49\u503c\uff1b\u7b2c 3.4.2 \u8282\u4e3a\u4e00\u4e2a\u7279\u5b9a\u6807\u7b7e\u63d0\u4f9b\u4e86\u5173\u4e8e\u5728\u5e94\u7528\u7a0b\u5e8f\u534f\u8bae\u548c\u6620\u5c04\u5230\u5e73\u53f0\u7c7b\u578b\u4e2d\u5904\u7406\u6b64\u7ea6\u5b9a\u7684\u4e00\u4e9b\u8fdb\u4e00\u6b65\u8003\u8651\u3002"),(0,i.kt)("p",null,"\u89e3\u7801\u5668\u4e0d\u9700\u8981\u4e86\u89e3\u6bcf\u4e2a\u6807\u7b7e\u53f7\u7684\u6807\u7b7e\uff0c\u800c\u4e14\u5728\u5b9e\u73b0\u521b\u5efa\u7279\u5b9a CBOR \u6570\u636e\u9879\u548c\u89e3\u7801\u8be5\u6d41\u7684\u5b9e\u73b0\u77e5\u9053\u6570\u636e\u6d41\u4e2d\u6bcf\u4e2a\u6570\u636e\u9879\u7684\u8bed\u4e49\u542b\u4e49\u7684\u5e94\u7528\u4e2d\uff0c\u6807\u7b7e\u53ef\u80fd\u4ef7\u503c\u4e0d\u5927\u3002\u672c\u89c4\u8303\u4e2d\u6807\u7b7e\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5b9a\u4e49\u8bf8\u5982\u65e5\u671f\u4e4b\u7c7b\u7684\u901a\u7528\u6570\u636e\u7c7b\u578b\u3002\u6b21\u8981\u76ee\u7684\u662f\u5728\u9884\u89c1\u5230 CBOR \u6570\u636e\u9879\u9700\u8981\u8f6c\u6362\u4e3a\u4e0d\u540c\u683c\u5f0f\u65f6\uff0c\u63d0\u4f9b\u5173\u4e8e\u6570\u636e\u9879\u5185\u5bb9\u7684\u63d0\u793a\u3002\u89e3\u7801\u5668\u7406\u89e3\u6807\u7b7e\u7684\u8bed\u4e49\u662f\u53ef\u9009\u7684\uff1b\u5b83\u53ef\u4ee5\u5728\u4e0d\u89e3\u91ca\u6807\u7b7e\u7684\u9644\u52a0\u8bed\u4e49\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u6807\u7b7e\u53f7\u548c\u6807\u7b7e\u5185\u5bb9\u5448\u73b0\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002"),(0,i.kt)("p",null,"\u6807\u7b7e\u4e3a\u5176\u5c01\u88c5\u7684\u6570\u636e\u9879\u5e94\u7528\u8bed\u4e49\u3002\u6807\u7b7e\u53ef\u4ee5\u5d4c\u5957\uff1a\u5982\u679c\u6807\u7b7e A \u5c01\u88c5\u6807\u7b7e B\uff0c\u6807\u7b7e B \u5c01\u88c5\u6570\u636e\u9879 C\uff0c\u90a3\u4e48\u6807\u7b7e A \u5c06\u5e94\u7528\u4e8e\u5c06\u6807\u7b7e B \u5e94\u7528\u4e8e\u6570\u636e\u9879 C \u7684\u7ed3\u679c\u4e0a\u3002"),(0,i.kt)("p",null,"IANA \u6309\u7167\u7b2c 9.2 \u8282\u7684\u63cf\u8ff0\u7ef4\u62a4\u4e00\u4e2a\u6807\u7b7e\u53f7\u6ce8\u518c\u8868\u3002\u8868 5 \u63d0\u4f9b\u4e86\u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u4e2d\u5b9a\u4e49\u7684\u6807\u7b7e\u53f7\u5217\u8868\uff0c\u672c\u8282\u5176\u4f59\u90e8\u5206\u7ed9\u51fa\u4e86\u5b9a\u4e49\u3002\uff08\u6807\u7b7e\u53f7 35 \u4e5f\u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u4e2d\u5b9a\u4e49\uff1b\u5173\u4e8e\u6b64\u6807\u7b7e\u53f7\u7684\u8ba8\u8bba\u89c1\u7b2c 3.4.5.3 \u8282\u3002\uff09\u8bf7\u6ce8\u610f\uff0c\u81ea ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u51fa\u7248\u4ee5\u6765\u5df2\u7ecf\u5b9a\u4e49\u4e86\u8bb8\u591a\u5176\u4ed6\u6807\u7b7e\u53f7\uff1b\u6709\u5173\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u53c2\u89c1\u7b2c 9.2 \u8282\u63cf\u8ff0\u7684\u6ce8\u518c\u8868\u3002"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Tag"),(0,i.kt)("th",{parentName:"tr",align:null},"Data Item"),(0,i.kt)("th",{parentName:"tr",align:null},"Semantics"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"Standard date/time string; see Section 3.4.1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"integer or float"),(0,i.kt)("td",{parentName:"tr",align:null},"Epoch-based date/time; see Section 3.4.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"Unsigned bignum; see Section 3.4.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"Negative bignum; see Section 3.4.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"Decimal fraction; see Section 3.4.4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"Bigfloat; see Section 3.4.4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"21"),(0,i.kt)("td",{parentName:"tr",align:null},"(any)"),(0,i.kt)("td",{parentName:"tr",align:null},"Expected conversion to base64url encoding; see Section 3.4.5.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"22"),(0,i.kt)("td",{parentName:"tr",align:null},"(any)"),(0,i.kt)("td",{parentName:"tr",align:null},"Expected conversion to base64 encoding; see Section 3.4.5.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"23"),(0,i.kt)("td",{parentName:"tr",align:null},"(any)"),(0,i.kt)("td",{parentName:"tr",align:null},"Expected conversion to base16 encoding; see Section 3.4.5.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"24"),(0,i.kt)("td",{parentName:"tr",align:null},"byte string"),(0,i.kt)("td",{parentName:"tr",align:null},"Encoded CBOR data item; see Section 3.4.5.1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"32"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"URI; see Section 3.4.5.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"33"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"base64url; see Section 3.4.5.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"34"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"base64; see Section 3.4.5.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"36"),(0,i.kt)("td",{parentName:"tr",align:null},"text string"),(0,i.kt)("td",{parentName:"tr",align:null},"MIME message; see Section 3.4.5.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"55799"),(0,i.kt)("td",{parentName:"tr",align:null},"(any)"),(0,i.kt)("td",{parentName:"tr",align:null},"Self-described CBOR; see Section 3.4.6")))),(0,i.kt)("p",null,"\u8868 5\uff1aRFC 7049 \u4e2d\u5b9a\u4e49\u7684\u6807\u7b7e\u53f7"),(0,i.kt)("p",null,"\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u6807\u7b7e\u5728\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u89e3\u91ca\uff0c\u800c\u4e0d\u662f\u5728\uff08\u53cd\uff09\u5e8f\u5217\u5316\u65f6\u3002\u5c11\u91cf\u6807\u7b7e\uff08\u76ee\u524d\u4e3a\u6b62\uff0c\u6807\u7b7e\u53f7 25 \u548c\u6807\u7b7e\u53f7 29 ",(0,i.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/cbor-tags"},"IANA.cbor-tags"),"\uff09\u5df2\u6ce8\u518c\u5177\u6709\u53ef\u80fd\u9700\u8981\u5728\uff08\u53cd\uff09\u5e8f\u5217\u5316\u65f6\u5904\u7406\u7684\u8bed\u4e49\uff1a\u89e3\u7801\u5668\u9700\u8981\u4e86\u89e3\uff0c\u5e76\u4e14\u7f16\u7801\u5668\u9700\u8981\u63a7\u5236\u6570\u636e\u9879\u88ab\u7f16\u7801\u5230 CBOR \u6570\u636e\u9879\u7684\u786e\u5207\u987a\u5e8f\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u4e9b\u6807\u7b7e\u4e0d\u80fd\u5728\u4efb\u610f\u901a\u7528 CBOR \u7f16\u7801\u5668/\u89e3\u7801\u5668\u4e4b\u4e0a\u5b9e\u73b0\uff08\u5728\u6570\u636e\u6a21\u578b\u7ea7\u522b\u53ef\u80fd\u65e0\u6cd5\u53cd\u6620\u6620\u5c04\u4e2d\u6761\u76ee\u7684\u5e8f\u5217\u5316\u987a\u5e8f\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\uff1b\u56e0\u6b64\uff0c\u5b83\u4eec\u7684\u5b9e\u73b0\u901a\u5e38\u9700\u8981\u96c6\u6210\u5230\u901a\u7528\u7f16\u7801\u5668/\u89e3\u7801\u5668\u4e2d\u3002\u4e0d\u5efa\u8bae\uff08NOT RECOMMENDED\uff09\u5b9a\u4e49\u5177\u6709\u6b64\u5c5e\u6027\u7684\u65b0\u6807\u7b7e\u3002"),(0,i.kt)("p",null,"IANA \u4e3a\u6807\u7b7e\u53f7\u5206\u914d\u4e86 65535\u30014294967295 \u548c 18446744073709551615\uff08\u5728 16 \u4f4d\u300132 \u4f4d\u548c 64 \u4f4d\u4e2d\u7684\u4e8c\u8fdb\u5236\u5168 1\uff09\u3002\u8fd9\u53ef\u4ee5\u65b9\u4fbf\u5b9e\u73b0\u8005\uff0c\u4ed6\u4eec\u5e0c\u671b\u4f7f\u7528\u5355\u4e2a\u6574\u6570\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\u7279\u5b9a\u6807\u7b7e\u7684\u5b58\u5728\u6216\u6807\u7b7e\u7684\u7f3a\u5931\u3002\u8be5\u5206\u914d\u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/draft-bormann-cbor-notable-tags-02"},"CBOR-TAGS")," \u7684\u7b2c 10 \u8282\u4e2d\u6709\u63cf\u8ff0\u3002\u8fd9\u4e9b\u6807\u7b7e\u5e76\u975e\u5b9e\u9645 CBOR \u6570\u636e\u9879\u4e2d\u51fa\u73b0\u7684\u6807\u7b7e\uff1b\u5b9e\u73b0\u53ef\u4ee5\uff08MAY\uff09\u5c06\u6b64\u7c7b\u51fa\u73b0\u6807\u8bb0\u4e3a\u9519\u8bef\u3002"),(0,i.kt)("p",null,"\u534f\u8bae\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u53f7 0 \u548c 1 \u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\uff08\u7b2c 2 \u8282\uff09\uff0c\u8868\u793a\u65f6\u95f4\u70b9\u7684\u6570\u636e\u9879\uff1b\u901a\u8fc7\u4f7f\u7528\u6807\u7b7e\u53f7 2 \u548c 3\uff0c\u8868\u793a\u4efb\u610f\u5927\u5c0f\u7684\u6574\u6570\uff1b\u901a\u8fc7\u4f7f\u7528\u6807\u7b7e\u53f7 4 \u548c 5\uff0c\u8868\u793a\u4efb\u610f\u5927\u5c0f\u548c\u7cbe\u5ea6\u7684\u6d6e\u70b9\u503c\u3002"),(0,i.kt)("h4",{id:"341-\u6807\u51c6\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32standard-datetime-string"},"3.4.1. \u6807\u51c6\u65e5\u671f/\u65f6\u95f4\u5b57\u7b26\u4e32\uff08Standard Date/Time String\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Tag number 0 contains a text string in the standard format described by the date-time production in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3339"},"RFC3339"),", as refined by Section 3.3 of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4287"},"RFC4287"),", representing the point in time described there. A nested item of another type or a text string that doesn't match the format described in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4287"},"RFC4287")," is invalid.")),(0,i.kt)("p",null,"\u6807\u7b7e\u53f7 0 \u5305\u542b\u4e00\u4e2a\u6587\u672c\u4e32\uff0c\u91c7\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3339"},"RFC3339")," \u4e2d\u63cf\u8ff0\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"date-time")," \u4ea7\u751f\u7684\u6807\u51c6\u683c\u5f0f\uff0c\u7531 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4287"},"RFC4287")," \u7b2c 3.3 \u8282\u8fdb\u884c\u7ec6\u5316\uff0c\u8868\u793a\u5176\u4e2d\u63cf\u8ff0\u7684\u65f6\u95f4\u70b9\u3002\u5d4c\u5957\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u9879\u6216\u4e0d\u7b26\u5408 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4287"},"RFC4287")," \u4e2d\u63cf\u8ff0\u7684\u683c\u5f0f\u7684\u6587\u672c\u4e32\u662f\u65e0\u6548\u7684\u3002"),(0,i.kt)("h4",{id:"342-\u57fa\u4e8e\u7eaa\u5143\u7684\u65e5\u671f\u65f6\u95f4epoch-based-datetime"},"3.4.2. \u57fa\u4e8e\u7eaa\u5143\u7684\u65e5\u671f/\u65f6\u95f4\uff08Epoch-Based Date/Time\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Tag number 1 contains a numerical value counting the number of seconds from 1970-01-01T00:00Z in UTC time to the represented point in civil time."),(0,i.kt)("p",null,"The tag content MUST be an unsigned or negative integer (major types 0 and 1) or a floating-point number (major type 7 with additional information 25, 26, or 27). Other contained types are invalid."),(0,i.kt)("p",null,"Nonnegative values (major type 0 and nonnegative floating-point numbers) stand for time values on or after 1970-01-01T00:00Z UTC and are interpreted according to POSIX ",(0,i.kt)("a",{parentName:"p",href:"https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16"},"TIME_T"),'. (POSIX time is also known as "UNIX Epoch time".) Leap seconds are handled specially by POSIX time, and this results in a 1-second discontinuity several times per decade. Note that applications that require the expression of times beyond early 2106 cannot leave out support of 64-bit integers for the tag content.'),(0,i.kt)("p",null,"Negative values (major type 1 and negative floating-point numbers) are interpreted as determined by the application requirements as there is no universal standard for UTC count-of-seconds time before 1970-01-01T00:00Z (this is particularly true for points in time that precede discontinuities in national calendars). The same applies to non-finite values."),(0,i.kt)("p",null,"To indicate fractional seconds, floating-point values can be used within tag number 1 instead of integer values. Note that this generally requires binary64 support, as binary16 and binary32 provide nonzero fractions of seconds only for a short period of time around early 1970. An application that requires tag number 1 support may restrict the tag content to be an integer (or a floating-point value) only."),(0,i.kt)("p",null,"Note that platform types for date/time may include null or undefined values, which may also be desirable at an application protocol level. While emitting tag number 1 values with non-finite tag content values (e.g., with NaN for undefined date/time values or with Infinity for an expiry date that is not set) may seem an obvious way to handle this, using untagged null or undefined avoids the use of non-finites and results in a shorter encoding. Application protocol designers are encouraged to consider these cases and include clear guidelines for handling them.")),(0,i.kt)("p",null,"\u6807\u7b7e\u53f7 1 \u5305\u542b\u4e00\u4e2a\u6570\u5b57\u503c\uff0c\u8868\u793a\u4ece 1970-01-01T00:00Z \u7684 UTC \u65f6\u95f4\u5230\u8868\u793a\u7684\u516c\u5386\u65f6\u95f4\u70b9\u4e4b\u95f4\u7684\u79d2\u6570\u3002"),(0,i.kt)("p",null,"\u6807\u7b7e\u5185\u5bb9\u5fc5\u987b\uff08MUST\uff09\u662f\u975e\u8d1f\u6574\u6570\u6216\u8d1f\u6574\u6570\uff08\u4e3b\u7c7b\u578b 0 \u548c 1\uff09\u6216\u6d6e\u70b9\u6570\uff08\u4e3b\u7c7b\u578b 7\uff0c\u9644\u52a0\u4fe1\u606f\u4e3a 25\u300126 \u6216 27\uff09\u3002\u5176\u4ed6\u5305\u542b\u7684\u7c7b\u578b\u662f\u65e0\u6548\u7684\u3002"),(0,i.kt)("p",null,"\u975e\u8d1f\u503c\uff08\u4e3b\u7c7b\u578b 0 \u548c\u975e\u8d1f\u6d6e\u70b9\u6570\uff09\u8868\u793a 1970-01-01T00:00Z UTC \u4e4b\u540e\u7684\u65f6\u95f4\u503c\uff0c\u5e76\u6839\u636e POSIX ",(0,i.kt)("a",{parentName:"p",href:"https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16"},"TIME_T"),' \u8fdb\u884c\u89e3\u91ca\u3002\uff08POSIX \u65f6\u95f4\u4e5f\u88ab\u79f0\u4e3a "UNIX Epoch time"\u3002\uff09\u95f0\u79d2\u5728 POSIX \u65f6\u95f4\u4e2d\u5f97\u5230\u7279\u6b8a\u5904\u7406\uff0c\u5e76\u4e14\u5728\u6bcf\u5341\u5e74\u5185\u591a\u6b21\u51fa\u73b0 1 \u79d2\u7684\u4e0d\u8fde\u7eed\u6027\u3002\u8bf7\u6ce8\u610f\uff0c\u9700\u8981\u8868\u793a 2106 \u5e74\u521d\u4e4b\u540e\u7684\u65f6\u95f4\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u7701\u7565\u5bf9\u6807\u7b7e\u5185\u5bb9\u7684 64 \u4f4d\u6574\u6570\u652f\u6301\u3002'),(0,i.kt)("p",null,"\u8d1f\u503c\uff08\u4e3b\u7c7b\u578b 1 \u548c\u8d1f\u6d6e\u70b9\u6570\uff09\u7684\u89e3\u91ca\u7531\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u51b3\u5b9a\uff0c\u56e0\u4e3a\u5728 1970-01-01T00:00Z \u4e4b\u524d\u7684 UTC \u79d2\u8ba1\u65f6\u6ca1\u6709\u901a\u7528\u6807\u51c6\uff08\u5bf9\u4e8e\u5728\u56fd\u5bb6\u5386\u6cd5\u4e2d\u51fa\u73b0\u7684\u4e0d\u8fde\u7eed\u65f6\u95f4\u70b9\u4e4b\u524d\u7684\u65f6\u95f4\u70b9\u5c24\u5176\u5982\u6b64\uff09\u3002\u5bf9\u4e8e\u975e\u6709\u9650\u503c\u4e5f\u662f\u5982\u6b64\u3002"),(0,i.kt)("p",null,"\u8981\u8868\u793a\u79d2\u7684\u5c0f\u6570\u90e8\u5206\uff0c\u53ef\u4ee5\u5728\u6807\u7b7e\u53f7 1 \u5185\u4f7f\u7528\u6d6e\u70b9\u503c\u800c\u4e0d\u662f\u6574\u6570\u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u901a\u5e38\u9700\u8981 binary64 \u652f\u6301\uff0c\u56e0\u4e3a binary16 \u548c binary32 \u4ec5\u5728 1970 \u5e74\u521d\u9644\u8fd1\u7684\u77ed\u65f6\u95f4\u5185\u63d0\u4f9b\u975e\u96f6\u79d2\u7684\u5206\u6570\u3002\u9700\u8981\u6807\u7b7e\u53f7 1 \u652f\u6301\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u9650\u5236\u6807\u7b7e\u5185\u5bb9\u4ec5\u4e3a\u6574\u6570\uff08\u6216\u6d6e\u70b9\u503c\uff09\u3002"),(0,i.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u5e73\u53f0\u7c7b\u578b\u7684\u65e5\u671f/\u65f6\u95f4\u53ef\u80fd\u5305\u62ec\u7a7a\u503c\u6216\u672a\u5b9a\u4e49\u7684\u503c\uff0c\u8fd9\u5728\u5e94\u7528\u7a0b\u5e8f\u534f\u8bae\u5c42\u9762\u4e0a\u53ef\u80fd\u4e5f\u662f\u9700\u8981\u7684\u3002\u867d\u7136\u53d1\u51fa\u5177\u6709\u975e\u6709\u9650\u6807\u7b7e\u5185\u5bb9\u503c\u7684\u6807\u7b7e\u53f7 1 \u503c\uff08\u4f8b\u5982\uff0c\u5bf9\u4e8e\u672a\u5b9a\u4e49\u7684\u65e5\u671f/\u65f6\u95f4\u503c\u4f7f\u7528 NaN \u6216\u5bf9\u4e8e\u672a\u8bbe\u7f6e\u7684\u5230\u671f\u65e5\u671f\u4f7f\u7528 Infinity\uff09\u53ef\u80fd\u770b\u8d77\u6765\u662f\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u7684\u660e\u663e\u65b9\u6cd5\uff0c\u4f46\u4f7f\u7528\u672a\u6807\u8bb0\u7684\u7a7a\u503c\u6216\u672a\u5b9a\u4e49\u503c\u53ef\u4ee5\u907f\u514d\u4f7f\u7528\u975e\u6709\u9650\u503c\u5e76\u4ea7\u751f\u66f4\u77ed\u7684\u7f16\u7801\u3002\u5e94\u7528\u534f\u8bae\u8bbe\u8ba1\u8005\u9f13\u52b1\u8003\u8651\u8fd9\u4e9b\u60c5\u51b5\u5e76\u4e3a\u5904\u7406\u5b83\u4eec\u63d0\u4f9b\u660e\u786e\u7684\u6307\u5357\u3002"),(0,i.kt)("h4",{id:"343-\u5927\u6574\u6570bignums"},"3.4.3. \u5927\u6574\u6570\uff08Bignums\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'Protocols using tag numbers 2 and 3 extend the generic data model (Section 2) with "bignums" representing arbitrarily sized integers. In the basic generic data model, bignum values are not equal to integers from the same model, but the extended generic data model created by this tag definition defines equivalence based on numeric value, and preferred serialization (Section 4.1) never makes use of bignums that also can be expressed as basic integers (see below).'),(0,i.kt)("p",null,"Bignums are encoded as a byte string data item, which is interpreted as an unsigned integer n in network byte order. Contained items of other types are invalid. For tag number 2, the value of the bignum is n. For tag number 3, the value of the bignum is -1 - n. The preferred serialization of the byte string is to leave out any leading zeroes (note that this means the preferred serialization for n = 0 is the empty byte string, but see below). Decoders that understand these tags MUST be able to decode bignums that do have leading zeroes. The preferred serialization of an integer that can be represented using major type 0 or 1 is to encode it this way instead of as a bignum (which means that the empty string never occurs in a bignum when using preferred serialization). Note that this means the non-preferred choice of a bignum representation instead of a basic integer for encoding a number is not intended to have application semantics (just as the choice of a longer basic integer representation than needed, such as 0x1800 for 0x00, does not)."),(0,i.kt)("p",null,"For example, the number 18446744073709551616 (2^64) is represented as 0b110_00010 (major type 6, tag number 2), followed by 0b010_01001 (major type 2, length 9), followed by 0x010000000000000000 (one byte 0x01 and eight bytes 0x00). In hexadecimal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"C2                        -- Tag 2\n   49                     -- Byte string of length 9\n      010000000000000000  -- Bytes content\n"))),(0,i.kt)("p",null,"\u4f7f\u7528\u6807\u7b7e\u53f7 2 \u548c 3 \u7684\u534f\u8bae\u901a\u8fc7\u201c\u5927\u6574\u6570\u201d\u6269\u5c55\u4e86\u901a\u7528\u6570\u636e\u6a21\u578b\uff08\u7b2c 2 \u8282\uff09\uff0c\u8868\u793a\u4efb\u610f\u5927\u5c0f\u7684\u6574\u6570\u3002\u5728\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\uff0c\u5927\u6574\u6570\u503c\u4e0e\u6765\u81ea\u76f8\u540c\u6a21\u578b\u7684\u6574\u6570\u4e0d\u76f8\u7b49\uff0c\u4f46\u7531\u8be5\u6807\u7b7e\u5b9a\u4e49\u521b\u5efa\u7684\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\u57fa\u4e8e\u6570\u503c\u5b9a\u4e49\u7b49\u4ef7\uff0c\u5e76\u4e14\u9996\u9009\u5e8f\u5217\u5316\uff08\u7b2c 4.1 \u8282\uff09\u4ece\u4e0d\u4f7f\u7528\u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\u57fa\u672c\u6574\u6570\u7684\u5927\u6574\u6570\uff08\u89c1\u4e0b\u6587\uff09\u3002"),(0,i.kt)("p",null,"\u5927\u6574\u6570\u88ab\u7f16\u7801\u4e3a\u5b57\u8282\u4e32\u6570\u636e\u9879\uff0c\u4ee5\u7f51\u7edc\u5b57\u8282\u987a\u5e8f\u89e3\u91ca\u4e3a\u975e\u8d1f\u6574\u6570 n\u3002\u5305\u542b\u5176\u4ed6\u7c7b\u578b\u7684\u9879\u662f\u65e0\u6548\u7684\u3002\u5bf9\u4e8e\u6807\u7b7e\u53f7 2\uff0c\u5927\u6574\u6570\u7684\u503c\u4e3a n\u3002\u5bf9\u4e8e\u6807\u7b7e\u53f7 3\uff0c\u5927\u6574\u6570\u7684\u503c\u4e3a -1 - n\u3002\u5b57\u8282\u4e32\u7684\u9996\u9009\u5e8f\u5217\u5316\u662f\u7701\u7565\u4efb\u4f55\u524d\u5bfc\u96f6\uff08\u6ce8\u610f\u8fd9\u610f\u5473\u7740 n = 0 \u7684\u9996\u9009\u5e8f\u5217\u5316\u662f\u7a7a\u5b57\u8282\u4e32\uff0c\u4f46\u8bf7\u53c2\u9605\u4e0b\u6587\uff09\u3002\u7406\u89e3\u8fd9\u4e9b\u6807\u7b7e\u7684\u89e3\u7801\u5668\u5fc5\u987b\uff08MUST\uff09\u80fd\u591f\u89e3\u7801\u5177\u6709\u524d\u5bfc\u96f6\u7684\u5927\u6574\u6570\u3002\u53ef\u4ee5\u7528\u4e3b\u7c7b\u578b 0 \u6216 1 \u8868\u793a\u7684\u6574\u6570\u7684\u9996\u9009\u5e8f\u5217\u5316\u662f\u5c06\u5176\u7f16\u7801\u4e3a\u8fd9\u79cd\u65b9\u5f0f\u800c\u4e0d\u662f\u4f5c\u4e3a\u5927\u6574\u6570\uff08\u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u9996\u9009\u5e8f\u5217\u5316\u65f6\uff0c\u7a7a\u5b57\u7b26\u4e32\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u5728\u5927\u6574\u6570\u4e2d\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740\u4f7f\u7528\u5927\u6574\u6570\u8868\u793a\u800c\u4e0d\u662f\u57fa\u672c\u6574\u6570\u8868\u793a\u6765\u7f16\u7801\u6570\u5b57\u7684\u975e\u9996\u9009\u9009\u62e9\u4e0d\u662f\u4e3a\u4e86\u5177\u6709\u5e94\u7528\u7a0b\u5e8f\u8bed\u4e49\uff08\u6b63\u5982\u9009\u62e9\u6bd4\u9700\u8981\u7684\u66f4\u957f\u7684\u57fa\u672c\u6574\u6570\u8868\u793a\uff0c\u4f8b\u5982 0x1800 \u8868\u793a 0x00\uff0c\u4e5f\u4e0d\u662f\uff09\u3002"),(0,i.kt)("p",null,"\u4f8b\u5982\uff0c\u6570\u5b57 18446744073709551616\uff082^64\uff09\u8868\u793a\u4e3a 0b110_00010\uff08\u4e3b\u7c7b\u578b 6\uff0c\u6807\u7b7e\u53f7 2\uff09\uff0c\u540e\u8ddf 0b010_01001\uff08\u4e3b\u7c7b\u578b 2\uff0c\u957f\u5ea6 9\uff09\uff0c\u518d\u8ddf 0x010000000000000000\uff08\u4e00\u4e2a\u5b57\u8282 0x01 \u548c\u516b\u4e2a\u5b57\u8282 0x00\uff09\u3002\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a\u4e3a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"C2                        -- Tag 2\n   49                     -- Byte string of length 9\n      010000000000000000  -- Bytes content\n")),(0,i.kt)("h4",{id:"344-\u5341\u8fdb\u5236\u5206\u6570\u548c\u5927\u6d6e\u70b9\u6570decimal-fractions-and-bigfloats"},"3.4.4. \u5341\u8fdb\u5236\u5206\u6570\u548c\u5927\u6d6e\u70b9\u6570\uff08Decimal Fractions and Bigfloats\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Protocols using tag number 4 extend the generic data model with data items representing arbitrary-length decimal fractions of the form m",(0,i.kt)("em",{parentName:"p"},"(10^e). Protocols using tag number 5 extend the generic data model with data items representing arbitrary-length binary fractions of the form m"),"(2^e). As with bignums, values of different types are not equal in the generic data model."),(0,i.kt)("p",null,"Decimal fractions combine an integer mantissa with a base-10 scaling factor. They are most useful if an application needs the exact representation of a decimal fraction such as 1.1 because there is no exact representation for many decimal fractions in binary floating-point representations."),(0,i.kt)("p",null,'"Bigfloats" combine an integer mantissa with a base-2 scaling factor. They are binary floating-point values that can exceed the range or the precision of the three IEEE 754 formats supported by CBOR (Section 3.3). Bigfloats may also be used by constrained applications that need some basic binary floating-point capability without the need for supporting IEEE 754.'),(0,i.kt)("p",null,"A decimal fraction or a bigfloat is represented as a tagged array that contains exactly two integer numbers: an exponent e and a mantissa m. Decimal fractions (tag number 4) use base-10 exponents; the value of a decimal fraction data item is m",(0,i.kt)("em",{parentName:"p"},"(10e). Bigfloats (tag number 5) use base-2 exponents; the value of a bigfloat data item is m"),"(2^e). The exponent e MUST be represented in an integer of major type 0 or 1, while the mantissa can also be a bignum (Section 3.4.3). Contained items with other structures are invalid."),(0,i.kt)("p",null,"An example of a decimal fraction is the representation of the number 273.15 as 0b110_00100 (major type 6 for tag, additional information 4 for the tag number), followed by 0b100_00010 (major type 4 for the array, additional information 2 for the length of the array), followed by 0b001_00001 (major type 1 for the first integer, additional information 1 for the value of -2), followed by 0b000_11001 (major type 0 for the second integer, additional information 25 for a two-byte value), followed by 0b0110101010110011 (27315 in two bytes). In hexadecimal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"C4             -- Tag 4\n   82          -- Array of length 2\n      21       -- -2\n      19 6ab3  -- 27315\n")),(0,i.kt)("p",null,"An example of a bigfloat is the representation of the number 1.5 as 0b110_00101 (major type 6 for tag, additional information 5 for the tag number), followed by 0b100_00010 (major type 4 for the array, additional information 2 for the length of the array), followed by 0b001_00000 (major type 1 for the first integer, additional information 0 for the value of -1), followed by 0b000_00011 (major type 0 for the second integer, additional information 3 for the value of 3). In hexadecimal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"C5             -- Tag 5\n   82          -- Array of length 2\n      20       -- -1\n      03       -- 3\n")),(0,i.kt)("p",null,"Decimal fractions and bigfloats provide no representation of Infinity, -Infinity, or NaN; if these are needed in place of a decimal fraction or bigfloat, the IEEE 754 half-precision representations from Section 3.3 can be used.")),(0,i.kt)("p",null,"\u4f7f\u7528\u6807\u7b7e\u53f7 4 \u7684\u534f\u8bae\u901a\u8fc7\u6570\u636e\u9879\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\uff0c\u8868\u793a\u5f62\u5f0f\u4e3a m",(0,i.kt)("em",{parentName:"p"},"(10^e) \u7684\u4efb\u610f\u957f\u5ea6\u5341\u8fdb\u5236\u5206\u6570\u3002\u4f7f\u7528\u6807\u7b7e\u53f7 5 \u7684\u534f\u8bae\u901a\u8fc7\u6570\u636e\u9879\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\uff0c\u8868\u793a\u5f62\u5f0f\u4e3a m"),"(2^e) \u7684\u4efb\u610f\u957f\u5ea6\u4e8c\u8fdb\u5236\u5206\u6570\u3002\u4e0e\u5927\u6574\u6570\u4e00\u6837\uff0c\u5728\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u662f\u4e0d\u76f8\u7b49\u7684\u3002"),(0,i.kt)("p",null,"\u5341\u8fdb\u5236\u5206\u6570\u5c06\u6574\u6570\u5c3e\u6570\u4e0e\u57fa\u6570\u4e3a 10 \u7684\u7f29\u653e\u56e0\u5b50\u7ed3\u5408\u8d77\u6765\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7cbe\u786e\u8868\u793a\u5982 1.1 \u7684\u5341\u8fdb\u5236\u5206\u6570\uff0c\u5341\u8fdb\u5236\u5206\u6570\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u5728\u4e8c\u8fdb\u5236\u6d6e\u70b9\u8868\u793a\u4e2d\uff0c\u8bb8\u591a\u5341\u8fdb\u5236\u5206\u6570\u6ca1\u6709\u7cbe\u786e\u8868\u793a\u3002"),(0,i.kt)("p",null,"\u201c\u5927\u6d6e\u70b9\u6570\u201d\u5c06\u6574\u6570\u5c3e\u6570\u4e0e\u57fa\u6570\u4e3a 2 \u7684\u7f29\u653e\u56e0\u5b50\u7ed3\u5408\u8d77\u6765\u3002\u5b83\u4eec\u662f\u4e8c\u8fdb\u5236\u6d6e\u70b9\u503c\uff0c\u53ef\u4ee5\u8d85\u51fa CBOR\uff08\u7b2c 3.3 \u8282\uff09\u652f\u6301\u7684\u4e09\u79cd IEEE 754 \u683c\u5f0f\u7684\u8303\u56f4\u6216\u7cbe\u5ea6\u3002\u5728\u4e0d\u9700\u8981\u652f\u6301 IEEE 754 \u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u4e00\u4e9b\u57fa\u672c\u4e8c\u8fdb\u5236\u6d6e\u70b9\u529f\u80fd\u7684\u53d7\u9650\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5927\u6d6e\u70b9\u6570\u3002"),(0,i.kt)("p",null,"\u5341\u8fdb\u5236\u5206\u6570\u6216\u5927\u6d6e\u70b9\u6570\u8868\u793a\u4e3a\u5305\u542b\u4e24\u4e2a\u6574\u6570\uff1a\u6307\u6570 e \u548c\u5c3e\u6570 m \u7684\u6807\u8bb0\u6570\u7ec4\u3002\u5341\u8fdb\u5236\u5206\u6570\uff08\u6807\u7b7e\u53f7 4\uff09\u4f7f\u7528\u57fa\u6570\u4e3a 10 \u7684\u6307\u6570\uff1b\u5341\u8fdb\u5236\u5206\u6570\u6570\u636e\u9879\u7684\u503c\u4e3a m",(0,i.kt)("em",{parentName:"p"},"(10^e)\u3002\u5927\u6d6e\u70b9\u6570\uff08\u6807\u7b7e\u53f7 5\uff09\u4f7f\u7528\u57fa\u6570\u4e3a 2 \u7684\u6307\u6570\uff1b\u5927\u6d6e\u70b9\u6570\u6570\u636e\u9879\u7684\u503c\u4e3a m"),"(2^e)\u3002\u6307\u6570 e \u5fc5\u987b\u7528\uff08MUST\uff09\u4e3b\u7c7b\u578b\u4e3a 0 \u6216 1 \u7684\u6574\u6570\u8868\u793a\uff0c\u800c\u5c3e\u6570\u8fd8\u53ef\u4ee5\u662f\u5927\u6574\u6570\uff08\u7b2c 3.4.3 \u8282\uff09\u3002\u5305\u542b\u5176\u4ed6\u7ed3\u6784\u7684\u9879\u662f\u65e0\u6548\u7684\u3002"),(0,i.kt)("p",null,"\u4e00\u4e2a\u5341\u8fdb\u5236\u5206\u6570\u7684\u4f8b\u5b50\u662f\u5c06\u6570\u5b57 273.15 \u8868\u793a\u4e3a 0b110_00100\uff08\u4e3b\u7c7b\u578b 6 \u7528\u4e8e\u6807\u7b7e\uff0c\u9644\u52a0\u4fe1\u606f 4 \u7528\u4e8e\u6807\u7b7e\u53f7\uff09\uff0c\u63a5\u7740\u662f 0b100_00010\uff08\u4e3b\u7c7b\u578b 4 \u7528\u4e8e\u6570\u7ec4\uff0c\u9644\u52a0\u4fe1\u606f 2 \u7528\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\uff09\uff0c\u63a5\u7740\u662f 0b001_00001\uff08\u4e3b\u7c7b\u578b 1 \u7528\u4e8e\u7b2c\u4e00\u4e2a\u6574\u6570\uff0c\u9644\u52a0\u4fe1\u606f 1 \u7528\u4e8e -2 \u7684\u503c\uff09\uff0c\u63a5\u7740\u662f 0b000_11001\uff08\u4e3b\u7c7b\u578b 0 \u7528\u4e8e\u7b2c\u4e8c\u4e2a\u6574\u6570\uff0c\u9644\u52a0\u4fe1\u606f 25 \u7528\u4e8e\u4e24\u5b57\u8282\u7684\u503c\uff09\uff0c\u63a5\u7740\u662f 0b0110101010110011\uff08\u4e24\u5b57\u8282\u7684 27315\uff09\u3002\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"C4             -- Tag 4\n   82          -- Array of length 2\n      21       -- -2\n      19 6ab3  -- 27315\n")),(0,i.kt)("p",null,"\u4e00\u4e2a\u5927\u6d6e\u70b9\u6570\u7684\u4f8b\u5b50\u662f\u5c06\u6570\u5b57 1.5 \u8868\u793a\u4e3a 0b110_00101\uff08\u4e3b\u7c7b\u578b 6 \u7528\u4e8e\u6807\u7b7e\uff0c\u9644\u52a0\u4fe1\u606f 5 \u7528\u4e8e\u6807\u7b7e\u53f7\uff09\uff0c\u63a5\u7740\u662f 0b100_00010\uff08\u4e3b\u7c7b\u578b 4 \u7528\u4e8e\u6570\u7ec4\uff0c\u9644\u52a0\u4fe1\u606f 2 \u7528\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\uff09\uff0c\u63a5\u7740\u662f 0b001_00000\uff08\u4e3b\u7c7b\u578b 1 \u7528\u4e8e\u7b2c\u4e00\u4e2a\u6574\u6570\uff0c\u9644\u52a0\u4fe1\u606f 0 \u7528\u4e8e -1 \u7684\u503c\uff09\uff0c\u63a5\u7740\u662f 0b000_00011\uff08\u4e3b\u7c7b\u578b 0 \u7528\u4e8e\u7b2c\u4e8c\u4e2a\u6574\u6570\uff0c\u9644\u52a0\u4fe1\u606f 3 \u7528\u4e8e 3 \u7684\u503c\uff09\u3002\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"C5             -- Tag 5\n   82          -- Array of length 2\n      20       -- -1\n      03       -- 3\n")),(0,i.kt)("p",null,"\u5341\u8fdb\u5236\u5206\u6570\u548c\u5927\u6d6e\u70b9\u6570\u6ca1\u6709\u8868\u793a\u65e0\u7a77\u5927\u3001\u8d1f\u65e0\u7a77\u5927\u6216 NaN \u7684\u8868\u793a\u65b9\u6cd5\uff1b\u5982\u679c\u9700\u8981\u7528\u8fd9\u4e9b\u503c\u4ee3\u66ff\u5341\u8fdb\u5236\u5206\u6570\u6216\u5927\u6d6e\u70b9\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b2c 3.3 \u8282\u7684 IEEE 754 \u534a\u7cbe\u5ea6\u8868\u793a\u3002"),(0,i.kt)("h4",{id:"345-\u5185\u5bb9\u63d0\u793acontent-hints"},"3.4.5. \u5185\u5bb9\u63d0\u793a\uff08Content Hints\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"The tags in this section are for content hints that might be used by generic CBOR processors. These content hints do not extend the generic data model.")),(0,i.kt)("p",null,"\u672c\u8282\u4e2d\u7684\u6807\u7b7e\u7528\u4e8e\u901a\u7528 CBOR \u5904\u7406\u5668\u53ef\u80fd\u4f7f\u7528\u7684\u5185\u5bb9\u63d0\u793a\u3002\u8fd9\u4e9b\u5185\u5bb9\u63d0\u793a\u4e0d\u6269\u5c55\u901a\u7528\u6570\u636e\u6a21\u578b\u3002"),(0,i.kt)("h5",{id:"3451-\u7f16\u7801\u7684-cbor-\u6570\u636e\u9879encoded-cbor-data-item"},"3.4.5.1. \u7f16\u7801\u7684 CBOR \u6570\u636e\u9879\uff08Encoded CBOR Data Item\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Sometimes it is beneficial to carry an embedded CBOR data item that is not meant to be decoded immediately at the time the enclosing data item is being decoded. Tag number 24 (CBOR data item) can be used to tag the embedded byte string as a single data item encoded in CBOR format. Contained items that aren't byte strings are invalid. A contained byte string is valid if it encodes a well-formed CBOR data item; validity checking of the decoded CBOR item is not required for tag validity (but could be offered by a generic decoder as a special option).")),(0,i.kt)("p",null,"\u6709\u65f6\u5728\u89e3\u7801\u5916\u90e8\u6570\u636e\u9879\u65f6\u4e0d\u7acb\u5373\u89e3\u7801\u5d4c\u5165\u5f0f CBOR \u6570\u636e\u9879\u662f\u6709\u76ca\u7684\u3002\u6807\u7b7e\u53f7 24\uff08CBOR \u6570\u636e\u9879\uff09\u53ef\u7528\u4e8e\u5c06\u5d4c\u5165\u5f0f\u5b57\u8282\u4e32\u6807\u8bb0\u4e3a\u4ee5 CBOR \u683c\u5f0f\u7f16\u7801\u7684\u5355\u4e2a\u6570\u636e\u9879\u3002\u4e0d\u662f\u5b57\u8282\u4e32\u7684\u5305\u542b\u9879\u662f\u65e0\u6548\u7684\u3002\u5305\u542b\u7684\u5b57\u8282\u4e32\u5728\u7f16\u7801\u683c\u5f0f\u826f\u597d\u7684 CBOR \u6570\u636e\u9879\u65f6\u662f\u6709\u6548\u7684\uff1b\u5bf9\u89e3\u7801\u7684 CBOR \u9879\u8fdb\u884c\u6709\u6548\u6027\u68c0\u67e5\u5bf9\u4e8e\u6807\u7b7e\u6709\u6548\u6027\u5e76\u975e\u5fc5\u9700\uff08\u4f46\u901a\u7528\u89e3\u7801\u5668\u53ef\u4ee5\u4f5c\u4e3a\u7279\u6b8a\u9009\u9879\u63d0\u4f9b\uff09\u3002"),(0,i.kt)("h5",{id:"3452-\u9884\u671f\u7684-cbor-\u5230-json-\u8f6c\u6362\u5668\u7684\u540e\u7eed\u7f16\u7801expected-later-encoding-for-cbor-to-json-converters"},"3.4.5.2. \u9884\u671f\u7684 CBOR \u5230 JSON \u8f6c\u6362\u5668\u7684\u540e\u7eed\u7f16\u7801\uff08Expected Later Encoding for CBOR-to-JSON Converters\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Tag numbers 21 to 23 indicate that a byte string might require a specific encoding when interoperating with a text-based representation. These tags are useful when an encoder knows that the byte string data it is writing is likely to be later converted to a particular JSON-based usage. That usage specifies that some strings are encoded as base64, base64url, and so on. The encoder uses byte strings instead of doing the encoding itself to reduce the message size, to reduce the code size of the encoder, or both. The encoder does not know whether or not the converter will be generic, and therefore wants to say what it believes is the proper way to convert binary strings to JSON."),(0,i.kt)("p",null,"The data item tagged can be a byte string or any other data item. In the latter case, the tag applies to all of the byte string data items contained in the data item, except for those contained in a nested data item tagged with an expected conversion."),(0,i.kt)("p",null,"These three tag numbers suggest conversions to three of the base data encodings defined in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),". Tag number 21 suggests conversion to base64url encoding (Section 5 of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),") where padding is not used (see Section 3.2 of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),'); that is, all trailing equals signs ("=") are removed from the encoded string. Tag number 22 suggests conversion to classical base64 encoding (Section 4 of ',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),") with padding as defined in RFC 4648. For both base64url and base64, padding bits are set to zero (see Section 3.5 of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),"), and the conversion to alternate encoding is performed on the contents of the byte string (that is, without adding any line breaks, whitespace, or other additional characters). Tag number 23 suggests conversion to base16 (hex) encoding with uppercase alphabetics (see Section 8 of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),"). Note that, for all three tag numbers, the encoding of the empty byte string is the empty text string.")),(0,i.kt)("p",null,"\u6807\u7b7e\u53f7 21 \u5230 23 \u8868\u793a\u5728\u4e0e\u57fa\u4e8e\u6587\u672c\u7684\u8868\u793a\u8fdb\u884c\u4e92\u64cd\u4f5c\u65f6\uff0c\u5b57\u8282\u4e32\u53ef\u80fd\u9700\u8981\u7279\u5b9a\u7684\u7f16\u7801\u3002\u5728\u7f16\u7801\u5668\u77e5\u9053\u5b83\u6b63\u5728\u7f16\u5199\u7684\u5b57\u8282\u4e32\u6570\u636e\u53ef\u80fd\u4f1a\u5728\u540e\u7eed\u8f6c\u6362\u4e3a\u7279\u5b9a\u57fa\u4e8e JSON \u7684\u7528\u6cd5\u65f6\uff0c\u8fd9\u4e9b\u6807\u7b7e\u5f88\u6709\u7528\u3002\u8be5\u7528\u6cd5\u89c4\u5b9a\u4e00\u4e9b\u5b57\u7b26\u4e32\u4ee5 base64\u3001base64url \u7b49\u8fdb\u884c\u7f16\u7801\u3002\u7f16\u7801\u5668\u4f7f\u7528\u5b57\u8282\u4e32\u800c\u4e0d\u662f\u81ea\u5df1\u8fdb\u884c\u7f16\u7801\uff0c\u4ee5\u51cf\u5c0f\u6d88\u606f\u5927\u5c0f\u3001\u51cf\u5c0f\u7f16\u7801\u5668\u7684\u4ee3\u7801\u5927\u5c0f\u6216\u4e24\u8005\u517c\u800c\u6709\u4e4b\u3002\u7f16\u7801\u5668\u4e0d\u77e5\u9053\u8f6c\u6362\u5668\u662f\u5426\u662f\u901a\u7528\u7684\uff0c\u56e0\u6b64\u60f3\u8981\u8bf4\u660e\u5c06\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a JSON \u7684\u6b63\u786e\u65b9\u6cd5\u3002"),(0,i.kt)("p",null,"\u88ab\u6807\u8bb0\u7684\u6570\u636e\u9879\u53ef\u4ee5\u662f\u5b57\u8282\u4e32\u6216\u4efb\u4f55\u5176\u4ed6\u6570\u636e\u9879\u3002\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6807\u7b7e\u9002\u7528\u4e8e\u5305\u542b\u5728\u6570\u636e\u9879\u4e2d\u7684\u6240\u6709\u5b57\u8282\u4e32\u6570\u636e\u9879\uff0c\u9664\u4e86\u90a3\u4e9b\u5305\u542b\u5728\u5e26\u6709\u9884\u671f\u8f6c\u6362\u7684\u5d4c\u5957\u6570\u636e\u9879\u4e2d\u7684\u6570\u636e\u9879\u3002"),(0,i.kt)("p",null,"\u8fd9\u4e09\u4e2a\u6807\u7b7e\u53f7\u5206\u522b\u5efa\u8bae\u8f6c\u6362\u4e3a ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u4e2d\u5b9a\u4e49\u7684\u4e09\u4e2a\u57fa\u672c\u6570\u636e\u7f16\u7801\u3002\u6807\u7b7e\u53f7 21 \u5efa\u8bae\u8f6c\u6362\u4e3a\u4e0d\u4f7f\u7528\u586b\u5145\u7684 base64url \u7f16\u7801\uff08",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u7b2c 5 \u8282\uff09\uff08\u53c2\u89c1 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),' \u7b2c 3.2 \u8282\uff09\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u6240\u6709\u5c3e\u968f\u7684\u7b49\u53f7\uff08"="\uff09\u3002\u6807\u7b7e\u53f7 22 \u5efa\u8bae\u8f6c\u6362\u4e3a\u5177\u6709 RFC 4648 \u4e2d\u5b9a\u4e49\u7684\u586b\u5145\u7684\u7ecf\u5178 base64 \u7f16\u7801\uff08',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u7b2c 4 \u8282\uff09\u3002\u5bf9\u4e8e base64url \u548c base64\uff0c\u586b\u5145\u4f4d\u8bbe\u7f6e\u4e3a\u96f6\uff08\u53c2\u89c1 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u7b2c 3.5 \u8282\uff09\uff0c\u5e76\u5728\u5b57\u8282\u4e32\u7684\u5185\u5bb9\u4e0a\u6267\u884c\u66ff\u4ee3\u7f16\u7801\uff08\u5373\uff0c\u4e0d\u6dfb\u52a0\u4efb\u4f55\u6362\u884c\u7b26\u3001\u7a7a\u683c\u6216\u5176\u4ed6\u9644\u52a0\u5b57\u7b26\uff09\u3002\u6807\u7b7e\u53f7 23 \u5efa\u8bae\u8f6c\u6362\u4e3a\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u7684 base16\uff08\u5341\u516d\u8fdb\u5236\uff09\u7f16\u7801\uff08\u53c2\u89c1 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u7b2c 8 \u8282\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u6240\u6709\u4e09\u4e2a\u6807\u7b7e\u53f7\uff0c\u7a7a\u5b57\u8282\u4e32\u7684\u7f16\u7801\u662f\u7a7a\u6587\u672c\u4e32\u3002"),(0,i.kt)("h5",{id:"3453-\u7f16\u7801\u6587\u672cencoded-text"},"3.4.5.3. \u7f16\u7801\u6587\u672c\uff08Encoded Text\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Some text strings hold data that have formats widely used on the Internet, and sometimes those formats can be validated and presented to the application in appropriate form by the decoder. There are tags for some of these formats."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Tag number 32 is for URIs, as defined in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3986"},"RFC3986"),". If the text string doesn't match the URI-reference production, the string is invalid.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Tag numbers 33 and 34 are for base64url- and base64-encoded text strings, respectively, as defined in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),". If any of the following apply:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the encoded text string contains non-alphabet characters or only 1 alphabet character in the last block of 4 (where alphabet is defined by Section 5 of ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," for tag number 33 and Section 4 of ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," for tag number 34), or"),(0,i.kt)("li",{parentName:"ul"},"the padding bits in a 2- or 3-character block are not 0, or"),(0,i.kt)("li",{parentName:"ul"},"the base64 encoding has the wrong number of padding characters, or"),(0,i.kt)("li",{parentName:"ul"},"the base64url encoding has padding characters,")),(0,i.kt)("p",{parentName:"li"},"the string is invalid.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Tag number 36 is for MIME messages (including all headers), as defined in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc2045"},"RFC2045"),". A text string that isn't a valid MIME message is invalid. (For this tag, validity checking may be particularly onerous for a generic decoder and might therefore not be offered. Note that many MIME messages are general binary data and therefore cannot be represented in a text string; ",(0,i.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/cbor-tags"},"IANA.cbor-tags")," lists a registration for tag number 257 that is similar to tag number 36 but uses a byte string as its tag content.)"))),(0,i.kt)("p",null,"Note that tag numbers 33 and 34 differ from 21 and 22 in that the data is transported in base-encoded form for the former and in raw byte string form for the latter."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," also defined a tag number 35 for regular expressions that are in Perl Compatible Regular Expressions (PCRE/PCRE2) form ",(0,i.kt)("a",{parentName:"p",href:"https://www.pcre.org/"},"PCRE")," or in JavaScript regular expression syntax ",(0,i.kt)("a",{parentName:"p",href:"https://www.ecma-international.org/publications/standards/Ecma-262.htm"},"ECMA262"),". The state of the art in these regular expression specifications has since advanced and is continually advancing, so this specification does not attempt to update the references. Instead, this tag remains available (as registered in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),") for applications that specify the particular regular expression variant they use out-of-band (possibly by limiting the usage to a defined common subset of both PCRE and ECMA262). As this specification clarifies tag validity beyond ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),", we note that due to the open way the tag was defined in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),', any contained string value needs to be valid at the CBOR tag level (but then may not be "expected" at the application level).')),(0,i.kt)("p",null,"\u67d0\u4e9b\u6587\u672c\u4e32\u5305\u542b\u4e86\u5728\u4e92\u8054\u7f51\u4e0a\u5e7f\u6cdb\u4f7f\u7528\u7684\u683c\u5f0f\uff0c\u6709\u65f6\u89e3\u7801\u5668\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u683c\u5f0f\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5e76\u4ee5\u9002\u5f53\u7684\u5f62\u5f0f\u5448\u73b0\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u8fd9\u6837\u7684\u683c\u5f0f\u7684\u6807\u7b7e\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u6807\u7b7e\u53f7 32 \u7528\u4e8e ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3986"},"RFC3986")," \u4e2d\u5b9a\u4e49\u7684 URI\u3002\u5982\u679c\u6587\u672c\u4e32\u4e0e URI-reference \u751f\u6210\u7684\u5339\u914d\u4e0d\u7b26\uff0c\u5b57\u7b26\u4e32\u5219\u65e0\u6548\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u6807\u7b7e\u53f7 33 \u548c 34 \u5206\u522b\u7528\u4e8e ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u4e2d\u5b9a\u4e49\u7684 base64url \u7f16\u7801\u548c base64 \u7f16\u7801\u6587\u672c\u4e32\u3002\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u4efb\u4e00\u6761\u4ef6\uff1a"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u7f16\u7801\u7684\u6587\u672c\u4e32\u5305\u542b\u975e\u5b57\u6bcd\u8868\u5b57\u7b26\uff0c\u6216\u8005\u6700\u540e\u4e00\u4e2a 4 \u4e2a\u5b57\u7b26\u5757\u4e2d\u4ec5\u5305\u542b 1 \u4e2a\u5b57\u6bcd\u8868\u5b57\u7b26\uff08\u5176\u4e2d\u5b57\u6bcd\u8868\u7531 ",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u7b2c 5 \u8282\u5b9a\u4e49\u7528\u4e8e\u6807\u7b7e\u53f7 33\uff0c",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u7b2c 4 \u8282\u5b9a\u4e49\u7528\u4e8e\u6807\u7b7e\u53f7 34\uff09\uff0c\u6216"),(0,i.kt)("li",{parentName:"ul"},"2 \u6216 3 \u4e2a\u5b57\u7b26\u5757\u4e2d\u7684\u586b\u5145\u4f4d\u4e0d\u4e3a 0\uff0c\u6216"),(0,i.kt)("li",{parentName:"ul"},"base64 \u7f16\u7801\u5177\u6709\u9519\u8bef\u6570\u91cf\u7684\u586b\u5145\u5b57\u7b26\uff0c\u6216"),(0,i.kt)("li",{parentName:"ul"},"base64url \u7f16\u7801\u5177\u6709\u586b\u5145\u5b57\u7b26\uff0c")),(0,i.kt)("p",{parentName:"li"},"\u5b57\u7b26\u4e32\u5219\u65e0\u6548\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u6807\u7b7e\u53f7 36 \u7528\u4e8e ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc2045"},"RFC2045")," \u4e2d\u5b9a\u4e49\u7684 MIME \u6d88\u606f\uff08\u5305\u62ec\u6240\u6709\u5934\u90e8\uff09\u3002\u4e00\u4e2a\u65e0\u6548\u7684 MIME \u6d88\u606f\u6587\u672c\u4e32\u662f\u65e0\u6548\u7684\u3002\uff08\u5bf9\u4e8e\u8fd9\u4e2a\u6807\u7b7e\uff0c\u901a\u7528\u89e3\u7801\u5668\u7684\u6709\u6548\u6027\u68c0\u67e5\u53ef\u80fd\u7279\u522b\u7e41\u7410\uff0c\u56e0\u6b64\u53ef\u80fd\u4e0d\u63d0\u4f9b\u3002\u8bf7\u6ce8\u610f\uff0c\u8bb8\u591a MIME \u6d88\u606f\u662f\u901a\u7528\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728\u6587\u672c\u4e32\u4e2d\u8868\u793a\uff1b",(0,i.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/cbor-tags"},"IANA.cbor-tags")," \u5217\u51fa\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u6807\u7b7e\u53f7 36 \u7684\u6807\u7b7e\u53f7 257 \u6ce8\u518c\uff0c\u4f46\u4f7f\u7528\u5b57\u8282\u4e32\u4f5c\u4e3a\u5176\u6807\u7b7e\u5185\u5bb9\u3002\uff09"))),(0,i.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u6807\u7b7e\u53f7 33 \u548c 34 \u4e0e 21 \u548c 22 \u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u524d\u8005\u7684\u6570\u636e\u4ee5\u57fa\u672c\u7f16\u7801\u5f62\u5f0f\u4f20\u8f93\uff0c\u540e\u8005\u4ee5\u539f\u59cb\u5b57\u8282\u4e32\u5f62\u5f0f\u4f20\u8f93\u3002"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u8fd8\u4e3a Perl \u517c\u5bb9\u6b63\u5219\u8868\u8fbe\u5f0f\uff08PCRE/PCRE2\uff09\u683c\u5f0f ",(0,i.kt)("a",{parentName:"p",href:"https://www.pcre.org/"},"PCRE")," \u6216 JavaScript \u6b63\u5219\u8868\u8fbe\u5f0f\u8bed\u6cd5 ",(0,i.kt)("a",{parentName:"p",href:"https://www.ecma-international.org/publications/standards/Ecma-262.htm"},"ECMA262")," \u4e2d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9a\u4e49\u4e86\u6807\u7b7e\u53f7 35\u3002\u8fd9\u4e9b\u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u8303\u7684\u6280\u672f\u6c34\u5e73\u81ea\u6b64\u5df2\u7ecf\u63d0\u9ad8\uff0c\u5e76\u4e14\u8fd8\u5728\u4e0d\u65ad\u63d0\u9ad8\uff0c\u56e0\u6b64\u672c\u89c4\u8303\u4e0d\u8bd5\u56fe\u66f4\u65b0\u8fd9\u4e9b\u5f15\u7528\u3002\u76f8\u53cd\uff0c\u8fd9\u4e2a\u6807\u7b7e\u4ecd\u7136\u53ef\u7528\uff08\u5982 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u4e2d\u6ce8\u518c\u7684\u90a3\u6837\uff09\uff0c\u7528\u4e8e\u6307\u5b9a\u5b83\u4eec\u5728\u5916\u5e26\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u7279\u5b9a\u6b63\u5219\u8868\u8fbe\u5f0f\u53d8\u4f53\uff08\u53ef\u80fd\u901a\u8fc7\u5c06\u4f7f\u7528\u9650\u5236\u4e3a PCRE \u548c ECMA262 \u7684\u5b9a\u4e49\u7684\u516c\u5171\u5b50\u96c6\uff09\u3002\u7531\u4e8e\u672c\u89c4\u8303\u660e\u786e\u4e86 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u4e4b\u5916\u7684\u6807\u7b7e\u6709\u6548\u6027\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u7531\u4e8e ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u4e2d\u6807\u7b7e\u5b9a\u4e49\u7684\u5f00\u653e\u65b9\u5f0f\uff0c\u4efb\u4f55\u5305\u542b\u7684\u5b57\u7b26\u4e32\u503c\u90fd\u9700\u8981\u5728 CBOR \u6807\u7b7e\u7ea7\u522b\u6709\u6548\uff08\u4f46\u5728\u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b\u4e0a\u53ef\u80fd\u662f\u975e\u201c\u9884\u671f\u201d\u7684\uff09\u3002"),(0,i.kt)("h4",{id:"346-\u81ea\u63cf\u8ff0-cborself-described-cbor"},"3.4.6. \u81ea\u63cf\u8ff0 CBOR\uff08Self-Described CBOR\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"In many applications, it will be clear from the context that CBOR is being employed for encoding a data item. For instance, a specific protocol might specify the use of CBOR, or a media type is indicated that specifies its use. However, there may be applications where such context information is not available, such as when CBOR data is stored in a file that does not have disambiguating metadata. Here, it may help to have some distinguishing characteristics for the data itself."),(0,i.kt)("p",null,"Tag number 55799 is defined for this purpose, specifically for use at the start of a stored encoded CBOR data item as specified by an application. It does not impart any special semantics on the data item that it encloses; that is, the semantics of the tag content enclosed in tag number 55799 is exactly identical to the semantics of the tag content itself."),(0,i.kt)("p",null,"The serialization of this tag's head is 0xd9d9f7, which does not appear to be in use as a distinguishing mark for any frequently used file types. In particular, 0xd9d9f7 is not a valid start of a Unicode text in any Unicode encoding if it is followed by a valid CBOR data item."),(0,i.kt)("p",null,"For instance, a decoder might be able to decode both CBOR and JSON. Such a decoder would need to mechanically distinguish the two formats. An easy way for an encoder to help the decoder would be to tag the entire CBOR item with tag number 55799, the serialization of which will never be found at the beginning of a JSON text.")),(0,i.kt)("p",null,"\u5728\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4ece\u4e0a\u4e0b\u6587\u4e2d\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u51fa CBOR \u6b63\u5728\u7528\u4e8e\u7f16\u7801\u6570\u636e\u9879\u3002\u4f8b\u5982\uff0c\u7279\u5b9a\u7684\u534f\u8bae\u53ef\u80fd\u4f1a\u6307\u5b9a\u4f7f\u7528 CBOR\uff0c\u6216\u8005\u6307\u5b9a\u4e86\u4f7f\u7528 CBOR \u7684\u5a92\u4f53\u7c7b\u578b\u3002\u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u6ca1\u6709\u8fd9\u6837\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u6bd4\u5982\u5f53 CBOR \u6570\u636e\u5b58\u50a8\u5728\u6ca1\u6709\u6d88\u9664\u6b67\u4e49\u5143\u6570\u636e\u7684\u6587\u4ef6\u4e2d\u3002\u5728\u8fd9\u91cc\uff0c\u6570\u636e\u672c\u8eab\u5177\u6709\u4e00\u4e9b\u533a\u5206\u7279\u5f81\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002"),(0,i.kt)("p",null,"\u6807\u7b7e\u53f7 55799 \u4e3a\u6b64\u76ee\u7684\u800c\u5b9a\u4e49\uff0c\u7279\u522b\u662f\u7528\u4e8e\u5b58\u50a8\u7f16\u7801\u7684 CBOR \u6570\u636e\u9879\u5f00\u59cb\u5904\uff0c\u5982\u5e94\u7528\u7a0b\u5e8f\u6240\u6307\u5b9a\u3002\u5b83\u5bf9\u6240\u5c01\u88c5\u7684\u6570\u636e\u9879\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u8bed\u4e49\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u6807\u7b7e\u53f7 55799 \u4e2d\u5c01\u88c5\u7684\u6807\u7b7e\u5185\u5bb9\u7684\u8bed\u4e49\u4e0e\u6807\u7b7e\u5185\u5bb9\u672c\u8eab\u7684\u8bed\u4e49\u5b8c\u5168\u76f8\u540c\u3002"),(0,i.kt)("p",null,"\u8be5\u6807\u7b7e\u5934\u7684\u5e8f\u5217\u5316\u662f 0xd9d9f7\uff0c\u5b83\u4f3c\u4e4e\u6ca1\u6709\u88ab\u7528\u4f5c\u4efb\u4f55\u5e38\u7528\u6587\u4ef6\u7c7b\u578b\u7684\u533a\u5206\u6807\u8bb0\u3002\u7279\u522b\u662f\uff0c\u5982\u679c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u6709\u6548\u7684 CBOR \u6570\u636e\u9879\uff0c0xd9d9f7 \u4e0d\u662f\u4efb\u4f55 Unicode \u7f16\u7801\u4e2d\u6709\u6548\u7684 Unicode \u6587\u672c\u7684\u8d77\u59cb\u3002"),(0,i.kt)("p",null,"\u4f8b\u5982\uff0c\u89e3\u7801\u5668\u53ef\u80fd\u80fd\u591f\u540c\u65f6\u89e3\u7801 CBOR \u548c JSON\u3002\u8fd9\u6837\u7684\u89e3\u7801\u5668\u9700\u8981\u5728\u673a\u68b0\u4e0a\u533a\u5206\u8fd9\u4e24\u79cd\u683c\u5f0f\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\uff0c\u7f16\u7801\u5668\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6807\u7b7e\u53f7 55799 \u5bf9\u6574\u4e2a CBOR \u9879\u8fdb\u884c\u6807\u8bb0\u6765\u5e2e\u52a9\u89e3\u7801\u5668\uff0c\u800c\u8fd9\u4e2a\u5e8f\u5217\u5316\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u5728 JSON \u6587\u672c\u7684\u5f00\u5934\u3002"),(0,i.kt)("h2",{id:"4-\u5e8f\u5217\u5316\u6ce8\u610f\u4e8b\u9879serialization-considerations"},"4. \u5e8f\u5217\u5316\u6ce8\u610f\u4e8b\u9879\uff08Serialization Considerations\uff09"),(0,i.kt)("h3",{id:"41-\u9996\u9009\u5e8f\u5217\u5316preferred-serialization"},"4.1. \u9996\u9009\u5e8f\u5217\u5316\uff08Preferred Serialization\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"For some values at the data model level, CBOR provides multiple serializations. For many applications, it is desirable that an encoder always chooses a preferred serialization (preferred encoding); however, the present specification does not put the burden of enforcing this preference on either the encoder or decoder."),(0,i.kt)("p",null,'Some constrained decoders may be limited in their ability to decode non-preferred serializations: for example, if only integers below 1_000_000_000 (one billion) are expected in an application, the decoder may leave out the code that would be needed to decode 64-bit arguments in integers. An encoder that always uses preferred serialization ("preferred encoder") interoperates with this decoder for the numbers that can occur in this application. Generally speaking, a preferred encoder is more universally interoperable (and also less wasteful) than one that, say, always uses 64-bit integers.'),(0,i.kt)("p",null,'Similarly, a constrained encoder may be limited in the variety of representation variants it supports such that it does not emit preferred serializations ("variant encoder"). For instance, a constrained encoder could be designed to always use the 32-bit variant for an integer that it encodes even if a short representation is available (assuming that there is no application need for integers that can only be represented with the 64-bit variant). A decoder that does not rely on receiving only preferred serializations ("variation-tolerant decoder") can therefore be said to be more universally interoperable (it might very well optimize for the case of receiving preferred serializations, though). Full implementations of CBOR decoders are by definition variation tolerant; the distinction is only relevant if a constrained implementation of a CBOR decoder meets a variant encoder.'),(0,i.kt)("p",null,"The preferred serialization always uses the shortest form of representing the argument (Section 3); it also uses the shortest floating-point encoding that preserves the value being encoded."),(0,i.kt)("p",null,"The preferred serialization for a floating-point value is the shortest floating-point encoding that preserves its value, e.g., 0xf94580 for the number 5.5, and 0xfa45ad9c00 for the number 5555.5. For NaN values, a shorter encoding is preferred if zero-padding the shorter significand towards the right reconstitutes the original NaN value (for many applications, the single NaN encoding 0xf97e00 will suffice)."),(0,i.kt)("p",null,"Definite-length encoding is preferred whenever the length is known at the time the serialization of the item starts.")),(0,i.kt)("p",null,"\u5bf9\u4e8e\u6570\u636e\u6a21\u578b\u7ea7\u522b\u7684\u67d0\u4e9b\u503c\uff0cCBOR \u63d0\u4f9b\u4e86\u591a\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\u3002\u5bf9\u4e8e\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u7f16\u7801\u5668\u603b\u662f\u9009\u62e9\u9996\u9009\u5e8f\u5217\u5316\uff08\u9996\u9009\u7f16\u7801\uff09\u662f\u53ef\u53d6\u7684\uff1b\u7136\u800c\uff0c\u672c\u89c4\u8303\u4e0d\u8981\u6c42\u7f16\u7801\u5668\u6216\u89e3\u7801\u5668\u5f3a\u5236\u6267\u884c\u6b64\u9996\u9009\u9879\u3002"),(0,i.kt)("p",null,"\u4e00\u4e9b\u53d7\u9650\u5236\u7684\u89e3\u7801\u5668\u5728\u89e3\u7801\u975e\u9996\u9009\u5e8f\u5217\u5316\u65b9\u9762\u53ef\u80fd\u53d7\u5230\u9650\u5236\uff1a\u4f8b\u5982\uff0c\u5982\u679c\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53ea\u671f\u671b\u51fa\u73b0\u4f4e\u4e8e 10 \u4ebf\u7684\u6574\u6570\uff0c\u5219\u89e3\u7801\u5668\u53ef\u80fd\u4f1a\u7701\u7565\u89e3\u7801\u6574\u6570\u4e2d 64 \u4f4d\u53c2\u6570\u6240\u9700\u7684\u4ee3\u7801\u3002\u5bf9\u4e8e\u5728\u6b64\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u5b57\uff0c\u59cb\u7ec8\u4f7f\u7528\u9996\u9009\u5e8f\u5217\u5316\u7684\u7f16\u7801\u5668\uff08\u201c\u9996\u9009\u7f16\u7801\u5668\u201d\uff09\u4e0e\u6b64\u89e3\u7801\u5668\u8fdb\u884c\u4e92\u64cd\u4f5c\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u9996\u9009\u7f16\u7801\u5668\u6bd4\u603b\u662f\u4f7f\u7528 64 \u4f4d\u6574\u6570\u7684\u7f16\u7801\u5668\u66f4\u5177\u901a\u7528\u4e92\u64cd\u4f5c\u6027\uff08\u540c\u65f6\u4e5f\u66f4\u8282\u7701\u8d44\u6e90\uff09\u3002"),(0,i.kt)("p",null,"\u7c7b\u4f3c\u5730\uff0c\u53d7\u9650\u5236\u7684\u7f16\u7801\u5668\u53ef\u80fd\u5728\u5176\u652f\u6301\u7684\u8868\u793a\u53d8\u4f53\u79cd\u7c7b\u4e0a\u53d7\u5230\u9650\u5236\uff0c\u4ee5\u81f3\u4e8e\u5b83\u4e0d\u53d1\u51fa\u9996\u9009\u5e8f\u5217\u5316\uff08\u201c\u53d8\u4f53\u7f16\u7801\u5668\u201d\uff09\u3002\u4f8b\u5982\uff0c\u53d7\u9650\u7f16\u7801\u5668\u53ef\u4ee5\u8bbe\u8ba1\u4e3a\u59cb\u7ec8\u5bf9\u5176\u7f16\u7801\u7684\u6574\u6570\u4f7f\u7528 32 \u4f4d\u53d8\u4f53\uff0c\u5373\u4f7f\u6709\u77ed\u8868\u793a\u53ef\u7528\uff08\u5047\u8bbe\u6ca1\u6709\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u6574\u6570\uff0c\u8fd9\u4e9b\u6574\u6570\u53ea\u80fd\u7528 64 \u4f4d\u53d8\u4f53\u8868\u793a\uff09\u3002\u4e00\u4e2a\u4e0d\u4f9d\u8d56\u4e8e\u53ea\u63a5\u6536\u9996\u9009\u5e8f\u5217\u5316\u7684\u89e3\u7801\u5668\uff08\u201c\u5bb9\u5fcd\u53d8\u5316\u7684\u89e3\u7801\u5668\u201d\uff09\u53ef\u4ee5\u8bf4\u5177\u6709\u66f4\u666e\u904d\u7684\u4e92\u64cd\u4f5c\u6027\uff08\u5c3d\u7ba1\u5b83\u5f88\u53ef\u80fd\u4f1a\u4f18\u5316\u63a5\u6536\u9996\u9009\u5e8f\u5217\u5316\u7684\u60c5\u51b5\uff09\u3002CBOR \u89e3\u7801\u5668\u7684\u5b8c\u6574\u5b9e\u73b0\u5728\u5b9a\u4e49\u4e0a\u662f\u5bb9\u5fcd\u53d8\u5316\u7684\uff1b\u53ea\u6709\u5728\u53d7\u9650\u5236\u7684 CBOR \u89e3\u7801\u5668\u5b9e\u73b0\u9047\u5230\u53d8\u4f53\u7f16\u7801\u5668\u65f6\uff0c\u8fd9\u79cd\u533a\u522b\u624d\u5177\u6709\u610f\u4e49\u3002"),(0,i.kt)("p",null,"\u9996\u9009\u5e8f\u5217\u5316\u59cb\u7ec8\u4f7f\u7528\u8868\u793a\u53c2\u6570\u7684\u6700\u77ed\u5f62\u5f0f\uff08\u7b2c 3 \u8282\uff09\uff1b\u5b83\u8fd8\u4f7f\u7528\u4fdd\u7559\u6b63\u5728\u7f16\u7801\u7684\u503c\u7684\u6700\u77ed\u6d6e\u70b9\u6570\u7f16\u7801\u3002"),(0,i.kt)("p",null,"\u6d6e\u70b9\u503c\u7684\u9996\u9009\u5e8f\u5217\u5316\u662f\u4fdd\u7559\u5176\u503c\u7684\u6700\u77ed\u6d6e\u70b9\u6570\u7f16\u7801\uff0c\u4f8b\u5982\uff0c\u6570\u5b57 5.5 \u7684 0xf94580\uff0c\u4ee5\u53ca\u6570\u5b57 5555.5 \u7684 0xfa45ad9c00\u3002\u5bf9\u4e8e NaN \u503c\uff0c\u5982\u679c\u5c06\u8f83\u77ed\u6709\u6548\u6570\u5411\u53f3\u586b\u5145\u96f6\u53ef\u4ee5\u91cd\u5efa\u539f\u59cb NaN \u503c\uff0c\u5219\u9996\u9009\u8f83\u77ed\u7f16\u7801\uff08\u5bf9\u4e8e\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5355\u4e2a NaN \u7f16\u7801 0xf97e00 \u5c31\u8db3\u591f\u4e86\uff09\u3002"),(0,i.kt)("p",null,"\u5f53\u5728\u9879\u7684\u5e8f\u5217\u5316\u5f00\u59cb\u65f6\u5df2\u77e5\u957f\u5ea6\u65f6\uff0c\u9996\u9009\u660e\u786e\u957f\u5ea6\u7f16\u7801\u3002"),(0,i.kt)("h3",{id:"42-\u786e\u5b9a\u6027\u7f16\u7801\u7684-cbordeterministically-encoded-cbor"},"4.2. \u786e\u5b9a\u6027\u7f16\u7801\u7684 CBOR\uff08Deterministically Encoded CBOR\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'Some protocols may want encoders to only emit CBOR in a particular deterministic format; those protocols might also have the decoders check that their input is in that deterministic format. Those protocols are free to define what they mean by a "deterministic format" and what encoders and decoders are expected to do. This section defines a set of restrictions that can serve as the base of such a deterministic format.')),(0,i.kt)("p",null,"\u4e00\u4e9b\u534f\u8bae\u53ef\u80fd\u5e0c\u671b\u7f16\u7801\u5668\u4ec5\u4ee5\u7279\u5b9a\u786e\u5b9a\u6027\u683c\u5f0f\u53d1\u51fa CBOR\uff1b\u8fd9\u4e9b\u534f\u8bae\u53ef\u80fd\u8fd8\u5e0c\u671b\u89e3\u7801\u5668\u68c0\u67e5\u5176\u8f93\u5165\u662f\u5426\u5177\u6709\u8be5\u786e\u5b9a\u6027\u683c\u5f0f\u3002\u8fd9\u4e9b\u534f\u8bae\u53ef\u4ee5\u81ea\u7531\u5b9a\u4e49\u5b83\u4eec\u6240\u8bf4\u7684\u201c\u786e\u5b9a\u6027\u683c\u5f0f\u201d\u4ee5\u53ca\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u9884\u671f\u8981\u505a\u4ec0\u4e48\u3002\u672c\u8282\u5b9a\u4e49\u4e86\u4e00\u7ec4\u9650\u5236\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u8fd9\u79cd\u786e\u5b9a\u6027\u683c\u5f0f\u7684\u57fa\u7840\u3002"),(0,i.kt)("h4",{id:"421-\u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42core-deterministic-encoding-requirements"},"4.2.1. \u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\uff08Core Deterministic Encoding Requirements\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'A CBOR encoding satisfies the "core deterministic encoding requirements" if it satisfies the following restrictions:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Preferred serialization MUST be used. In particular, this means that arguments (see Section 3) for integers, lengths in major types 2 through 5, and tags MUST be as short as possible, for instance:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"0 to 23 and -1 to -24 MUST be expressed in the same byte as the major type;"),(0,i.kt)("li",{parentName:"ul"},"24 to 255 and -25 to -256 MUST be expressed only with an additional uint8_t;"),(0,i.kt)("li",{parentName:"ul"},"256 to 65535 and -257 to -65536 MUST be expressed only with an additional uint16_t;"),(0,i.kt)("li",{parentName:"ul"},"65536 to 4294967295 and -65537 to -4294967296 MUST be expressed only with an additional uint32_t.")),(0,i.kt)("p",{parentName:"li"},"Floating-point values also MUST use the shortest form that preserves the value, e.g., 1.5 is encoded as 0xf93e00 (binary16) and 1000000.5 as 0xfa49742408 (binary32). (One implementation of this is to have all floats start as a 64-bit float, then do a test conversion to a 32-bit float; if the result is the same numeric value, use the shorter form and repeat the process with a test conversion to a 16-bit float. This also works to select 16-bit float for positive and negative Infinity as well.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Indefinite-length items MUST NOT appear. They can be encoded as definite-length items instead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The keys in every map MUST be sorted in the bytewise lexicographic order of their deterministic encodings. For example, the following keys are sorted correctly:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'1. 10, encoded as 0x0a.\n2. 100, encoded as 0x1864.\n3. -1, encoded as 0x20.\n4. "z", encoded as 0x617a.\n5. "aa", encoded as 0x626161.\n6. [100], encoded as 0x811864.\n7. [-1], encoded as 0x8120.\n8. false, encoded as 0xf4.\n')))),(0,i.kt)("p",null,"Implementation note: the self-delimiting nature of the CBOR encoding means that there are no two well-formed CBOR encoded data items where one is a prefix of the other. The bytewise lexicographic comparison of deterministic encodings of different map keys therefore always ends in a position where the byte differs between the keys, before the end of a key is reached.")),(0,i.kt)("p",null,"\u5982\u679c CBOR \u7f16\u7801\u6ee1\u8db3\u4ee5\u4e0b\u9650\u5236\uff0c\u5b83\u5c31\u6ee1\u8db3\u201c\u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\u201d\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5fc5\u987b\uff08MUST\uff09\u4f7f\u7528\u9996\u9009\u5e8f\u5217\u5316\u3002\u7279\u522b\u662f\uff0c\u8fd9\u610f\u5473\u7740\u6574\u6570\u3001\u4e3b\u7c7b\u578b 2 \u5230 5 \u7684\u957f\u5ea6\u4ee5\u53ca\u6807\u7b7e\u7684\u53c2\u6570\uff08\u53c2\u89c1\u7b2c 3 \u8282\uff09\u5fc5\u987b\uff08MUST\uff09\u5c3d\u53ef\u80fd\u77ed\uff0c\u4f8b\u5982\uff1a"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"0 \u5230 23 \u548c -1 \u5230 -24 \u5fc5\u987b\uff08MUST\uff09\u5728\u4e0e\u4e3b\u7c7b\u578b\u76f8\u540c\u7684\u5b57\u8282\u4e2d\u8868\u793a\uff1b"),(0,i.kt)("li",{parentName:"ul"},"24 \u5230 255 \u548c -25 \u5230 -256 \u5fc5\u987b\uff08MUST\uff09\u4ec5\u7528\u989d\u5916\u7684 uint8_t \u8868\u793a\uff1b"),(0,i.kt)("li",{parentName:"ul"},"256 \u5230 65535 \u548c -257 \u5230 -65536 \u5fc5\u987b\uff08MUST\uff09\u4ec5\u7528\u989d\u5916\u7684 uint16_t \u8868\u793a\uff1b"),(0,i.kt)("li",{parentName:"ul"},"65536 \u5230 4294967295 \u548c -65537 \u5230 -4294967296 \u5fc5\u987b\uff08MUST\uff09\u4ec5\u7528\u989d\u5916\u7684 uint32_t \u8868\u793a\u3002")),(0,i.kt)("p",{parentName:"li"},"\u6d6e\u70b9\u503c\u8fd8\u5fc5\u987b\uff08MUST\uff09\u4f7f\u7528\u4fdd\u7559\u503c\u7684\u6700\u77ed\u5f62\u5f0f\uff0c\u4f8b\u5982\uff0c1.5 \u7f16\u7801\u4e3a 0xf93e00\uff08binary16\uff09\u548c 1000000.5 \u7f16\u7801\u4e3a 0xfa49742408\uff08binary32\uff09\u3002\uff08\u5b9e\u73b0\u8fd9\u4e00\u70b9\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u6240\u6709\u6d6e\u70b9\u6570\u4f5c\u4e3a 64 \u4f4d\u6d6e\u70b9\u6570\u5f00\u59cb\uff0c\u7136\u540e\u5c06\u5176\u6d4b\u8bd5\u8f6c\u6362\u4e3a 32 \u4f4d\u6d6e\u70b9\u6570\uff1b\u5982\u679c\u7ed3\u679c\u662f\u76f8\u540c\u7684\u6570\u503c\uff0c\u5219\u4f7f\u7528\u8f83\u77ed\u7684\u5f62\u5f0f\u5e76\u5c06\u8fc7\u7a0b\u91cd\u590d\u4e3a 16 \u4f4d\u6d6e\u70b9\u6570\u7684\u6d4b\u8bd5\u8f6c\u6362\u3002\u8fd9\u5bf9\u4e8e\u9009\u62e9\u6b63\u65e0\u7a77\u5927\u548c\u8d1f\u65e0\u7a77\u5927\u7684 16 \u4f4d\u6d6e\u70b9\u6570\u4e5f\u662f\u6709\u6548\u7684\u3002\uff09")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4e0d\u5f97\uff08MUST NOT\uff09\u51fa\u73b0\u4e0d\u5b9a\u957f\u5ea6\u9879\u3002\u5b83\u4eec\u53ef\u4ee5\u7f16\u7801\u4e3a\u5b9a\u957f\u9879\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u6bcf\u4e2a\u6620\u5c04\u4e2d\u7684\u952e\u5fc5\u987b\uff08MUST\uff09\u6309\u7167\u5176\u786e\u5b9a\u6027\u7f16\u7801\u7684\u9010\u5b57\u8282\u5b57\u5178\u987a\u5e8f\uff08bytewise lexicographic order\uff09\u6392\u5e8f\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u952e\u6b63\u786e\u6392\u5e8f\uff1a"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'1. 10\uff0c\u7f16\u7801\u4e3a 0x0a\n2. 100\uff0c\u7f16\u7801\u4e3a 0x1864\n3. -1\uff0c\u7f16\u7801\u4e3a 0x20\n4. "z"\uff0c\u7f16\u7801\u4e3a 0x617a\n5. "aa"\uff0c\u7f16\u7801\u4e3a 0x626161\n6. [100]\uff0c\u7f16\u7801\u4e3a 0x811864\n7. [-1]\uff0c\u7f16\u7801\u4e3a 0x8120\n8. false\uff0c\u7f16\u7801\u4e3a 0xf4\n')))),(0,i.kt)("p",null,"\u5b9e\u73b0\u6ce8\u610f\u4e8b\u9879\uff1aCBOR \u7f16\u7801\u7684\u81ea\u5b9a\u754c\u6027\u8d28\u610f\u5473\u7740\u6ca1\u6709\u4e24\u4e2a\u683c\u5f0f\u6b63\u786e\u7684 CBOR \u7f16\u7801\u6570\u636e\u9879\uff0c\u5176\u4e2d\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u524d\u7f00\u3002\u56e0\u6b64\uff0c\u5728\u4e0d\u540c\u6620\u5c04\u952e\u7684\u786e\u5b9a\u6027\u7f16\u7801\u7684\u9010\u5b57\u8282\u5b57\u5178\u987a\u5e8f\u6bd4\u8f83\u603b\u662f\u5728\u952e\u4e4b\u95f4\u7684\u5b57\u8282\u4e0d\u540c\u7684\u4f4d\u7f6e\u7ed3\u675f\uff0c\u7136\u540e\u5230\u8fbe\u952e\u7684\u672b\u5c3e\u3002"),(0,i.kt)("h4",{id:"422-\u5176\u4ed6\u786e\u5b9a\u6027\u7f16\u7801\u6ce8\u610f\u4e8b\u9879additional-deterministic-encoding-considerations"},"4.2.2. \u5176\u4ed6\u786e\u5b9a\u6027\u7f16\u7801\u6ce8\u610f\u4e8b\u9879\uff08Additional Deterministic Encoding Considerations\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'CBOR tags present additional considerations for deterministic encoding. If a CBOR-based protocol were to provide the same semantics for the presence and absence of a specific tag (e.g., by allowing both tag 1 data items and raw numbers in a date/time position, treating the latter as if they were tagged), the deterministic format would not allow the presence of the tag, based on the "shortest form" principle. For example, a protocol might give encoders the choice of representing a URL as either a text string or, using Section 3.4.5.3, tag number 32 containing a text string. This protocol\'s deterministic encoding needs either to require that the tag is present or to require that it is absent, not allow either one.'),(0,i.kt)("p",null,"In a protocol that does require tags in certain places to obtain specific semantics, the tag needs to appear in the deterministic format as well. Deterministic encoding considerations also apply to the content of tags."),(0,i.kt)("p",null,"If a protocol includes a field that can express integers with an absolute value of 264 or larger using tag numbers 2 or 3 (Section 3.4.3), the protocol's deterministic encoding needs to specify whether smaller integers are also expressed using these tags or using major types 0 and 1. Preferred serialization uses the latter choice, which is therefore recommended."),(0,i.kt)("p",null,"Protocols that include floating-point values, whether represented using basic floating-point values (Section 3.3) or using tags (or both), may need to define extra requirements on their deterministic encodings, such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Although IEEE floating-point values can represent both positive and negative zero as distinct values, the application might not distinguish these and might decide to represent all zero values with a positive sign, disallowing negative zero. (The application may also want to restrict the precision of floating-point values in such a way that there is never a need to represent 64-bit -- or even 32-bit -- floating-point values.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If a protocol includes a field that can express floating-point values, with a specific data model that declares integer and floating-point values to be interchangeable, the protocol's deterministic encoding needs to specify whether, for example, the integer 1.0 is encoded as 0x01 (unsigned integer), 0xf93c00 (binary16), 0xfa3f800000 (binary32), or 0xfb3ff0000000000000 (binary64). Example rules for this are:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Encode integral values that fit in 64 bits as values from major types 0 and 1, and other values as the preferred (smallest of 16-, 32-, or 64-bit) floating-point representation that accurately represents the value,"),(0,i.kt)("li",{parentName:"ol"},"Encode all values as the preferred floating-point representation that accurately represents the value, even for integral values, or"),(0,i.kt)("li",{parentName:"ol"},"Encode all values as 64-bit floating-point representations.")),(0,i.kt)("p",{parentName:"li"},"Rule 1 straddles the boundaries between integers and floating-point values, and Rule 3 does not use preferred serialization, so Rule 2 may be a good choice in many cases.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If NaN is an allowed value, and there is no intent to support NaN payloads or signaling NaNs, the protocol needs to pick a single representation, typically 0xf97e00. If that simple choice is not possible, specific attention will be needed for NaN handling.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Subnormal numbers (nonzero numbers with the lowest possible exponent of a given IEEE 754 number format) may be flushed to zero outputs or be treated as zero inputs in some floating-point implementations. A protocol's deterministic encoding may want to specifically accommodate such implementations while creating an onus on other implementations by excluding subnormal numbers from interchange, interchanging zero instead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The same number can be represented by different decimal fractions, by different bigfloats, and by different forms under other tags that may be defined to express numeric values. Depending on the implementation, it may not always be practical to determine whether any of these forms (or forms in the basic generic data model) are equivalent. An application protocol that presents choices of this kind for the representation format of numbers needs to be explicit about how the formats for deterministic encoding are to be chosen.")))),(0,i.kt)("p",null,"CBOR \u6807\u7b7e\u5bf9\u4e8e\u786e\u5b9a\u6027\u7f16\u7801\u63d0\u51fa\u4e86\u989d\u5916\u7684\u8003\u8651\u3002\u5982\u679c\u4e00\u4e2a\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u4e3a\u7279\u5b9a\u6807\u7b7e\u7684\u5b58\u5728\u548c\u4e0d\u5b58\u5728\u63d0\u4f9b\u76f8\u540c\u7684\u8bed\u4e49\uff08\u4f8b\u5982\uff0c\u5141\u8bb8\u6807\u7b7e 1 \u6570\u636e\u9879\u548c\u539f\u59cb\u6570\u5b57\u51fa\u73b0\u5728\u65e5\u671f/\u65f6\u95f4\u4f4d\u7f6e\uff0c\u5c06\u540e\u8005\u89c6\u4e3a\u5e26\u6807\u7b7e\u7684\u6570\u636e\uff09\uff0c\u57fa\u4e8e\u201c\u6700\u77ed\u5f62\u5f0f\u201d\u539f\u5219\uff0c\u786e\u5b9a\u6027\u683c\u5f0f\u5c06\u4e0d\u5141\u8bb8\u6807\u7b7e\u51fa\u73b0\u3002\u4f8b\u5982\uff0c\u534f\u8bae\u53ef\u80fd\u5141\u8bb8\u7f16\u7801\u5668\u9009\u62e9\u5c06 URL \u8868\u793a\u4e3a\u6587\u672c\u4e32\u6216\u8005\u4f7f\u7528\u7b2c 3.4.5.3 \u8282\uff0c\u6807\u7b7e\u53f7 32 \u5305\u542b\u6587\u672c\u4e32\u3002\u8fd9\u4e2a\u534f\u8bae\u7684\u786e\u5b9a\u6027\u7f16\u7801\u9700\u8981\u8981\u4e48\u8981\u6c42\u6807\u7b7e\u5b58\u5728\uff0c\u8981\u4e48\u8981\u6c42\u5b83\u4e0d\u5b58\u5728\uff0c\u800c\u4e0d\u662f\u5141\u8bb8\u4e24\u8005\u90fd\u5b58\u5728\u3002"),(0,i.kt)("p",null,"\u5728\u67d0\u4e2a\u534f\u8bae\u4e2d\u786e\u5b9e\u9700\u8981\u5728\u67d0\u4e9b\u4f4d\u7f6e\u4f7f\u7528\u6807\u7b7e\u4ee5\u83b7\u5f97\u7279\u5b9a\u8bed\u4e49\u65f6\uff0c\u786e\u5b9a\u6027\u683c\u5f0f\u4e2d\u4e5f\u9700\u8981\u51fa\u73b0\u6807\u7b7e\u3002\u786e\u5b9a\u6027\u7f16\u7801\u7684\u6ce8\u610f\u4e8b\u9879\u4e5f\u9002\u7528\u4e8e\u6807\u7b7e\u7684\u5185\u5bb9\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u534f\u8bae\u5305\u542b\u4e00\u4e2a\u5b57\u6bb5\uff0c\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u53f7 2 \u6216 3\uff08\u7b2c 3.4.3 \u8282\uff09\u8868\u793a\u7edd\u5bf9\u503c\u4e3a 2^64 \u6216\u66f4\u5927\u7684\u6574\u6570\uff0c\u90a3\u4e48\u534f\u8bae\u7684\u786e\u5b9a\u6027\u7f16\u7801\u9700\u8981\u6307\u5b9a\u662f\u5426\u4f7f\u7528\u8fd9\u4e9b\u6807\u7b7e\u8fd8\u662f\u4f7f\u7528\u4e3b\u7c7b\u578b 0 \u548c 1 \u8868\u793a\u8f83\u5c0f\u7684\u6574\u6570\u3002\u9996\u9009\u5e8f\u5217\u5316\u4f7f\u7528\u540e\u8005\u9009\u62e9\uff0c\u56e0\u6b64\u5efa\u8bae\u4f7f\u7528\u3002"),(0,i.kt)("p",null,"\u5305\u542b\u6d6e\u70b9\u503c\u7684\u534f\u8bae\uff08\u65e0\u8bba\u662f\u4f7f\u7528\u57fa\u672c\u6d6e\u70b9\u503c\uff08\u7b2c 3.3 \u8282\uff09\u8fd8\u662f\u4f7f\u7528\u6807\u7b7e\uff08\u6216\u4e24\u8005\u90fd\u4f7f\u7528\uff09\u8868\u793a\uff09\uff0c\u53ef\u80fd\u9700\u8981\u4e3a\u5176\u786e\u5b9a\u6027\u7f16\u7801\u5b9a\u4e49\u989d\u5916\u8981\u6c42\uff0c\u4f8b\u5982\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5c3d\u7ba1 IEEE \u6d6e\u70b9\u503c\u53ef\u4ee5\u5c06\u6b63\u96f6\u548c\u8d1f\u96f6\u8868\u793a\u4e3a\u4e0d\u540c\u7684\u503c\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u533a\u5206\u5b83\u4eec\uff0c\u53ef\u80fd\u51b3\u5b9a\u7528\u6b63\u53f7\u8868\u793a\u6240\u6709\u96f6\u503c\uff0c\u4e0d\u5141\u8bb8\u8d1f\u96f6\u3002\uff08\u5e94\u7528\u7a0b\u5e8f\u8fd8\u53ef\u80fd\u5e0c\u671b\u9650\u5236\u6d6e\u70b9\u503c\u7684\u7cbe\u5ea6\uff0c\u4ee5\u4fbf\u6c38\u8fdc\u4e0d\u9700\u8981\u8868\u793a 64 \u4f4d\uff08\u751a\u81f3 32 \u4f4d\uff09\u7684\u6d6e\u70b9\u503c\u3002\uff09")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5982\u679c\u534f\u8bae\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u8868\u793a\u6d6e\u70b9\u503c\u7684\u5b57\u6bb5\uff0c\u5e76\u4e14\u5177\u6709\u7279\u5b9a\u7684\u6570\u636e\u6a21\u578b\uff0c\u8be5\u6570\u636e\u6a21\u578b\u58f0\u660e\u6574\u6570\u548c\u6d6e\u70b9\u503c\u662f\u53ef\u4e92\u6362\u7684\uff0c\u90a3\u4e48\u534f\u8bae\u7684\u786e\u5b9a\u6027\u7f16\u7801\u9700\u8981\u6307\u5b9a\uff0c\u4f8b\u5982\uff0c\u6574\u6570 1.0 \u662f\u7f16\u7801\u4e3a 0x01\uff08\u975e\u8d1f\u6574\u6570\uff09\u30010xf93c00\uff08binary16\uff09\u30010xfa3f800000\uff08binary32\uff09\u8fd8\u662f 0xfb3ff0000000000000\uff08binary64\uff09\u3002\u8fd9\u65b9\u9762\u7684\u793a\u4f8b\u89c4\u5219\u6709\uff1a"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"\u5c06\u9002\u7528\u4e8e 64 \u4f4d\u7684\u6574\u6570\u503c\u7f16\u7801\u4e3a\u4e3b\u7c7b\u578b 0 \u548c 1 \u7684\u503c\uff0c\u5c06\u5176\u4ed6\u503c\u7f16\u7801\u4e3a\u51c6\u786e\u8868\u793a\u8be5\u503c\u7684\u9996\u9009\uff0816\u300132 \u6216 64 \u4f4d\u4e2d\u6700\u5c0f\u7684\uff09\u6d6e\u70b9\u8868\u793a\uff1b"),(0,i.kt)("li",{parentName:"ol"},"\u5c06\u6240\u6709\u503c\u7f16\u7801\u4e3a\u51c6\u786e\u8868\u793a\u8be5\u503c\u7684\u9996\u9009\u6d6e\u70b9\u8868\u793a\uff0c\u5373\u4f7f\u5bf9\u4e8e\u6574\u6570\u503c\u4e5f\u662f\u5982\u6b64\uff1b"),(0,i.kt)("li",{parentName:"ol"},"\u5c06\u6240\u6709\u503c\u7f16\u7801\u4e3a 64 \u4f4d\u6d6e\u70b9\u8868\u793a\u3002")),(0,i.kt)("p",{parentName:"li"},"\u89c4\u5219 1 \u5728\u6574\u6570\u548c\u6d6e\u70b9\u503c\u4e4b\u95f4\u8de8\u8d8a\u8fb9\u754c\uff0c\u89c4\u5219 3 \u4e0d\u4f7f\u7528\u9996\u9009\u5e8f\u5217\u5316\uff0c\u56e0\u6b64\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u89c4\u5219 2 \u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5982\u679c NaN \u662f\u5141\u8bb8\u7684\u503c\uff0c\u5e76\u4e14\u65e0\u610f\u652f\u6301 NaN \u8f7d\u8377\u6216\u4fe1\u53f7 NaN\uff0c\u534f\u8bae\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u5355\u4e00\u8868\u793a\uff0c\u901a\u5e38\u662f 0xf97e00\u3002\u5982\u679c\u65e0\u6cd5\u505a\u51fa\u7b80\u5355\u7684\u9009\u62e9\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f NaN \u7684\u5904\u7406\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5728\u67d0\u4e9b\u6d6e\u70b9\u5b9e\u73b0\u4e2d\uff0c\u6b21\u6b63\u89c4\u6570\uff08\u5177\u6709\u7ed9\u5b9a IEEE 754 \u6570\u5b57\u683c\u5f0f\u7684\u6700\u4f4e\u53ef\u80fd\u6307\u6570\u7684\u975e\u96f6\u6570\uff09\u53ef\u80fd\u88ab\u5237\u65b0\u4e3a\u96f6\u8f93\u51fa\u6216\u88ab\u89c6\u4e3a\u96f6\u8f93\u5165\u3002\u534f\u8bae\u7684\u786e\u5b9a\u6027\u7f16\u7801\u53ef\u80fd\u5e0c\u671b\u7279\u522b\u9002\u5e94\u8fd9\u6837\u7684\u5b9e\u73b0\uff0c\u540c\u65f6\u901a\u8fc7\u4ece\u4ea4\u6362\u4e2d\u6392\u9664\u6b21\u6b63\u89c4\u6570\uff0c\u4ea4\u6362\u96f6\u503c\u6765\u4e3a\u5176\u4ed6\u5b9e\u73b0\u521b\u9020\u8d1f\u62c5\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u76f8\u540c\u7684\u6570\u5b57\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u5c0f\u6570\u3001\u4e0d\u540c\u7684\u5927\u6d6e\u70b9\u6570\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u53ef\u80fd\u88ab\u5b9a\u4e49\u4e3a\u8868\u793a\u6570\u503c\u7684\u6807\u7b7e\u4e0b\u7684\u4e0d\u540c\u5f62\u5f0f\u8868\u793a\u3002\u6839\u636e\u5b9e\u73b0\u60c5\u51b5\uff0c\u786e\u5b9a\u8fd9\u4e9b\u5f62\u5f0f\uff08\u6216\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u7684\u5f62\u5f0f\uff09\u662f\u5426\u7b49\u4ef7\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u5b9e\u9645\u53ef\u884c\u7684\u3002\u5728\u6570\u5b57\u8868\u793a\u683c\u5f0f\u65b9\u9762\u63d0\u4f9b\u9009\u62e9\u7684\u5e94\u7528\u7a0b\u5e8f\u534f\u8bae\u9700\u8981\u660e\u786e\u8bf4\u660e\u5982\u4f55\u9009\u62e9\u786e\u5b9a\u6027\u7f16\u7801\u7684\u683c\u5f0f\u3002"))),(0,i.kt)("h4",{id:"423-\u957f\u5ea6\u4f18\u5148\u7684\u6620\u5c04\u952e\u6392\u5e8flength-first-map-key-ordering"},"4.2.3. \u957f\u5ea6\u4f18\u5148\u7684\u6620\u5c04\u952e\u6392\u5e8f\uff08Length-First Map Key Ordering\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"The core deterministic encoding requirements (Section 4.2.1) sort map keys in a different order from the one suggested by Section 3.9 of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),' (called "Canonical CBOR" there). Protocols that need to be compatible with the order specified in ',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),' can instead be specified in terms of this specification\'s "length-first core deterministic encoding requirements":'),(0,i.kt)("p",null,'A CBOR encoding satisfies the "length-first core deterministic encoding requirements" if it satisfies the core deterministic encoding requirements except that the keys in every map MUST be sorted such that:'),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If two keys have different lengths, the shorter one sorts earlier;"),(0,i.kt)("li",{parentName:"ol"},"If two keys have the same length, the one with the lower value in (bytewise) lexical order sorts earlier.")),(0,i.kt)("p",null,"For example, under the length-first core deterministic encoding requirements, the following keys are sorted correctly:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"10, encoded as 0x0a."),(0,i.kt)("li",{parentName:"ol"},"-1, encoded as 0x20."),(0,i.kt)("li",{parentName:"ol"},"false, encoded as 0xf4."),(0,i.kt)("li",{parentName:"ol"},"100, encoded as 0x1864."),(0,i.kt)("li",{parentName:"ol"},'"z", encoded as 0x617a.'),(0,i.kt)("li",{parentName:"ol"},"[-1]",", encoded as 0x8120."),(0,i.kt)("li",{parentName:"ol"},'"aa", encoded as 0x626161.'),(0,i.kt)("li",{parentName:"ol"},"[100]",", encoded as 0x811864.")),(0,i.kt)("p",null,"Although ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049"),' used the term "Canonical CBOR" for its form of requirements on deterministic encoding, this document avoids this term because "canonicalization" is often associated with specific uses of deterministic encoding only. The terms are essentially interchangeable, however, and the set of core requirements in this document could also be called "Canonical CBOR", while the length-first-ordered version of that could be called "Old Canonical CBOR".')),(0,i.kt)("p",null,"\u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\uff08\u7b2c 4.2.1 \u8282\uff09\u5c06\u6620\u5c04\u952e\u6309\u7167\u4e0e ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u7b2c 3.9 \u8282\u5efa\u8bae\u7684\u987a\u5e8f\u4e0d\u540c\u7684\u987a\u5e8f\u6392\u5e8f\uff08\u5728\u90a3\u91cc\u79f0\u4e3a\u201c\u89c4\u8303\u5316 CBOR\u201d\uff09\u3002\u9700\u8981\u4e0e ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u4e2d\u6307\u5b9a\u7684\u987a\u5e8f\u517c\u5bb9\u7684\u534f\u8bae\u53ef\u4ee5\u7528\u8fd9\u4e2a\u89c4\u8303\u7684\u201c\u957f\u5ea6\u4f18\u5148\u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\u201d\u6765\u66ff\u4ee3\u6307\u5b9a\uff1a"),(0,i.kt)("p",null,"\u4e00\u4e2a CBOR \u7f16\u7801\u6ee1\u8db3\u201c\u957f\u5ea6\u4f18\u5148\u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\u201d\uff0c\u5982\u679c\u5b83\u6ee1\u8db3\u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\uff0c\u9664\u4e86\u6bcf\u4e2a\u6620\u5c04\u4e2d\u7684\u952e\u5fc5\u987b\uff08MUST\uff09\u6392\u5e8f\u5982\u4e0b\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u5982\u679c\u4e24\u4e2a\u952e\u7684\u957f\u5ea6\u4e0d\u540c\uff0c\u8f83\u77ed\u7684\u952e\u6392\u5728\u524d\u9762\uff1b"),(0,i.kt)("li",{parentName:"ol"},"\u5982\u679c\u4e24\u4e2a\u952e\u957f\u5ea6\u76f8\u540c\uff0c\u6309\u5b57\u8282\u987a\u5e8f\u6392\u5e8f\u503c\u8f83\u5c0f\u7684\u952e\u6392\u5728\u524d\u9762\u3002")),(0,i.kt)("p",null,"\u4f8b\u5982\uff0c\u5728\u957f\u5ea6\u4f18\u5148\u6838\u5fc3\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\u4e0b\uff0c\u4ee5\u4e0b\u952e\u6b63\u786e\u5730\u6392\u5e8f\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"10\uff0c\u7f16\u7801\u4e3a 0x0a."),(0,i.kt)("li",{parentName:"ol"},"-1\uff0c\u7f16\u7801\u4e3a 0x20."),(0,i.kt)("li",{parentName:"ol"},"false\uff0c\u7f16\u7801\u4e3a 0xf4."),(0,i.kt)("li",{parentName:"ol"},"100\uff0c\u7f16\u7801\u4e3a 0x1864."),(0,i.kt)("li",{parentName:"ol"},'"z"\uff0c\u7f16\u7801\u4e3a 0x617a.'),(0,i.kt)("li",{parentName:"ol"},"[-1]","\uff0c\u7f16\u7801\u4e3a 0x8120."),(0,i.kt)("li",{parentName:"ol"},'"aa"\uff0c\u7f16\u7801\u4e3a 0x626161.'),(0,i.kt)("li",{parentName:"ol"},"[100]","\uff0c\u7f16\u7801\u4e3a 0x811864.")),(0,i.kt)("p",null,"\u5c3d\u7ba1 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u4e3a\u5176\u786e\u5b9a\u6027\u7f16\u7801\u8981\u6c42\u4f7f\u7528\u4e86\u201c\u89c4\u8303\u5316 CBOR\u201d\u8fd9\u4e2a\u672f\u8bed\uff0c\u4f46\u672c\u6587\u6863\u907f\u514d\u4f7f\u7528\u8fd9\u4e2a\u672f\u8bed\uff0c\u56e0\u4e3a\u201c\u89c4\u8303\u5316\u201d\u901a\u5e38\u53ea\u4e0e\u786e\u5b9a\u6027\u7f16\u7801\u7684\u7279\u5b9a\u7528\u9014\u76f8\u5173\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u672f\u8bed\u5728\u672c\u8d28\u4e0a\u662f\u53ef\u4ee5\u4e92\u6362\u7684\uff0c\u672c\u6587\u6863\u4e2d\u7684\u6838\u5fc3\u8981\u6c42\u96c6\u5408\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u201c\u89c4\u8303\u5316 CBOR\u201d\uff0c\u800c\u8fd9\u4e2a\u7248\u672c\u7684\u957f\u5ea6\u4f18\u5148\u6392\u5e8f\u53ef\u4ee5\u79f0\u4e3a\u201c\u65e7\u89c4\u8303\u5316 CBOR\u201d\u3002"),(0,i.kt)("h2",{id:"5-\u521b\u5efa\u57fa\u4e8e-cbor-\u7684\u534f\u8baecreating-cbor-based-protocols"},"5. \u521b\u5efa\u57fa\u4e8e CBOR \u7684\u534f\u8bae\uff08Creating CBOR-Based Protocols\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Data formats such as CBOR are often used in environments where there is no format negotiation. A specific design goal of CBOR is to not need any included or assumed schema: a decoder can take a CBOR item and decode it with no other knowledge."),(0,i.kt)("p",null,'Of course, in real-world implementations, the encoder and the decoder will have a shared view of what should be in a CBOR data item. For example, an agreed-to format might be "the item is an array whose first value is a UTF-8 string, second value is an integer, and subsequent values are zero or more floating-point numbers" or "the item is a map that has byte strings for keys and contains a pair whose key is 0xab01".'),(0,i.kt)("p",null,"CBOR-based protocols MUST specify how their decoders handle invalid and other unexpected data. CBOR-based protocols MAY specify that they treat arbitrary valid data as unexpected. Encoders for CBOR-based protocols MUST produce only valid items, that is, the protocol cannot be designed to make use of invalid items. An encoder can be capable of encoding as many or as few types of values as is required by the protocol in which it is used; a decoder can be capable of understanding as many or as few types of values as is required by the protocols in which it is used. This lack of restrictions allows CBOR to be used in extremely constrained environments."),(0,i.kt)("p",null,"The rest of this section discusses some considerations in creating CBOR-based protocols. With few exceptions, it is advisory only and explicitly excludes any language from BCP 14 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc2119"},"RFC2119")," ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8174"},"RFC8174"),' other than words that could be interpreted as "MAY" in the sense of BCP 14. The exceptions aim at facilitating interoperability of CBOR-based protocols while making use of a wide variety of both generic and application-specific encoders and decoders.')),(0,i.kt)("p",null,"\u8bf8\u5982 CBOR \u8fd9\u6837\u7684\u6570\u636e\u683c\u5f0f\u901a\u5e38\u7528\u4e8e\u6ca1\u6709\u683c\u5f0f\u534f\u5546\u7684\u73af\u5883\u3002CBOR \u7684\u4e00\u4e2a\u5177\u4f53\u8bbe\u8ba1\u76ee\u6807\u662f\u4e0d\u9700\u8981\u4efb\u4f55\u5305\u542b\u7684\u6216\u5047\u5b9a\u7684\u6a21\u5f0f\uff1a\u89e3\u7801\u5668\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a CBOR \u9879\u5e76\u5728\u6ca1\u6709\u5176\u4ed6\u77e5\u8bc6\u7684\u60c5\u51b5\u4e0b\u5bf9\u5176\u8fdb\u884c\u89e3\u7801\u3002"),(0,i.kt)("p",null,"\u5f53\u7136\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u7684\u5b9e\u73b0\u4e2d\uff0c\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u4f1a\u5bf9 CBOR \u6570\u636e\u9879\u4e2d\u5e94\u8be5\u5305\u542b\u4ec0\u4e48\u6709\u5171\u540c\u7684\u8ba4\u8bc6\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u7ea6\u5b9a\u7684\u683c\u5f0f\u53ef\u80fd\u662f\u201c\u6570\u636e\u9879\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u7b2c\u4e00\u4e2a\u503c\u662f\u4e00\u4e2a UTF-8 \u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u968f\u540e\u7684\u503c\u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u6d6e\u70b9\u6570\u201d\uff0c\u6216\u8005\u201c\u6570\u636e\u9879\u662f\u4e00\u4e2a\u5177\u6709\u5b57\u8282\u4e32\u952e\u7684\u6620\u5c04\uff0c\u5305\u542b\u4e00\u4e2a\u952e\u4e3a 0xab01 \u7684\u952e\u503c\u5bf9\u201d\u3002"),(0,i.kt)("p",null,"\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u5fc5\u987b\uff08MUST\uff09\u6307\u5b9a\u5176\u89e3\u7801\u5668\u5982\u4f55\u5904\u7406\u65e0\u6548\u548c\u5176\u4ed6\u610f\u5916\u6570\u636e\u3002\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u53ef\u4ee5\uff08MAY\uff09\u6307\u5b9a\u5c06\u4efb\u610f\u6709\u6548\u6570\u636e\u89c6\u4e3a\u610f\u5916\u6570\u636e\u3002CBOR \u534f\u8bae\u7684\u7f16\u7801\u5668\u5fc5\u987b\uff08MUST\uff09\u53ea\u4ea7\u751f\u6709\u6548\u9879\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u534f\u8bae\u4e0d\u80fd\u8bbe\u8ba1\u4e3a\u5229\u7528\u65e0\u6548\u9879\u3002\u7f16\u7801\u5668\u53ef\u4ee5\u6839\u636e\u6240\u4f7f\u7528\u7684\u534f\u8bae\u7684\u8981\u6c42\uff0c\u7f16\u7801\u5c3d\u53ef\u80fd\u591a\u6216\u5c3d\u53ef\u80fd\u5c11\u7684\u7c7b\u578b\u503c\uff1b\u89e3\u7801\u5668\u53ef\u4ee5\u6839\u636e\u6240\u4f7f\u7528\u7684\u534f\u8bae\u7684\u8981\u6c42\uff0c\u7406\u89e3\u5c3d\u53ef\u80fd\u591a\u6216\u5c3d\u53ef\u80fd\u5c11\u7684\u7c7b\u578b\u503c\u3002\u8fd9\u79cd\u7f3a\u4e4f\u9650\u5236\u4f7f\u5f97 CBOR \u53ef\u4ee5\u5728\u6781\u4e3a\u53d7\u9650\u7684\u73af\u5883\u4e2d\u4f7f\u7528\u3002"),(0,i.kt)("p",null,"\u672c\u8282\u5176\u4f59\u90e8\u5206\u8ba8\u8bba\u4e86\u521b\u5efa\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u7684\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\u3002\u9664\u4e86\u5c11\u6570\u4f8b\u5916\uff0c\u672c\u8282\u4e3b\u8981\u662f\u5efa\u8bae\u6027\u8d28\u7684\uff0c\u660e\u786e\u6392\u9664\u4e86 BCP 14 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc2119"},"RFC2119")," ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8174"},"RFC8174")," \u4e2d\u7684\u4efb\u4f55\u8bed\u8a00\uff0c\u9664\u4e86\u53ef\u4ee5\u7406\u89e3\u4e3a BCP 14 \u4e2d\u201cMAY\u201d\u610f\u4e49\u7684\u8bcd\u8bed\u3002\u8fd9\u4e9b\u4f8b\u5916\u65e8\u5728\u4fc3\u8fdb\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u7684\u4e92\u64cd\u4f5c\u6027\uff0c\u540c\u65f6\u5229\u7528\u5404\u79cd\u901a\u7528\u548c\u7279\u5b9a\u4e8e\u5e94\u7528\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u3002"),(0,i.kt)("h3",{id:"51-cbor-\u5728\u6d41\u5f0f\u5e94\u7528\u4e2d\u7684\u5e94\u7528cbor-in-streaming-applications"},"5.1. CBOR \u5728\u6d41\u5f0f\u5e94\u7528\u4e2d\u7684\u5e94\u7528\uff08CBOR in Streaming Applications\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"In a streaming application, a data stream may be composed of a sequence of CBOR data items concatenated back-to-back. In such an environment, the decoder immediately begins decoding a new data item if data is found after the end of a previous data item."),(0,i.kt)("p",null,"Not all of the bytes making up a data item may be immediately available to the decoder; some decoders will buffer additional data until a complete data item can be presented to the application. Other decoders can present partial information about a top-level data item to an application, such as the nested data items that could already be decoded, or even parts of a byte string that hasn't completely arrived yet. Such an application also MUST have a matching streaming security mechanism, where the desired protection is available for incremental data presented to the application."),(0,i.kt)("p",null,"Note that some applications and protocols will not want to use indefinite-length encoding. Using indefinite-length encoding allows an encoder to not need to marshal all the data for counting, but it requires a decoder to allocate increasing amounts of memory while waiting for the end of the item. This might be fine for some applications but not others.")),(0,i.kt)("p",null,"\u5728\u6d41\u5f0f\u5e94\u7528\u4e2d\uff0c\u6570\u636e\u6d41\u53ef\u80fd\u7531\u4e00\u7cfb\u5217\u9996\u5c3e\u76f8\u63a5\u7684 CBOR \u6570\u636e\u9879\u7ec4\u6210\u3002\u5728\u8fd9\u6837\u7684\u73af\u5883\u4e2d\uff0c\u5982\u679c\u5728\u524d\u4e00\u4e2a\u6570\u636e\u9879\u7ed3\u675f\u540e\u53d1\u73b0\u6709\u6570\u636e\uff0c\u89e3\u7801\u5668\u5c06\u7acb\u5373\u5f00\u59cb\u89e3\u7801\u65b0\u7684\u6570\u636e\u9879\u3002"),(0,i.kt)("p",null,"\u6784\u6210\u6570\u636e\u9879\u7684\u6240\u6709\u5b57\u8282\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u63d0\u4f9b\u7ed9\u89e3\u7801\u5668\uff1b\u4e00\u4e9b\u89e3\u7801\u5668\u5c06\u7f13\u51b2\u989d\u5916\u7684\u6570\u636e\uff0c\u76f4\u5230\u53ef\u4ee5\u5411\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5b8c\u6574\u7684\u6570\u636e\u9879\u3002\u5176\u4ed6\u89e3\u7801\u5668\u53ef\u4ee5\u5411\u5e94\u7528\u7a0b\u5e8f\u5448\u73b0\u5173\u4e8e\u9876\u5c42\u6570\u636e\u9879\u7684\u90e8\u5206\u4fe1\u606f\uff0c\u4f8b\u5982\u5df2\u7ecf\u89e3\u7801\u7684\u5d4c\u5957\u6570\u636e\u9879\uff0c\u751a\u81f3\u5c1a\u672a\u5b8c\u5168\u5230\u8fbe\u7684\u5b57\u8282\u4e32\u7684\u90e8\u5206\u5185\u5bb9\u3002\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd8\u5fc5\u987b\uff08MUST\uff09\u5177\u6709\u5339\u914d\u7684\u6d41\u5f0f\u5b89\u5168\u673a\u5236\uff0c\u4ee5\u4fbf\u4e3a\u5e94\u7528\u7a0b\u5e8f\u5448\u73b0\u7684\u589e\u91cf\u6570\u636e\u63d0\u4f9b\u6240\u9700\u7684\u4fdd\u62a4\u3002"),(0,i.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u67d0\u4e9b\u5e94\u7528\u7a0b\u5e8f\u548c\u534f\u8bae\u53ef\u80fd\u4e0d\u5e0c\u671b\u4f7f\u7528\u4e0d\u5b9a\u957f\u5ea6\u7f16\u7801\u3002\u4f7f\u7528\u4e0d\u5b9a\u957f\u5ea6\u7f16\u7801\u5141\u8bb8\u7f16\u7801\u5668\u65e0\u9700\u6574\u7406\u6240\u6709\u6570\u636e\u4ee5\u8fdb\u884c\u8ba1\u6570\uff0c\u4f46\u9700\u8981\u89e3\u7801\u5668\u5728\u7b49\u5f85\u9879\u7ed3\u675f\u65f6\u5206\u914d\u8d8a\u6765\u8d8a\u591a\u7684\u5185\u5b58\u3002\u8fd9\u5bf9\u67d0\u4e9b\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u662f\u53ef\u884c\u7684\uff0c\u4f46\u5bf9\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4e0d\u9002\u7528\u3002"),(0,i.kt)("h3",{id:"52-\u901a\u7528\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668generic-encoders-and-decoders"},"5.2. \u901a\u7528\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\uff08Generic Encoders and Decoders\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"A generic CBOR decoder can decode all well-formed encoded CBOR data items and present the data items to an application. See Appendix C. (The diagnostic notation, Section 8, may be used to present well-formed CBOR values to humans.)"),(0,i.kt)("p",null,"Generic CBOR encoders provide an application interface that allows the application to specify any well-formed value to be encoded as a CBOR data item, including simple values and tags unknown to the encoder."),(0,i.kt)("p",null,"Even though CBOR attempts to minimize these cases, not all well-formed CBOR data is valid: for example, the encoded text string 0x62c0ae does not contain valid UTF-8 (because ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3629"},"RFC3629")," requires always using the shortest form) and so is not a valid CBOR item. Also, specific tags may make semantic constraints that may be violated, for instance, by a bignum tag enclosing another tag or by an instance of tag number 0 containing a byte string or containing a text string with contents that do not match the date-time production of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3339"},"RFC3339"),". There is no requirement that generic encoders and decoders make unnatural choices for their application interface to enable the processing of invalid data. Generic encoders and decoders are expected to forward simple values and tags even if their specific codepoints are not registered at the time the encoder/decoder is written (Section 5.4).")),(0,i.kt)("p",null,"\u901a\u7528 CBOR \u89e3\u7801\u5668\u53ef\u4ee5\u89e3\u7801\u6240\u6709\u683c\u5f0f\u826f\u597d\u7684\u7f16\u7801 CBOR \u6570\u636e\u9879\uff0c\u5e76\u5c06\u6570\u636e\u9879\u5448\u73b0\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u8bf7\u53c2\u9605\u9644\u5f55 C\u3002\uff08\u8bca\u65ad\u7b26\u53f7\u8868\u793a\u6cd5\uff08diagnostic notation\uff0c\u7b2c 8 \u8282\uff09\u53ef\u7528\u4e8e\u5c06\u683c\u5f0f\u826f\u597d\u7684 CBOR \u503c\u5448\u73b0\u7ed9\u4eba\u7c7b\u3002\uff09"),(0,i.kt)("p",null,"\u901a\u7528 CBOR \u7f16\u7801\u5668\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3\uff0c\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u6307\u5b9a\u4efb\u4f55\u683c\u5f0f\u826f\u597d\u7684\u503c\u4f5c\u4e3a CBOR \u6570\u636e\u9879\u8fdb\u884c\u7f16\u7801\uff0c\u5305\u62ec\u7f16\u7801\u5668\u672a\u77e5\u7684\u7b80\u5355\u503c\u548c\u6807\u7b7e\u3002"),(0,i.kt)("p",null,"\u5c3d\u7ba1 CBOR \u52aa\u529b\u5c06\u8fd9\u4e9b\u60c5\u51b5\u964d\u81f3\u6700\u4f4e\uff0c\u4f46\u5e76\u975e\u6240\u6709\u683c\u5f0f\u826f\u597d\u7684 CBOR \u6570\u636e\u90fd\u662f\u6709\u6548\u7684\uff1a\u4f8b\u5982\uff0c\u7f16\u7801\u6587\u672c\u4e32 0x62c0ae \u4e0d\u5305\u542b\u6709\u6548\u7684 UTF-8\uff08\u56e0\u4e3a ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3629"},"RFC3629")," \u8981\u6c42\u59cb\u7ec8\u4f7f\u7528\u6700\u77ed\u683c\u5f0f\uff09\uff0c\u56e0\u6b64\u4e0d\u662f\u6709\u6548\u7684 CBOR \u9879\u3002\u6b64\u5916\uff0c\u7279\u5b9a\u6807\u7b7e\u53ef\u80fd\u4f1a\u5bf9\u53ef\u80fd\u88ab\u8fdd\u53cd\u7684\u8bed\u4e49\u7ea6\u675f\u8fdb\u884c\u9650\u5236\uff0c\u4f8b\u5982\uff0c\u7531\u5927\u6570\u6807\u7b7e\u5c01\u88c5\u53e6\u4e00\u4e2a\u6807\u7b7e\uff0c\u6216\u8005\u7531\u6807\u7b7e\u7f16\u53f7\u4e3a 0 \u7684\u5b9e\u4f8b\u5305\u542b\u4e00\u4e2a\u5b57\u8282\u4e32\uff0c\u6216\u8005\u5305\u542b\u4e00\u4e2a\u6587\u672c\u4e32\uff0c\u5176\u5185\u5bb9\u4e0d\u7b26\u5408 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3339"},"RFC3339")," \u7684\u65e5\u671f\u65f6\u95f4\u4ea7\u751f\u3002\u901a\u7528\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u65e0\u9700\u4e3a\u5176\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3\u505a\u4e0d\u81ea\u7136\u7684\u9009\u62e9\u4ee5\u5904\u7406\u65e0\u6548\u6570\u636e\u3002\u901a\u7528\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u9884\u8ba1\u4f1a\u8f6c\u53d1\u7b80\u5355\u503c\u548c\u6807\u7b7e\uff0c\u5373\u4f7f\u5728\u7f16\u7801\u5668/\u89e3\u7801\u5668\u7f16\u5199\u65f6\u5b83\u4eec\u7684\u7279\u5b9a\u4ee3\u7801\u70b9\u5c1a\u672a\u6ce8\u518c\uff08\u7b2c 5.4 \u8282\uff09\u3002"),(0,i.kt)("h3",{id:"53-\u6570\u636e\u9879\u6709\u6548\u6027validity-of-items"},"5.3. \u6570\u636e\u9879\u6709\u6548\u6027\uff08Validity of Items\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"A well-formed but invalid CBOR data item (Section 1.2) presents a problem with interpreting the data encoded in it in the CBOR data model. A CBOR-based protocol could be specified in several layers, in which the lower layers don't process the semantics of some of the CBOR data they forward. These layers can't notice any validity errors in data they don't process and MUST forward that data as-is. The first layer that does process the semantics of an invalid CBOR item MUST pick one of two choices:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Replace the problematic item with an error marker and continue with the next item, or"),(0,i.kt)("li",{parentName:"ol"},"Issue an error and stop processing altogether.")),(0,i.kt)("p",null,"A CBOR-based protocol MUST specify which of these options its decoders take for each kind of invalid item they might encounter."),(0,i.kt)("p",null,"Such problems might occur at the basic validity level of CBOR or in the context of tags (tag validity).")),(0,i.kt)("p",null,"\u683c\u5f0f\u826f\u597d\u4f46\u65e0\u6548\u7684 CBOR \u6570\u636e\u9879\uff08\u7b2c 1.2 \u8282\uff09\u5728 CBOR \u6570\u636e\u6a21\u578b\u4e2d\u89e3\u91ca\u5176\u4e2d\u7f16\u7801\u7684\u6570\u636e\u65f6\u5b58\u5728\u95ee\u9898\u3002\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u53ef\u4ee5\u5206\u4e3a\u591a\u4e2a\u5c42\u6b21\uff0c\u5176\u4e2d\u8f83\u4f4e\u5c42\u6b21\u4e0d\u5904\u7406\u5b83\u4eec\u8f6c\u53d1\u7684\u67d0\u4e9b CBOR \u6570\u636e\u7684\u8bed\u4e49\u3002\u8fd9\u4e9b\u5c42\u6b21\u65e0\u6cd5\u6ce8\u610f\u5230\u5b83\u4eec\u672a\u5904\u7406\u7684\u6570\u636e\u4e2d\u7684\u4efb\u4f55\u6709\u6548\u6027\u9519\u8bef\uff0c\u5e76\u4e14\u5fc5\u987b\uff08MUST\uff09\u539f\u6837\u8f6c\u53d1\u8be5\u6570\u636e\u3002\u5904\u7406\u65e0\u6548 CBOR \u9879\u8bed\u4e49\u7684\u7b2c\u4e00\u5c42\u5fc5\u987b\uff08MUST\uff09\u9009\u62e9\u4ee5\u4e0b\u4e24\u4e2a\u9009\u9879\u4e4b\u4e00\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u7528\u9519\u8bef\u6807\u8bb0\u66ff\u6362\u6709\u95ee\u9898\u7684\u6570\u636e\u9879\u5e76\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u6570\u636e\u9879\uff0c\u6216\u8005"),(0,i.kt)("li",{parentName:"ol"},"\u53d1\u51fa\u9519\u8bef\u5e76\u505c\u6b62\u6240\u6709\u5904\u7406\u3002")),(0,i.kt)("p",null,"\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u5fc5\u987b\uff08MUST\uff09\u4e3a\u89e3\u7801\u5668\u5728\u53ef\u80fd\u9047\u5230\u7684\u6bcf\u79cd\u65e0\u6548\u9879\u4e0a\u6307\u5b9a\u91c7\u7528\u8fd9\u4e9b\u9009\u9879\u4e2d\u7684\u54ea\u4e00\u4e2a\u3002"),(0,i.kt)("p",null,"\u6b64\u7c7b\u95ee\u9898\u53ef\u80fd\u53d1\u751f\u5728 CBOR \u7684\u57fa\u672c\u6709\u6548\u6027\u7ea7\u522b\u6216\u6807\u7b7e\u4e0a\u4e0b\u6587\u4e2d\uff08\u6807\u7b7e\u6709\u6548\u6027\uff09\u3002"),(0,i.kt)("h4",{id:"531-\u57fa\u672c\u6709\u6548\u6027basic-validity"},"5.3.1. \u57fa\u672c\u6709\u6548\u6027\uff08Basic validity\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Two kinds of validity errors can occur in the basic generic data model:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Duplicate keys in a map"),':\nGeneric decoders (Section 5.2) make data available to applications using the native CBOR data model. That data model includes maps (key-value mappings with unique keys), not multimaps (key-value mappings where multiple entries can have the same key). Thus, a generic decoder that gets a CBOR map item that has duplicate keys will decode to a map with only one instance of that key, or it might stop processing altogether. On the other hand, a "streaming decoder" may not even be able to notice. See Section 5.6 for more discussion of keys in maps.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Invalid UTF-8 string"),":\nA decoder might or might not want to verify that the sequence of bytes in a UTF-8 string (major type 3) is actually valid UTF-8 and react appropriately.")),(0,i.kt)("p",null,"\u5728\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u53ef\u4ee5\u53d1\u751f\u4e24\u79cd\u6709\u6548\u6027\u9519\u8bef\uff1a"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6620\u5c04\u4e2d\u7684\u91cd\u590d\u952e"),"\uff1a\n\u901a\u7528\u89e3\u7801\u5668\uff08\u7b2c 5.2 \u8282\uff09\u4f7f\u7528\u672c\u673a CBOR \u6570\u636e\u6a21\u578b\u5411\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6570\u636e\u3002\u8be5\u6570\u636e\u6a21\u578b\u5305\u62ec\u6620\u5c04\uff08\u5177\u6709\u552f\u4e00\u952e\u7684\u952e\u503c\u6620\u5c04\uff09\uff0c\u800c\u4e0d\u662f\u591a\u6620\u5c04\uff08\u53ef\u4ee5\u5177\u6709\u76f8\u540c\u952e\u7684\u591a\u4e2a\u6761\u76ee\u7684\u952e\u503c\u6620\u5c04\uff09\u3002\u56e0\u6b64\uff0c\u83b7\u5f97\u5177\u6709\u91cd\u590d\u952e\u7684 CBOR \u6620\u5c04\u9879\u7684\u901a\u7528\u89e3\u7801\u5668\u5c06\u89e3\u7801\u4e3a\u4ec5\u5177\u6709\u8be5\u952e\u7684\u4e00\u4e2a\u5b9e\u4f8b\u7684\u6620\u5c04\uff0c\u6216\u8005\u53ef\u80fd\u4f1a\u5b8c\u5168\u505c\u6b62\u5904\u7406\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u201c\u6d41\u5f0f\u89e3\u7801\u5668\u201d\u751a\u81f3\u53ef\u80fd\u65e0\u6cd5\u6ce8\u610f\u5230\u3002\u6709\u5173\u6620\u5c04\u4e2d\u952e\u7684\u66f4\u591a\u8ba8\u8bba\uff0c\u8bf7\u53c2\u9605\u7b2c 5.6 \u8282\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u65e0\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32"),"\uff1a\n\u89e3\u7801\u5668\u53ef\u80fd\u5e0c\u671b\u4e5f\u53ef\u80fd\u4e0d\u5e0c\u671b\u9a8c\u8bc1 UTF-8 \u5b57\u7b26\u4e32\uff08\u4e3b\u7c7b\u578b 3\uff09\u4e2d\u5b57\u8282\u5e8f\u5217\u5b9e\u9645\u4e0a\u662f\u5426\u4e3a\u6709\u6548\u7684 UTF-8\uff0c\u5e76\u4f5c\u51fa\u76f8\u5e94\u7684\u53cd\u5e94\u3002"),(0,i.kt)("h4",{id:"532-\u6807\u7b7e\u6709\u6548\u6027tag-validity"},"5.3.2. \u6807\u7b7e\u6709\u6548\u6027\uff08Tag validity\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Two additional kinds of validity errors are introduced by adding tags to the basic generic data model:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Inadmissible type for tag content"),":\nTag numbers (Section 3.4) specify what type of data item is supposed to be used as their tag content; for example, the tag numbers for unsigned or negative bignums are supposed to be put on byte strings. A decoder that decodes the tagged data item into a native representation (a native big integer in this example) is expected to check the type of the data item being tagged. Even decoders that don't have such native representations available in their environment may perform the check on those tags known to them and react appropriately."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Inadmissible value for tag content"),':\nThe type of data item may be admissible for a tag\'s content, but the specific value may not be; e.g., a value of "yesterday" is not acceptable for the content of tag 0, even though it properly is a text string. A decoder that normally ingests such tags into equivalent platform types might present this tag to the application in a similar way to how it would present a tag with an unknown tag number (Section 5.4).')),(0,i.kt)("p",null,"\u901a\u8fc7\u5c06\u6807\u7b7e\u6dfb\u52a0\u5230\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\uff0c\u5f15\u5165\u4e86\u53e6\u5916\u4e24\u79cd\u6709\u6548\u6027\u9519\u8bef\uff1a"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5bf9\u4e8e\u6807\u7b7e\u5185\u5bb9\u4e0d\u5141\u8bb8\u7684\u7c7b\u578b"),"\uff1a\n\u6807\u7b7e\u53f7\uff08\u7b2c 3.4 \u8282\uff09\u6307\u5b9a\u4e86\u5e94\u5c06\u54ea\u79cd\u7c7b\u578b\u7684\u6570\u636e\u9879\u7528\u4f5c\u5176\u6807\u7b7e\u5185\u5bb9\uff1b\u4f8b\u5982\uff0c\u5e94\u5c06\u65e0\u7b26\u53f7\u6216\u8d1f\u6570\u5927\u6574\u6570\u7684\u6807\u7b7e\u53f7\u653e\u5728\u5b57\u8282\u4e32\u4e0a\u3002\u89e3\u7801\u5668\u5728\u5c06\u5e26\u6807\u7b7e\u7684\u6570\u636e\u9879\u89e3\u7801\u4e3a\u672c\u5730\u8868\u793a\uff08\u672c\u793a\u4f8b\u4e2d\u7684\u672c\u5730\u5927\u6574\u6570\uff09\u65f6\uff0c\u9884\u671f\u4f1a\u68c0\u67e5\u88ab\u6807\u7b7e\u7684\u6570\u636e\u9879\u7684\u7c7b\u578b\u3002\u5373\u4f7f\u5728\u73af\u5883\u4e2d\u6ca1\u6709\u8fd9\u6837\u7684\u672c\u5730\u8868\u793a\u7684\u89e3\u7801\u5668\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u5df2\u77e5\u7684\u90a3\u4e9b\u6807\u7b7e\u6267\u884c\u68c0\u67e5\u5e76\u505a\u51fa\u9002\u5f53\u7684\u53cd\u5e94\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5bf9\u4e8e\u6807\u7b7e\u5185\u5bb9\u4e0d\u5141\u8bb8\u7684\u503c"),'\uff1a\n\u6570\u636e\u9879\u7684\u7c7b\u578b\u53ef\u80fd\u5bf9\u6807\u7b7e\u7684\u5185\u5bb9\u662f\u53ef\u63a5\u53d7\u7684\uff0c\u4f46\u7279\u5b9a\u503c\u53ef\u80fd\u4e0d\u662f\uff1b\u4f8b\u5982\uff0c\u5bf9\u4e8e\u6807\u7b7e 0 \u7684\u5185\u5bb9\uff0c"\u6628\u5929" \u7684\u503c\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u5373\u4f7f\u5b83\u786e\u5b9e\u662f\u4e00\u4e2a\u6587\u672c\u4e32\u3002\u901a\u5e38\u5c06\u6b64\u7c7b\u6807\u7b7e\u8f6c\u6362\u4e3a\u7b49\u6548\u5e73\u53f0\u7c7b\u578b\u7684\u89e3\u7801\u5668\u53ef\u80fd\u4ee5\u7c7b\u4f3c\u4e8e\u5982\u4f55\u5448\u73b0\u5177\u6709\u672a\u77e5\u6807\u7b7e\u53f7\u7684\u6807\u7b7e\u7684\u65b9\u5f0f\u5c06\u6b64\u6807\u7b7e\u5448\u73b0\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff08\u7b2c 5.4 \u8282\uff09\u3002'),(0,i.kt)("h3",{id:"54-\u6709\u6548\u6027\u548c\u6f14\u53d8validity-and-evolution"},"5.4. \u6709\u6548\u6027\u548c\u6f14\u53d8\uff08Validity and Evolution\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"A decoder with validity checking will expend the effort to reliably detect data items with validity errors. For example, such a decoder needs to have an API that reports an error (and does not return data) for a CBOR data item that contains any of the validity errors listed in the previous subsection."),(0,i.kt)("p",null,'The set of tags defined in the "Concise Binary Object Representation (CBOR) Tags" registry (Section 9.2), as well as the set of simple values defined in the "Concise Binary Object Representation (CBOR) Simple Values" registry (Section 9.1), can grow at any time beyond the set understood by a generic decoder. A validity-checking decoder can do one of two things when it encounters such a case that it does not recognize:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It can report an error (and not return data). Note that treating this case as an error can cause ossification and is thus not encouraged. This error is not a validity error, per se. This kind of error is more likely to be raised by a decoder that would be performing validity checking if this were a known case."),(0,i.kt)("li",{parentName:"ul"},"It can emit the unknown item (type, value, and, for tags, the decoded tagged data item) to the application calling the decoder, and then give the application an indication that the decoder did not recognize that tag number or simple value.")),(0,i.kt)("p",null,"The latter approach, which is also appropriate for decoders that do not support validity checking, provides forward compatibility with newly registered tags and simple values without the requirement to update the encoder at the same time as the calling application. (For this, the decoder's API needs the ability to mark unknown items so that the calling application can handle them in a manner appropriate for the program.)"),(0,i.kt)("p",null,"Since some of the processing needed for validity checking may have an appreciable cost (in particular with duplicate detection for maps), support of validity checking is not a requirement placed on all CBOR decoders."),(0,i.kt)("p",null,"Some encoders will rely on their applications to provide input data in such a way that valid CBOR results from the encoder. A generic encoder may also want to provide a validity-checking mode where it reliably limits its output to valid CBOR, independent of whether or not its application is indeed providing API-conformant data.")),(0,i.kt)("p",null,"\u5177\u6709\u6709\u6548\u6027\u68c0\u67e5\u7684\u89e3\u7801\u5668\u5c06\u4ed8\u51fa\u52aa\u529b\u53ef\u9760\u5730\u68c0\u6d4b\u5177\u6709\u6709\u6548\u6027\u9519\u8bef\u7684\u6570\u636e\u9879\u3002\u4f8b\u5982\uff0c\u8fd9\u6837\u7684\u89e3\u7801\u5668\u9700\u8981\u5177\u6709\u4e00\u4e2a API\uff0c\u8be5 API \u5bf9\u4e8e\u5305\u542b\u524d\u4e00\u5b50\u6bb5\u4e2d\u5217\u51fa\u7684\u4efb\u4f55\u6709\u6548\u6027\u9519\u8bef\u7684 CBOR \u6570\u636e\u9879\u62a5\u544a\u9519\u8bef\uff08\u5e76\u4e14\u4e0d\u8fd4\u56de\u6570\u636e\uff09\u3002"),(0,i.kt)("p",null,"\u5728\u201c\u7b80\u660e\u4e8c\u8fdb\u5236\u5bf9\u8c61\u8868\u793a\uff08CBOR\uff09\u6807\u7b7e\u201d\u6ce8\u518c\u8868\uff08\u7b2c 9.2 \u8282\uff09\u4e2d\u5b9a\u4e49\u7684\u6807\u7b7e\u96c6\u5408\uff0c\u4ee5\u53ca\u5728\u201c\u7b80\u660e\u4e8c\u8fdb\u5236\u5bf9\u8c61\u8868\u793a\uff08CBOR\uff09\u7b80\u5355\u503c\u201d\u6ce8\u518c\u8868\uff08\u7b2c 9.1 \u8282\uff09\u4e2d\u5b9a\u4e49\u7684\u7b80\u5355\u503c\u96c6\u5408\uff0c\u53ef\u80fd\u968f\u65f6\u8d85\u51fa\u901a\u7528\u89e3\u7801\u5668\u6240\u7406\u89e3\u7684\u96c6\u5408\u3002\u5728\u9047\u5230\u8fd9\u6837\u4e00\u4e2a\u5b83\u65e0\u6cd5\u8bc6\u522b\u7684\u60c5\u51b5\u65f6\uff0c\u5177\u6709\u6709\u6548\u6027\u68c0\u67e5\u7684\u89e3\u7801\u5668\u53ef\u4ee5\u505a\u4ee5\u4e0b\u4e24\u4ef6\u4e8b\u4e4b\u4e00\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5b83\u53ef\u4ee5\u62a5\u544a\u9519\u8bef\uff08\u5e76\u4e14\u4e0d\u8fd4\u56de\u6570\u636e\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u5c06\u6b64\u60c5\u51b5\u89c6\u4e3a\u9519\u8bef\u53ef\u80fd\u4f1a\u5bfc\u81f4\u50f5\u5316\uff0c\u56e0\u6b64\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\u3002\u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u4e2a\u9519\u8bef\u4e0d\u662f\u6709\u6548\u6027\u9519\u8bef\u3002\u8fd9\u79cd\u9519\u8bef\u66f4\u6709\u53ef\u80fd\u7531\u5728\u8fd9\u662f\u5df2\u77e5\u60c5\u51b5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u6709\u6548\u6027\u68c0\u67e5\u7684\u89e3\u7801\u5668\u5f15\u53d1\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5b83\u53ef\u4ee5\u5c06\u672a\u77e5\u6570\u636e\u9879\uff08\u7c7b\u578b\u3001\u503c\u548c\u5bf9\u4e8e\u6807\u7b7e\uff0c\u89e3\u7801\u7684\u5e26\u6807\u7b7e\u6570\u636e\u9879\uff09\u53d1\u9001\u7ed9\u8c03\u7528\u89e3\u7801\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u7136\u540e\u5411\u5e94\u7528\u7a0b\u5e8f\u63d0\u793a\u89e3\u7801\u5668\u6ca1\u6709\u8bc6\u522b\u5230\u8be5\u6807\u7b7e\u53f7\u6216\u7b80\u5355\u503c\u3002")),(0,i.kt)("p",null,"\u540e\u4e00\u79cd\u65b9\u6cd5\uff0c\u4e5f\u9002\u7528\u4e8e\u4e0d\u652f\u6301\u6709\u6548\u6027\u68c0\u67e5\u7684\u89e3\u7801\u5668\uff0c\u4e3a\u65b0\u6ce8\u518c\u7684\u6807\u7b7e\u548c\u7b80\u5355\u503c\u63d0\u4f9b\u5411\u524d\u517c\u5bb9\u6027\uff0c\u65e0\u9700\u5728\u8c03\u7528\u5e94\u7528\u7a0b\u5e8f\u540c\u65f6\u66f4\u65b0\u7f16\u7801\u5668\u3002\uff08\u4e3a\u6b64\uff0c\u89e3\u7801\u5668\u7684 API \u9700\u8981\u6807\u8bb0\u672a\u77e5\u6570\u636e\u9879\u7684\u80fd\u529b\uff0c\u4ee5\u4fbf\u8c03\u7528\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4ee5\u9002\u5408\u7a0b\u5e8f\u7684\u65b9\u5f0f\u5904\u7406\u5b83\u4eec\u3002\uff09"),(0,i.kt)("p",null,"\u7531\u4e8e\u6709\u6548\u6027\u68c0\u67e5\u6240\u9700\u7684\u67d0\u4e9b\u5904\u7406\u53ef\u80fd\u5177\u6709\u53ef\u89c2\u7684\u6210\u672c\uff08\u5c24\u5176\u662f\u5bf9\u4e8e\u6620\u5c04\u7684\u91cd\u590d\u68c0\u6d4b\uff09\uff0c\u56e0\u6b64\u6709\u6548\u6027\u68c0\u67e5\u7684\u652f\u6301\u5e76\u4e0d\u662f\u5bf9\u6240\u6709 CBOR \u89e3\u7801\u5668\u7684\u8981\u6c42\u3002"),(0,i.kt)("p",null,"\u4e00\u4e9b\u7f16\u7801\u5668\u5c06\u4f9d\u8d56\u5176\u5e94\u7528\u7a0b\u5e8f\u4ee5\u8fd9\u6837\u4e00\u79cd\u65b9\u5f0f\u63d0\u4f9b\u8f93\u5165\u6570\u636e\uff0c\u4ee5\u4f7f\u7f16\u7801\u5668\u4ea7\u751f\u6709\u6548\u7684 CBOR\u3002\u901a\u7528\u7f16\u7801\u5668\u8fd8\u53ef\u80fd\u5e0c\u671b\u63d0\u4f9b\u4e00\u4e2a\u6709\u6548\u6027\u68c0\u67e5\u6a21\u5f0f\uff0c\u5176\u4e2d\u5b83\u53ef\u9760\u5730\u5c06\u5176\u8f93\u51fa\u9650\u5236\u4e3a\u6709\u6548\u7684 CBOR\uff0c\u65e0\u8bba\u5176\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u786e\u5b9e\u63d0\u4f9b\u7b26\u5408 API \u7684\u6570\u636e\u3002"),(0,i.kt)("h3",{id:"55-\u6570\u5b57numbers"},"5.5. \u6570\u5b57\uff08Numbers\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"CBOR-based protocols should take into account that different language environments pose different restrictions on the range and precision of numbers that are representable. For example, the basic JavaScript number system treats all numbers as floating-point values, which may result in the silent loss of precision in decoding integers with more than 53 significant bits. Another example is that, since CBOR keeps the sign bit for its integer representation in the major type, it has one bit more for signed numbers of a certain length (e.g., -2^64..2^64-1 for 1+8-byte integers) than the typical platform signed integer representation of the same length (-2^63..2^63-1 for 8-byte int64_t). A protocol that uses numbers should define its expectations on the handling of nontrivial numbers in decoders and receiving applications."),(0,i.kt)("p",null,"A CBOR-based protocol that includes floating-point numbers can restrict which of the three formats (half-precision, single-precision, and double-precision) are to be supported. For an integer-only application, a protocol may want to completely exclude the use of floating-point values."),(0,i.kt)("p",null,'A CBOR-based protocol designed for compactness may want to exclude specific integer encodings that are longer than necessary for the application, such as to save the need to implement 64-bit integers. There is an expectation that encoders will use the most compact integer representation that can represent a given value. However, a compact application that does not require deterministic encoding should accept values that use a longer-than-needed encoding (such as encoding "0" as 0b000_11001 followed by two bytes of 0x00) as long as the application can decode an integer of the given size. Similar considerations apply to floating-point values; decoding both preferred serializations and longer-than-needed ones is recommended.'),(0,i.kt)("p",null,"CBOR-based protocols for constrained applications that provide a choice between representing a specific number as an integer and as a decimal fraction or bigfloat (such as when the exponent is small and nonnegative) might express a quality-of-implementation expectation that the integer representation is used directly.")),(0,i.kt)("p",null,"\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u5e94\u8003\u8651\u5230\u4e0d\u540c\u7684\u8bed\u8a00\u73af\u5883\u5bf9\u53ef\u8868\u793a\u6570\u5b57\u7684\u8303\u56f4\u548c\u7cbe\u5ea6\u65bd\u52a0\u4e86\u4e0d\u540c\u7684\u9650\u5236\u3002\u4f8b\u5982\uff0c\u57fa\u672c\u7684 JavaScript \u6570\u5b57\u7cfb\u7edf\u5c06\u6240\u6709\u6570\u5b57\u89c6\u4e3a\u6d6e\u70b9\u503c\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5728\u89e3\u7801\u5177\u6709\u8d85\u8fc7 53 \u4e2a\u6709\u6548\u4f4d\u7684\u6574\u6570\u65f6\u9759\u9ed8\u5730\u5931\u53bb\u7cbe\u5ea6\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\uff0c\u7531\u4e8e CBOR \u4e3a\u5176\u6574\u6570\u8868\u793a\u4fdd\u7559\u4e86\u4e3b\u8981\u7c7b\u578b\u4e2d\u7684\u7b26\u53f7\u4f4d\uff0c\u5b83\u5bf9\u4e8e\u67d0\u4e2a\u957f\u5ea6\u7684\u6709\u7b26\u53f7\u6570\uff08\u4f8b\u5982\uff0c1+8 \u5b57\u8282\u6574\u6570\u7684 -2^64..2^64-1\uff09\u6bd4\u76f8\u540c\u957f\u5ea6\u7684\u5178\u578b\u5e73\u53f0\u6709\u7b26\u53f7\u6574\u6570\u8868\u793a\uff088 \u5b57\u8282 int64_t \u7684 -2^63..2^63-1\uff09\u591a\u4e00\u4e2a\u4f4d\u3002\u4f7f\u7528\u6570\u5b57\u7684\u534f\u8bae\u5e94\u8be5\u5b9a\u4e49\u5176\u5bf9\u89e3\u7801\u5668\u548c\u63a5\u6536\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5904\u7406\u975e\u5e73\u51e1\u6570\u5b57\u7684\u671f\u671b\u3002"),(0,i.kt)("p",null,"\u5305\u542b\u6d6e\u70b9\u6570\u7684\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u53ef\u4ee5\u9650\u5236\u652f\u6301\u54ea\u79cd\u683c\u5f0f\uff08\u534a\u7cbe\u5ea6\u3001\u5355\u7cbe\u5ea6\u548c\u53cc\u7cbe\u5ea6\uff09\u3002\u5bf9\u4e8e\u4ec5\u6574\u6570\u5e94\u7528\u7a0b\u5e8f\uff0c\u534f\u8bae\u53ef\u80fd\u5e0c\u671b\u5b8c\u5168\u6392\u9664\u4f7f\u7528\u6d6e\u70b9\u503c\u3002"),(0,i.kt)("p",null,"\u8bbe\u8ba1\u7528\u4e8e\u7d27\u51d1\u6027\u7684\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u53ef\u80fd\u5e0c\u671b\u6392\u9664\u5bf9\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u8fc7\u957f\u7684\u7279\u5b9a\u6574\u6570\u7f16\u7801\uff0c\u4f8b\u5982\u4e3a\u4e86\u8282\u7701\u5b9e\u73b0 64 \u4f4d\u6574\u6570\u7684\u9700\u6c42\u3002\u6709\u4e00\u79cd\u671f\u671b\uff0c\u7f16\u7801\u5668\u5c06\u4f7f\u7528\u6700\u7d27\u51d1\u7684\u6574\u6570\u8868\u793a\u6765\u8868\u793a\u7ed9\u5b9a\u7684\u503c\u3002\u7136\u800c\uff0c\u4e00\u4e2a\u7d27\u51d1\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u679c\u4e0d\u9700\u8981\u786e\u5b9a\u6027\u7f16\u7801\uff0c\u5e94\u8be5\u63a5\u53d7\u4f7f\u7528\u6bd4\u6240\u9700\u66f4\u957f\u7684\u7f16\u7801\u7684\u503c\uff08\u4f8b\u5982\uff0c\u5c06\u201c0\u201d\u7f16\u7801\u4e3a 0b000_11001\uff0c\u540e\u9762\u8ddf\u4e24\u4e2a\u5b57\u8282\u7684 0x00\uff09\uff0c\u53ea\u8981\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u89e3\u7801\u7ed9\u5b9a\u5927\u5c0f\u7684\u6574\u6570\u3002\u7c7b\u4f3c\u7684\u8003\u8651\u9002\u7528\u4e8e\u6d6e\u70b9\u503c\uff1b\u5efa\u8bae\u89e3\u7801\u9996\u9009\u5e8f\u5217\u5316\u548c\u6bd4\u6240\u9700\u66f4\u957f\u7684\u5e8f\u5217\u5316\u3002"),(0,i.kt)("p",null,"\u4e3a\u53d7\u9650\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5728\u5c06\u7279\u5b9a\u6570\u5b57\u8868\u793a\u4e3a\u6574\u6570\u548c\u5c0f\u6570\u6216\u5927\u6d6e\u70b9\u6570\uff08\u4f8b\u5982\uff0c\u5f53\u6307\u6570\u5f88\u5c0f\u4e14\u4e3a\u975e\u8d1f\u6570\u65f6\uff09\u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\u7684\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u53ef\u80fd\u8868\u8fbe\u4e86\u4e00\u79cd\u5b9e\u73b0\u8d28\u91cf\u7684\u671f\u671b\uff0c\u5373\u76f4\u63a5\u4f7f\u7528\u6574\u6570\u8868\u793a\u3002"),(0,i.kt)("h3",{id:"56-\u4e3a\u6620\u5c04\u6307\u5b9a\u952especifying-keys-for-maps"},"5.6. \u4e3a\u6620\u5c04\u6307\u5b9a\u952e\uff08Specifying Keys for Maps\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"The encoding and decoding applications need to agree on what types of keys are going to be used in maps. In applications that need to interwork with JSON-based applications, conversion is simplified by limiting keys to text strings only; otherwise, there has to be a specified mapping from the other CBOR types to text strings, and this often leads to implementation errors. In applications where keys are numeric in nature, and numeric ordering of keys is important to the application, directly using the numbers for the keys is useful."),(0,i.kt)("p",null,"If multiple types of keys are to be used, consideration should be given to how these types would be represented in the specific programming environments that are to be used. For example, in JavaScript Maps ",(0,i.kt)("a",{parentName:"p",href:"https://www.ecma-international.org/publications/standards/Ecma-262.htm"},"ECMA262"),", a key of integer 1 cannot be distinguished from a key of floating-point 1.0. This means that, if integer keys are used, the protocol needs to avoid the use of floating-point keys the values of which happen to be integer numbers in the same map."),(0,i.kt)("p",null,'Decoders that deliver data items nested within a CBOR data item immediately on decoding them ("streaming decoders") often do not keep the state that is necessary to ascertain uniqueness of a key in a map. Similarly, an encoder that can start encoding data items before the enclosing data item is completely available ("streaming encoder") may want to reduce its overhead significantly by relying on its data source to maintain uniqueness.'),(0,i.kt)("p",null,"A CBOR-based protocol MUST define what to do when a receiving application sees multiple identical keys in a map. The resulting rule in the protocol MUST respect the CBOR data model: it cannot prescribe a specific handling of the entries with the identical keys, except that it might have a rule that having identical keys in a map indicates a malformed map and that the decoder has to stop with an error. When processing maps that exhibit entries with duplicate keys, a generic decoder might do one of the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Not accept maps with duplicate keys (that is, enforce validity for maps, see also Section 5.4). These generic decoders are universally useful. An application may still need to perform its own duplicate checking based on application rules (for instance, if the application equates integers and floating-point values in map key positions for specific maps)."),(0,i.kt)("li",{parentName:"ul"},"Pass all map entries to the application, including ones with duplicate keys. This requires that the application handle (check against) duplicate keys, even if the application rules are identical to the generic data model rules."),(0,i.kt)("li",{parentName:"ul"},"Lose some entries with duplicate keys, e.g., deliver only the final (or first) entry out of the entries with the same key. With such a generic decoder, applications may get different results for a specific key on different runs, and with different generic decoders, which value is returned is based on generic decoder implementation and the actual order of keys in the map. In particular, applications cannot validate key uniqueness on their own as they do not necessarily see all entries; they may not be able to use such a generic decoder if they need to validate key uniqueness. These generic decoders can only be used in situations where the data source and transfer always provide valid maps; this is not possible if the data source and transfer can be attacked.")),(0,i.kt)("p",null,"Generic decoders need to document which of these three approaches they implement."),(0,i.kt)("p",null,"The CBOR data model for maps does not allow ascribing semantics to the order of the key/value pairs in the map representation. Thus, a CBOR-based protocol MUST NOT specify that changing the key/value pair order in a map changes the semantics, except to specify that some orders are disallowed, for example, where they would not meet the requirements of a deterministic encoding (Section 4.2). (Any secondary effects of map ordering such as on timing, cache usage, and other potential side channels are not considered part of the semantics but may be enough reason on their own for a protocol to require a deterministic encoding format.)"),(0,i.kt)("p",null,"Applications for constrained devices should consider using small integers as keys if they have maps with a small number of frequently used keys; for instance, a set of 24 or fewer keys can be encoded in a single byte as unsigned integers, up to 48 if negative integers are also used. Less frequently occurring keys can then use integers with longer encodings.")),(0,i.kt)("p",null,"\u7f16\u7801\u548c\u89e3\u7801\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5c31\u6620\u5c04\u4e2d\u8981\u4f7f\u7528\u7684\u952e\u7684\u7c7b\u578b\u8fbe\u6210\u4e00\u81f4\u3002\u5728\u9700\u8981\u4e0e\u57fa\u4e8e JSON \u7684\u5e94\u7528\u7a0b\u5e8f\u4e92\u64cd\u4f5c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4ec5\u5c06\u952e\u9650\u5236\u4e3a\u6587\u672c\u4e32\u53ef\u7b80\u5316\u8f6c\u6362\uff1b\u5426\u5219\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u4ece\u5176\u4ed6 CBOR \u7c7b\u578b\u5230\u6587\u672c\u4e32\u7684\u6307\u5b9a\u6620\u5c04\uff0c\u8fd9\u901a\u5e38\u4f1a\u5bfc\u81f4\u5b9e\u73b0\u9519\u8bef\u3002\u5728\u952e\u672c\u8d28\u4e0a\u662f\u6570\u5b57\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5e76\u4e14\u952e\u7684\u6570\u5b57\u987a\u5e8f\u5bf9\u5e94\u7528\u7a0b\u5e8f\u5f88\u91cd\u8981\u65f6\uff0c\u76f4\u63a5\u4f7f\u7528\u6570\u5b57\u4f5c\u4e3a\u952e\u662f\u6709\u7528\u7684\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u8981\u4f7f\u7528\u591a\u79cd\u7c7b\u578b\u7684\u952e\uff0c\u5e94\u8003\u8651\u5728\u8981\u4f7f\u7528\u7684\u7279\u5b9a\u7f16\u7a0b\u73af\u5883\u4e2d\u5982\u4f55\u8868\u793a\u8fd9\u4e9b\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5728 JavaScript Maps ",(0,i.kt)("a",{parentName:"p",href:"https://www.ecma-international.org/publications/standards/Ecma-262.htm"},"ECMA262")," \u4e2d\uff0c\u6574\u6570 1 \u7684\u952e\u65e0\u6cd5\u4e0e\u6d6e\u70b9\u6570 1.0 \u7684\u952e\u533a\u5206\u5f00\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4f7f\u7528\u6574\u6570\u952e\uff0c\u534f\u8bae\u9700\u8981\u907f\u514d\u5728\u540c\u4e00\u4e2a\u6620\u5c04\u4e2d\u4f7f\u7528\u6d6e\u70b9\u952e\uff0c\u800c\u8fd9\u4e9b\u6d6e\u70b9\u952e\u7684\u503c\u78b0\u5de7\u662f\u6574\u6570\u3002"),(0,i.kt)("p",null,'\u5728\u89e3\u7801\u5b83\u4eec\u65f6\u7acb\u5373\u4f20\u9012\u5d4c\u5957\u5728 CBOR \u6570\u636e\u9879\u5185\u90e8\u7684\u6570\u636e\u9879\u7684\u89e3\u7801\u5668\uff08"\u6d41\u5f0f\u89e3\u7801\u5668"\uff09\u901a\u5e38\u65e0\u6cd5\u4fdd\u6301\u786e\u5b9a\u6620\u5c04\u4e2d\u952e\u7684\u552f\u4e00\u6027\u6240\u9700\u7684\u72b6\u6001\u3002\u7c7b\u4f3c\u5730\uff0c\u4e00\u4e2a\u53ef\u4ee5\u5728\u5c01\u88c5\u6570\u636e\u9879\u5b8c\u5168\u53ef\u7528\u4e4b\u524d\u5f00\u59cb\u7f16\u7801\u6570\u636e\u9879\u7684\u7f16\u7801\u5668\uff08"\u6d41\u5f0f\u7f16\u7801\u5668"\uff09\u53ef\u80fd\u5e0c\u671b\u901a\u8fc7\u4f9d\u8d56\u5176\u6570\u636e\u6e90\u6765\u7ef4\u62a4\u552f\u4e00\u6027\uff0c\u4ece\u800c\u663e\u8457\u964d\u4f4e\u5176\u5f00\u9500\u3002'),(0,i.kt)("p",null,"\u4e00\u4e2a\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u5fc5\u987b\uff08MUST\uff09\u5b9a\u4e49\u5728\u63a5\u6536\u5e94\u7528\u7a0b\u5e8f\u5728\u6620\u5c04\u4e2d\u770b\u5230\u591a\u4e2a\u76f8\u540c\u952e\u65f6\u8be5\u5982\u4f55\u5904\u7406\u3002\u534f\u8bae\u4e2d\u7684\u7ed3\u679c\u89c4\u5219\u5fc5\u987b\uff08MUST\uff09\u9075\u5b88 CBOR \u6570\u636e\u6a21\u578b\uff1a\u9664\u4e86\u53ef\u80fd\u6709\u4e00\u4e2a\u89c4\u5219\uff0c\u5373\u6620\u5c04\u4e2d\u5177\u6709\u76f8\u540c\u952e\u8868\u793a\u6620\u5c04\u683c\u5f0f\u9519\u8bef\u5e76\u4e14\u89e3\u7801\u5668\u5fc5\u987b\u505c\u6b62\u5e76\u62a5\u9519\u5916\uff0c\u5b83\u4e0d\u80fd\u89c4\u5b9a\u5bf9\u5177\u6709\u76f8\u540c\u952e\u7684\u6761\u76ee\u7684\u7279\u5b9a\u5904\u7406\u3002\u5728\u5904\u7406\u5177\u6709\u91cd\u590d\u952e\u7684\u6761\u76ee\u7684\u6620\u5c04\u65f6\uff0c\u901a\u7528\u89e3\u7801\u5668\u53ef\u80fd\u4f1a\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4e4b\u4e00\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e0d\u63a5\u53d7\u5177\u6709\u91cd\u590d\u952e\u7684\u6620\u5c04\uff08\u5373\uff0c\u5bf9\u6620\u5c04\u6267\u884c\u6709\u6548\u6027\u68c0\u67e5\uff0c\u53c2\u89c1\u7b2c 5.4 \u8282\uff09\u3002\u8fd9\u4e9b\u901a\u7528\u89e3\u7801\u5668\u5177\u6709\u666e\u904d\u9002\u7528\u6027\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4ecd\u9700\u8981\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u89c4\u5219\u6267\u884c\u81ea\u5df1\u7684\u91cd\u590d\u68c0\u67e5\uff08\u4f8b\u5982\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5c06\u7279\u5b9a\u6620\u5c04\u4e2d\u7684\u6574\u6570\u548c\u6d6e\u70b9\u503c\u89c6\u4e3a\u76f8\u7b49\u7684\u6620\u5c04\u952e\u4f4d\u7f6e\uff09\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5c06\u6240\u6709\u6620\u5c04\u6761\u76ee\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff0c\u5305\u62ec\u5177\u6709\u91cd\u590d\u952e\u7684\u6761\u76ee\u3002\u8fd9\u8981\u6c42\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\uff08\u68c0\u67e5\uff09\u91cd\u590d\u952e\uff0c\u5373\u4f7f\u5e94\u7528\u7a0b\u5e8f\u89c4\u5219\u4e0e\u901a\u7528\u6570\u636e\u6a21\u578b\u89c4\u5219\u76f8\u540c\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u4e22\u5931\u4e00\u4e9b\u5177\u6709\u91cd\u590d\u952e\u7684\u6761\u76ee\uff0c\u4f8b\u5982\uff0c\u53ea\u4f20\u9012\u5177\u6709\u76f8\u540c\u952e\u7684\u6761\u76ee\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\uff08\u6216\u7b2c\u4e00\u4e2a\uff09\u6761\u76ee\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u901a\u7528\u89e3\u7801\u5668\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u8fd0\u884c\u548c\u4e0d\u540c\u7684\u901a\u7528\u89e3\u7801\u5668\u4e0a\u9488\u5bf9\u7279\u5b9a\u952e\u83b7\u5f97\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u54ea\u4e2a\u503c\u88ab\u8fd4\u56de\u53d6\u51b3\u4e8e\u901a\u7528\u89e3\u7801\u5668\u7684\u5b9e\u73b0\u548c\u6620\u5c04\u4e2d\u952e\u7684\u5b9e\u9645\u987a\u5e8f\u3002\u7279\u522b\u662f\uff0c\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u9a8c\u8bc1\u952e\u7684\u552f\u4e00\u6027\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4e00\u5b9a\u80fd\u770b\u5230\u6240\u6709\u6761\u76ee\uff1b\u5982\u679c\u5b83\u4eec\u9700\u8981\u9a8c\u8bc1\u952e\u7684\u552f\u4e00\u6027\uff0c\u53ef\u80fd\u65e0\u6cd5\u4f7f\u7528\u8fd9\u79cd\u901a\u7528\u89e3\u7801\u5668\u3002\u8fd9\u4e9b\u901a\u7528\u89e3\u7801\u5668\u53ea\u80fd\u5728\u6570\u636e\u6e90\u548c\u4f20\u8f93\u59cb\u7ec8\u63d0\u4f9b\u6709\u6548\u6620\u5c04\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff1b\u5982\u679c\u6570\u636e\u6e90\u548c\u4f20\u8f93\u53ef\u80fd\u53d7\u5230\u653b\u51fb\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002")),(0,i.kt)("p",null,"\u901a\u7528\u89e3\u7801\u5668\u9700\u8981\u8bb0\u5f55\u5b83\u4eec\u5b9e\u73b0\u4e86\u8fd9\u4e09\u79cd\u65b9\u6cd5\u4e2d\u7684\u54ea\u4e00\u79cd\u3002"),(0,i.kt)("p",null,"CBOR \u6570\u636e\u6a21\u578b\u5bf9\u4e8e\u6620\u5c04\u4e0d\u5141\u8bb8\u8d4b\u4e88\u6620\u5c04\u8868\u793a\u4e2d\u952e/\u503c\u5bf9\u987a\u5e8f\u7684\u8bed\u4e49\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u4e0d\u80fd\uff08MUST NOT\uff09\u89c4\u5b9a\u66f4\u6539\u6620\u5c04\u4e2d\u7684\u952e/\u503c\u5bf9\u987a\u5e8f\u4f1a\u6539\u53d8\u8bed\u4e49\uff0c\u9664\u975e\u6307\u5b9a\u67d0\u4e9b\u987a\u5e8f\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u4f8b\u5982\uff0c\u5b83\u4eec\u4e0d\u7b26\u5408\u786e\u5b9a\u6027\u7f16\u7801\uff08\u7b2c 4.2 \u8282\uff09\u7684\u8981\u6c42\u3002\uff08\u6620\u5c04\u6392\u5e8f\u7684\u4efb\u4f55\u6b21\u8981\u5f71\u54cd\uff0c\u5982\u5bf9\u8ba1\u65f6\u3001\u7f13\u5b58\u4f7f\u7528\u548c\u5176\u4ed6\u6f5c\u5728\u7684\u4fa7\u4fe1\u9053\u7684\u5f71\u54cd\uff0c\u90fd\u4e0d\u89c6\u4e3a\u8bed\u4e49\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u53ef\u80fd\u662f\u534f\u8bae\u8981\u6c42\u786e\u5b9a\u6027\u7f16\u7801\u683c\u5f0f\u7684\u5145\u5206\u7406\u7531\u3002\uff09"),(0,i.kt)("p",null,"\u9762\u5411\u53d7\u9650\u8bbe\u5907\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u5177\u6709\u5c11\u91cf\u9891\u7e41\u4f7f\u7528\u7684\u952e\u7684\u6620\u5c04\u4e2d\uff0c\u5e94\u8003\u8651\u4f7f\u7528\u8f83\u5c0f\u7684\u6574\u6570\u4f5c\u4e3a\u952e\uff1b\u4f8b\u5982\uff0c\u4e00\u7ec4 24 \u4e2a\u6216\u66f4\u5c11\u7684\u952e\u53ef\u4ee5\u4f5c\u4e3a\u975e\u8d1f\u6574\u6570\u4f7f\u7528\u5355\u4e2a\u5b57\u8282\u8fdb\u884c\u7f16\u7801\uff0c\u5982\u679c\u8fd8\u4f7f\u7528\u8d1f\u6574\u6570\uff0c\u5219\u6700\u591a\u53ef\u4ee5\u8fbe\u5230 48 \u4e2a\u3002\u8f83\u5c11\u51fa\u73b0\u7684\u952e\u53ef\u4ee5\u4f7f\u7528\u7f16\u7801\u8f83\u957f\u7684\u6574\u6570\u3002"),(0,i.kt)("h4",{id:"561-\u952e\u7684\u7b49\u4ef7\u6027equivalence-of-keys"},"5.6.1. \u952e\u7684\u7b49\u4ef7\u6027\uff08Equivalence of Keys\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"The specific data model that applies to a CBOR data item is used to determine whether keys occurring in maps are duplicates or distinct."),(0,i.kt)("p",null,"At the generic data model level, numerically equivalent integer and floating-point values are distinct from each other, as they are from the various big numbers (Tags 2 to 5). Similarly, text strings are distinct from byte strings, even if composed of the same bytes. A tagged value is distinct from an untagged value or from a value tagged with a different tag number."),(0,i.kt)("p",null,"Within each of these groups, numeric values are distinct unless they are numerically equal (specifically, -0.0 is equal to 0.0); for the purpose of map key equivalence, NaN values are equivalent if they have the same significand after zero-extending both significands at the right to 64 bits."),(0,i.kt)("p",null,"Both byte strings and text strings are compared byte by byte, arrays are compared element by element, and are equal if they have the same number of bytes/elements and the same values at the same positions. Two maps are equal if they have the same set of pairs regardless of their order; pairs are equal if both the key and value are equal."),(0,i.kt)("p",null,"Tagged values are equal if both the tag number and the tag content are equal. (Note that a generic decoder that provides processing for a specific tag may not be able to distinguish some semantically equivalent values, e.g., if leading zeroes occur in the content of tag 2 or tag 3 (Section 3.4.3).) Simple values are equal if they simply have the same value. Nothing else is equal in the generic data model; a simple value 2 is not equivalent to an integer 2, and an array is never equivalent to a map."),(0,i.kt)("p",null,"As discussed in Section 2.2, specific data models can make values equivalent for the purpose of comparing map keys that are distinct in the generic data model. Note that this implies that a generic decoder may deliver a decoded map to an application that needs to be checked for duplicate map keys by that application (alternatively, the decoder may provide a programming interface to perform this service for the application). Specific data models are not able to distinguish values for map keys that are equal for this purpose at the generic data model level.")),(0,i.kt)("p",null,"\u9002\u7528\u4e8e CBOR \u6570\u636e\u9879\u7684\u7279\u5b9a\u6570\u636e\u6a21\u578b\u7528\u4e8e\u786e\u5b9a\u6620\u5c04\u4e2d\u51fa\u73b0\u7684\u952e\u662f\u91cd\u590d\u7684\u8fd8\u662f\u4e0d\u540c\u7684\u3002"),(0,i.kt)("p",null,"\u5728\u901a\u7528\u6570\u636e\u6a21\u578b\u5c42\u9762\u4e0a\uff0c\u6570\u503c\u4e0a\u7b49\u4ef7\u7684\u6574\u6570\u548c\u6d6e\u70b9\u503c\u5f7c\u6b64\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u5c31\u50cf\u5b83\u4eec\u4e0e\u5404\u79cd\u5927\u6570\uff08\u6807\u7b7e 2 \u5230 5\uff09\u4e4b\u95f4\u7684\u5173\u7cfb\u4e00\u6837\u3002\u540c\u6837\uff0c\u6587\u672c\u4e32\u4e0e\u5b57\u8282\u4e32\u662f\u4e0d\u540c\u7684\uff0c\u5373\u4f7f\u5b83\u4eec\u7531\u76f8\u540c\u7684\u5b57\u8282\u7ec4\u6210\u3002\u5e26\u6807\u7b7e\u7684\u503c\u4e0d\u540c\u4e8e\u672a\u6807\u8bb0\u7684\u503c\u6216\u5e26\u6709\u4e0d\u540c\u6807\u7b7e\u7f16\u53f7\u7684\u503c\u3002"),(0,i.kt)("p",null,"\u5728\u8fd9\u4e9b\u7ec4\u4e2d\uff0c\u6570\u503c\u662f\u4e0d\u540c\u7684\uff0c\u9664\u975e\u5b83\u4eec\u5728\u6570\u503c\u4e0a\u76f8\u7b49\uff08\u5177\u4f53\u800c\u8a00\uff0c-0.0 \u7b49\u4e8e 0.0\uff09\uff1b\u5bf9\u4e8e\u6620\u5c04\u952e\u7b49\u4ef7\u7684\u76ee\u7684\uff0c\u5982\u679c\u4e24\u4e2a NaN \u503c\u7684\u5c3e\u6570\u5728\u53f3\u8fb9\u90fd\u6269\u5c55\u5230 64 \u4f4d\u540e\u5177\u6709\u76f8\u540c\u7684\u5c3e\u6570\uff0c\u5219\u5b83\u4eec\u662f\u7b49\u4ef7\u7684\u3002"),(0,i.kt)("p",null,"\u5b57\u8282\u4e32\u548c\u6587\u672c\u4e32\u6309\u5b57\u8282\u9010\u4e2a\u8fdb\u884c\u6bd4\u8f83\uff0c\u6570\u7ec4\u6309\u5143\u7d20\u9010\u4e2a\u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u4e14\u5982\u679c\u5b83\u4eec\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u5b57\u8282/\u5143\u7d20\u4ee5\u53ca\u76f8\u540c\u4f4d\u7f6e\u7684\u76f8\u540c\u503c\uff0c\u5219\u5b83\u4eec\u76f8\u7b49\u3002\u4e24\u4e2a\u6620\u5c04\u76f8\u7b49\uff0c\u5982\u679c\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u952e\u503c\u5bf9\u96c6\u5408\uff0c\u800c\u4e0d\u8003\u8651\u5b83\u4eec\u7684\u987a\u5e8f\uff1b\u5982\u679c\u952e\u548c\u503c\u90fd\u76f8\u7b49\uff0c\u5219\u952e\u503c\u5bf9\u76f8\u7b49\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u6807\u7b7e\u7f16\u53f7\u548c\u6807\u7b7e\u5185\u5bb9\u90fd\u76f8\u7b49\uff0c\u5219\u5e26\u6807\u7b7e\u7684\u503c\u76f8\u7b49\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u4e3a\u7279\u5b9a\u6807\u7b7e\u63d0\u4f9b\u5904\u7406\u7684\u901a\u7528\u89e3\u7801\u5668\u53ef\u80fd\u65e0\u6cd5\u533a\u5206\u67d0\u4e9b\u8bed\u4e49\u4e0a\u7b49\u4ef7\u7684\u503c\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u6807\u7b7e 2 \u6216\u6807\u7b7e 3\uff08\u7b2c 3.4.3 \u8282\uff09\u7684\u5185\u5bb9\u4e2d\u51fa\u73b0\u524d\u5bfc\u96f6\u3002\uff09\u7b80\u5355\u503c\u76f8\u7b49\uff0c\u5982\u679c\u5b83\u4eec\u53ea\u662f\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\u5728\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\uff0c\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u90fd\u4e0d\u76f8\u7b49\uff1b\u7b80\u5355\u503c 2 \u4e0d\u7b49\u4e8e\u6574\u6570 2\uff0c\u6570\u7ec4\u6c38\u8fdc\u4e0d\u7b49\u4e8e\u6620\u5c04\u3002"),(0,i.kt)("p",null,"\u5982\u7b2c 2.2 \u8282\u6240\u8ba8\u8bba\u7684\uff0c\u7279\u5b9a\u6570\u636e\u6a21\u578b\u53ef\u4ee5\u4f7f\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u4e0d\u540c\u7684\u6620\u5c04\u952e\u7684\u503c\u7b49\u4ef7\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740\u901a\u7528\u89e3\u7801\u5668\u53ef\u80fd\u4f1a\u5c06\u89e3\u7801\u540e\u7684\u6620\u5c04\u4ea4\u4ed8\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u8be5\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u68c0\u67e5\u91cd\u590d\u7684\u6620\u5c04\u952e\uff08\u6216\u8005\uff0c\u89e3\u7801\u5668\u53ef\u4ee5\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6267\u884c\u6b64\u670d\u52a1\u7684\u7f16\u7a0b\u63a5\u53e3\uff09\u3002\u7279\u5b9a\u6570\u636e\u6a21\u578b\u65e0\u6cd5\u533a\u5206\u5728\u901a\u7528\u6570\u636e\u6a21\u578b\u5c42\u9762\u4e0a\u5177\u6709\u76f8\u540c\u76ee\u7684\u7684\u6620\u5c04\u952e\u7684\u503c\u3002"),(0,i.kt)("h3",{id:"57-undefined-\u503cundefined-values"},"5.7. Undefined \u503c\uff08Undefined Values\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"In some CBOR-based protocols, the simple value (Section 3.3) of undefined might be used by an encoder as a substitute for a data item with an encoding problem, in order to allow the rest of the enclosing data items to be encoded without harm.")),(0,i.kt)("p",null,"\u5728\u67d0\u4e9b\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u4e2d\uff0c\u7b80\u5355\u503c\uff08\u7b2c 3.3 \u8282\uff09\u4e2d\u7684 undefined \u503c\uff08\u7f16\u7801\u4e3a 0xf7\uff09\u53ef\u80fd\u88ab\u7f16\u7801\u5668\u7528\u4f5c\u5177\u6709\u7f16\u7801\u95ee\u9898\u7684\u6570\u636e\u9879\u7684\u66ff\u4ee3\u54c1\uff0c\u4ee5\u4fbf\u5141\u8bb8\u5bf9\u5305\u542b\u7684\u5176\u4ed6\u6570\u636e\u9879\u8fdb\u884c\u65e0\u635f\u5bb3\u7684\u7f16\u7801\u3002"),(0,i.kt)("h2",{id:"6-\u5728-cbor-\u548c-json-\u4e4b\u95f4\u8f6c\u6362\u6570\u636econverting-data-between-cbor-and-json"},"6. \u5728 CBOR \u548c JSON \u4e4b\u95f4\u8f6c\u6362\u6570\u636e\uff08Converting Data between CBOR and JSON\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"This section gives non-normative advice about converting between CBOR and JSON. Implementations of converters MAY use whichever advice here they want."),(0,i.kt)("p",null,"It is worth noting that a JSON text is a sequence of characters, not an encoded sequence of bytes, while a CBOR data item consists of bytes, not characters.")),(0,i.kt)("p",null,"\u672c\u8282\u63d0\u4f9b\u5173\u4e8e\u5728 CBOR \u548c JSON \u4e4b\u95f4\u8f6c\u6362\u7684\u975e\u89c4\u8303\u6027\u5efa\u8bae\u3002\u8f6c\u6362\u5668\u7684\u5b9e\u73b0\u53ef\u4ee5\uff08MAY\uff09\u6839\u636e\u9700\u8981\u4f7f\u7528\u6b64\u5904\u7684\u5efa\u8bae\u3002"),(0,i.kt)("p",null,"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cJSON \u6587\u672c\u662f\u5b57\u7b26\u5e8f\u5217\uff0c\u800c\u4e0d\u662f\u7f16\u7801\u7684\u5b57\u8282\u5e8f\u5217\uff0c\u800c CBOR \u6570\u636e\u9879\u7531\u5b57\u8282\u7ec4\u6210\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u3002"),(0,i.kt)("h3",{id:"61-\u4ece-cbor-\u8f6c\u6362\u4e3a-jsonconverting-from-cbor-to-json"},"6.1. \u4ece CBOR \u8f6c\u6362\u4e3a JSON\uff08Converting from CBOR to JSON\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Most of the types in CBOR have direct analogs in JSON. However, some do not, and someone implementing a CBOR-to-JSON converter has to consider what to do in those cases. The following non-normative advice deals with these by converting them to a single substitute value, such as a JSON null."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An integer (major type 0 or 1) becomes a JSON number."),(0,i.kt)("li",{parentName:"ul"},"A byte string (major type 2) that is not embedded in a tag that specifies a proposed encoding is encoded in base64url without padding and becomes a JSON string."),(0,i.kt)("li",{parentName:"ul"},"A UTF-8 string (major type 3) becomes a JSON string. Note that JSON requires escaping certain characters (",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc8259"},"RFC8259"),', Section 7): quotation mark (U+0022), reverse solidus (U+005C), and the "C0 control characters" (U+0000 through U+001F). All other characters are copied unchanged into the JSON UTF-8 string.'),(0,i.kt)("li",{parentName:"ul"},"An array (major type 4) becomes a JSON array."),(0,i.kt)("li",{parentName:"ul"},"A map (major type 5) becomes a JSON object. This is possible directly only if all keys are UTF-8 strings. A converter might also convert other keys into UTF-8 strings (such as by converting integers into strings containing their decimal representation); however, doing so introduces a danger of key collision. Note also that, if tags on UTF-8 strings are ignored as proposed below, this will cause a key collision if the tags are different but the strings are the same."),(0,i.kt)("li",{parentName:"ul"},"False (major type 7, additional information 20) becomes a JSON false."),(0,i.kt)("li",{parentName:"ul"},"True (major type 7, additional information 21) becomes a JSON true."),(0,i.kt)("li",{parentName:"ul"},"Null (major type 7, additional information 22) becomes a JSON null."),(0,i.kt)("li",{parentName:"ul"},"A floating-point value (major type 7, additional information 25 through 27) becomes a JSON number if it is finite (that is, it can be represented in a JSON number); if the value is non-finite (NaN, or positive or negative Infinity), it is represented by the substitute value."),(0,i.kt)("li",{parentName:"ul"},"Any other simple value (major type 7, any additional information value not yet discussed) is represented by the substitute value."),(0,i.kt)("li",{parentName:"ul"},'A bignum (major type 6, tag number 2 or 3) is represented by encoding its byte string in base64url without padding and becomes a JSON string. For tag number 3 (negative bignum), a "~" (ASCII tilde) is inserted before the base-encoded value. (The conversion to a binary blob instead of a number is to prevent a likely numeric overflow for the JSON decoder.)'),(0,i.kt)("li",{parentName:"ul"},"A byte string with an encoding hint (major type 6, tag number 21 through 23) is encoded as described by the hint and becomes a JSON string."),(0,i.kt)("li",{parentName:"ul"},"For all other tags (major type 6, any other tag number), the tag content is represented as a JSON value; the tag number is ignored."),(0,i.kt)("li",{parentName:"ul"},"Indefinite-length items are made definite before conversion.")),(0,i.kt)("p",null,"A CBOR-to-JSON converter may want to keep to the JSON profile I-JSON ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7493"},"RFC7493"),", to maximize interoperability and increase confidence that the JSON output can be processed with predictable results. For example, this has implications on the range of integers that can be represented reliably, as well as on the top-level items that may be supported by older JSON implementations.")),(0,i.kt)("p",null,"CBOR \u4e2d\u7684\u5927\u591a\u6570\u7c7b\u578b\u5728 JSON \u4e2d\u6709\u76f4\u63a5\u5bf9\u5e94\u9879\u3002\u7136\u800c\uff0c\u6709\u4e9b\u7c7b\u578b\u6ca1\u6709\u5bf9\u5e94\u9879\uff0c\u5b9e\u73b0 CBOR \u5230 JSON \u8f6c\u6362\u5668\u7684\u4eba\u9700\u8981\u8003\u8651\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u8be5\u600e\u4e48\u505a\u3002\u4ee5\u4e0b\u975e\u89c4\u8303\u6027\u5efa\u8bae\u901a\u8fc7\u5c06\u8fd9\u4e9b\u7c7b\u578b\u8f6c\u6362\u4e3a\u5355\u4e00\u66ff\u4ee3\u503c\uff08substitute value\uff0c\u5982 JSON null\uff09\u6765\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6574\u6570\uff08\u4e3b\u7c7b\u578b 0 \u6216 1\uff09\u8f6c\u6362\u4e3a JSON \u6570\u5b57\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5b57\u8282\u4e32\uff08\u4e3b\u7c7b\u578b 2\uff09\uff0c\u5982\u679c\u6ca1\u6709\u5d4c\u5957\u5728\u6307\u5b9a\u5efa\u8bae\u7f16\u7801\u7684\u6807\u7b7e\u4e2d\uff0c\u5219\u4ee5\u65e0\u586b\u5145\u7684 base64url \u7f16\u7801\uff0c\u8f6c\u6362\u4e3a JSON \u5b57\u7b26\u4e32\u3002"),(0,i.kt)("li",{parentName:"ul"},"UTF-8 \u5b57\u7b26\u4e32\uff08\u4e3b\u7c7b\u578b 3\uff09\u8f6c\u6362\u4e3a JSON \u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff0cJSON \u9700\u8981\u8f6c\u4e49\u67d0\u4e9b\u5b57\u7b26\uff08",(0,i.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/info/rfc8259"},"RFC8259"),"\uff0c\u7b2c 7 \u8282\uff09\uff1a\u53cc\u5f15\u53f7\uff08U+0022\uff09\u3001\u53cd\u659c\u7ebf\uff08U+005C\uff09\u4ee5\u53ca\u201cC0 \u63a7\u5236\u5b57\u7b26\u201d\uff08U+0000 \u5230 U+001F\uff09\u3002\u6240\u6709\u5176\u4ed6\u5b57\u7b26\u90fd\u539f\u6837\u590d\u5236\u5230 JSON UTF-8 \u5b57\u7b26\u4e32\u4e2d\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u6570\u7ec4\uff08\u4e3b\u7c7b\u578b 4\uff09\u8f6c\u6362\u4e3a JSON \u6570\u7ec4\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u6620\u5c04\uff08\u4e3b\u7c7b\u578b 5\uff09\u8f6c\u6362\u4e3a JSON \u5bf9\u8c61\u3002\u53ea\u6709\u5728\u6240\u6709\u952e\u90fd\u662f UTF-8 \u5b57\u7b26\u4e32\u65f6\u624d\u53ef\u4ee5\u76f4\u63a5\u5b9e\u73b0\u3002\u8f6c\u6362\u5668\u8fd8\u53ef\u4ee5\u5c06\u5176\u4ed6\u952e\u8f6c\u6362\u4e3a UTF-8 \u5b57\u7b26\u4e32\uff08\u4f8b\u5982\uff0c\u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5305\u542b\u5176\u5341\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32\uff09\uff1b\u7136\u800c\uff0c\u8fd9\u6837\u505a\u4f1a\u5f15\u5165\u952e\u51b2\u7a81\u7684\u98ce\u9669\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u50cf\u4e0b\u9762\u5efa\u8bae\u7684\u90a3\u6837\u5ffd\u7565 UTF-8 \u5b57\u7b26\u4e32\u4e0a\u7684\u6807\u7b7e\uff0c\u90a3\u4e48\u5f53\u6807\u7b7e\u4e0d\u540c\u4f46\u5b57\u7b26\u4e32\u76f8\u540c\u65f6\uff0c\u5c06\u5bfc\u81f4\u952e\u51b2\u7a81\u3002"),(0,i.kt)("li",{parentName:"ul"},"False\uff08\u4e3b\u7c7b\u578b 7\uff0c\u9644\u52a0\u4fe1\u606f 20\uff09\u8f6c\u6362\u4e3a JSON false\u3002"),(0,i.kt)("li",{parentName:"ul"},"True\uff08\u4e3b\u7c7b\u578b 7\uff0c\u9644\u52a0\u4fe1\u606f 21\uff09\u8f6c\u6362\u4e3a JSON true\u3002"),(0,i.kt)("li",{parentName:"ul"},"Null\uff08\u4e3b\u7c7b\u578b 7\uff0c\u9644\u52a0\u4fe1\u606f 22\uff09\u8f6c\u6362\u4e3a JSON null\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u6d6e\u70b9\u6570\u503c\uff08\u4e3b\u7c7b\u578b 7\uff0c\u9644\u52a0\u4fe1\u606f 25 \u5230 27\uff09\u5982\u679c\u662f\u6709\u9650\u7684\uff08\u5373\u53ef\u4ee5\u7528 JSON \u6570\u5b57\u8868\u793a\uff09\uff0c\u5219\u8f6c\u6362\u4e3a JSON \u6570\u5b57\uff1b\u5982\u679c\u503c\u662f\u65e0\u9650\u7684\uff08NaN\uff0c\u6216\u6b63\u8d1f\u65e0\u7a77\u5927\uff09\uff0c\u5219\u7528\u66ff\u4ee3\u503c\u8868\u793a\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5176\u4ed6\u4efb\u4f55\u7b80\u5355\u503c\uff08\u4e3b\u7c7b\u578b 7\uff0c\u5c1a\u672a\u8ba8\u8bba\u7684\u4efb\u4f55\u9644\u52a0\u4fe1\u606f\u503c\uff09\u7528\u66ff\u4ee3\u503c\u8868\u793a\u3002"),(0,i.kt)("li",{parentName:"ul"},'\u5927\u6570\uff08\u4e3b\u7c7b\u578b 6\uff0c\u6807\u7b7e\u7f16\u53f7 2 \u6216 3\uff09\u901a\u8fc7\u5bf9\u5176\u5b57\u8282\u4e32\u8fdb\u884c\u65e0\u586b\u5145\u7684 base64url \u7f16\u7801\uff0c\u8f6c\u6362\u4e3a JSON \u5b57\u7b26\u4e32\u3002\u5bf9\u4e8e\u6807\u7b7e\u7f16\u53f7 3\uff08\u8d1f\u5927\u6570\uff09\uff0c\u5728\u57fa\u6570\u7f16\u7801\u503c\u524d\u63d2\u5165 "~"\uff08ASCII \u6ce2\u6d6a\u53f7\uff09\u3002\uff08\u5c06\u5176\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\u636e\u5757\u800c\u4e0d\u662f\u6570\u5b57\uff0c\u662f\u4e3a\u4e86\u9632\u6b62 JSON \u89e3\u7801\u5668\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u503c\u6ea2\u51fa\u3002\uff09'),(0,i.kt)("li",{parentName:"ul"},"\u5e26\u6709\u7f16\u7801\u63d0\u793a\u7684\u5b57\u8282\u4e32\uff08\u4e3b\u7c7b\u578b 6\uff0c\u6807\u7b7e\u7f16\u53f7 21 \u5230 23\uff09\u6309\u7167\u63d0\u793a\u63cf\u8ff0\u8fdb\u884c\u7f16\u7801\uff0c\u8f6c\u6362\u4e3a JSON \u5b57\u7b26\u4e32\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u6240\u6709\u5176\u4ed6\u6807\u7b7e\uff08\u4e3b\u7c7b\u578b 6\uff0c\u4efb\u4f55\u5176\u4ed6\u6807\u7b7e\u7f16\u53f7\uff09\uff0c\u5c06\u6807\u7b7e\u5185\u5bb9\u8868\u793a\u4e3a JSON \u503c\uff1b\u5ffd\u7565\u6807\u7b7e\u7f16\u53f7\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5728\u8f6c\u6362\u4e4b\u524d\uff0c\u5c06\u4e0d\u5b9a\u957f\u9879\u8f6c\u6362\u4e3a\u5b9a\u957f\u9879\u3002")),(0,i.kt)("p",null,"CBOR-to-JSON \u8f6c\u6362\u5668\u53ef\u80fd\u5e0c\u671b\u9075\u5faa JSON \u914d\u7f6e\u6587\u4ef6 I-JSON ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7493"},"RFC7493"),"\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u4e92\u64cd\u4f5c\u6027\u5e76\u589e\u52a0 JSON \u8f93\u51fa\u80fd\u591f\u4ee5\u53ef\u9884\u6d4b\u7684\u7ed3\u679c\u5904\u7406\u7684\u4fe1\u5fc3\u3002\u4f8b\u5982\uff0c\u8fd9\u5bf9\u53ef\u9760\u8868\u793a\u7684\u6574\u6570\u8303\u56f4\u4ee5\u53ca\u65e7\u7248\u672c JSON \u5b9e\u73b0\u53ef\u80fd\u652f\u6301\u7684\u9876\u5c42\u6570\u636e\u9879\u6709\u5f71\u54cd\u3002"),(0,i.kt)("h3",{id:"62-\u4ece-json-\u8f6c\u6362\u4e3a-cborconverting-from-json-to-cbor"},"6.2. \u4ece JSON \u8f6c\u6362\u4e3a CBOR\uff08Converting from JSON to CBOR\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"All JSON values, once decoded, directly map into one or more CBOR values. As with any kind of CBOR generation, decisions have to be made with respect to number representation. In a suggested conversion:"),(0,i.kt)("p",null,"JSON numbers without fractional parts (integer numbers) are represented as integers (major types 0 and 1, possibly major type 6, tag number 2 and 3), choosing the shortest form; integers longer than an implementation-defined threshold may instead be represented as floating-point values. The default range that is represented as integer is -2^53+1..2^53-1 (fully exploiting the range for exact integers in the binary64 representation often used for decoding JSON ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7493"},"RFC7493"),"). A CBOR-based protocol, or a generic converter implementation, may choose -2^32..2^32-1 or -2^64..2^64-1 (fully using the integer ranges available in CBOR with uint32_t or uint64_t, respectively) or even -2^31..2^31-1 or -2^63..2^63-1 (using popular ranges for two's complement signed integers). (If the JSON was generated from a JavaScript implementation, its precision is already limited to 53 bits maximum.)\nNumbers with fractional parts are represented as floating-point values, performing the decimal-to-binary conversion based on the precision provided by IEEE 754 binary64. The mathematical value of the JSON number is converted to binary64 using the roundTiesToEven procedure in Section 4.3.1 of ",(0,i.kt)("a",{parentName:"p",href:"https://ieeexplore.ieee.org/document/8766229"},"IEEE754"),". Then, when encoding in CBOR, the preferred serialization uses the shortest floating-point representation exactly representing this conversion result; for instance, 1.5 is represented in a 16-bit floating-point value (not all implementations will be capable of efficiently finding the minimum form, though). Instead of using the default binary64 precision, there may be an implementation-defined limit to the precision of the conversion that will affect the precision of the represented values. Decimal representation should only be used on the CBOR side if that is specified in a protocol.\nCBOR has been designed to generally provide a more compact encoding than JSON. One implementation strategy that might come to mind is to perform a JSON-to-CBOR encoding in place in a single buffer. This strategy would need to carefully consider a number of pathological cases, such as that some strings represented with no or very few escapes and longer (or much longer) than 255 bytes may expand when encoded as UTF-8 strings in CBOR. Similarly, a few of the binary floating-point representations might cause expansion from some short decimal representations (1.1, 1e9) in JSON. This may be hard to get right, and any ensuing vulnerabilities may be exploited by an attacker.")),(0,i.kt)("p",null,"\u6240\u6709 JSON \u503c\u5728\u89e3\u7801\u540e\u76f4\u63a5\u6620\u5c04\u5230\u4e00\u4e2a\u6216\u591a\u4e2a CBOR \u503c\u3002\u4e0e\u4efb\u4f55\u7c7b\u578b\u7684 CBOR \u751f\u6210\u4e00\u6837\uff0c\u5fc5\u987b\u5c31\u6570\u5b57\u8868\u793a\u4f5c\u51fa\u51b3\u7b56\u3002\u5728\u5efa\u8bae\u7684\u8f6c\u6362\u4e2d\uff1a"),(0,i.kt)("p",null,"\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684 JSON \u6570\u5b57\uff08\u6574\u6570\uff09\u8868\u793a\u4e3a\u6574\u6570\uff08\u4e3b\u7c7b\u578b 0 \u548c 1\uff0c\u53ef\u80fd\u4e3a\u4e3b\u7c7b\u578b 6\uff0c\u6807\u7b7e\u7f16\u53f7 2 \u548c 3\uff09\uff0c\u9009\u62e9\u6700\u77ed\u5f62\u5f0f\uff1b\u957f\u4e8e\u5b9e\u73b0\u5b9a\u4e49\u7684\u9608\u503c\u7684\u6574\u6570\u53ef\u80fd\u7528\u6d6e\u70b9\u503c\u8868\u793a\u3002\u9ed8\u8ba4\u8868\u793a\u4e3a\u6574\u6570\u7684\u8303\u56f4\u662f -2^53+1..2^53-1\uff08\u5145\u5206\u5229\u7528 binary64 \u7528\u4e8e\u89e3\u7801 JSON \u7684\u7cbe\u786e\u6574\u6570\u8303\u56f4 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7493"},"RFC7493"),"\uff09\u3002\u57fa\u4e8e CBOR \u7684\u534f\u8bae\uff0c\u6216\u901a\u7528\u8f6c\u6362\u5668\u5b9e\u73b0\uff0c\u53ef\u4ee5\u9009\u62e9 -2^32..2^32-1 \u6216 -2^64..2^64-1\uff08\u5206\u522b\u4f7f\u7528 CBOR \u4e2d\u53ef\u7528\u7684 uint32_t \u6216 uint64_t \u7684\u6574\u6570\u8303\u56f4\uff09\u751a\u81f3 -2^31..2^31-1 \u6216 -2^63..2^63-1\uff08\u4f7f\u7528\u4e8c\u8fdb\u5236\u8865\u7801\u6709\u7b26\u53f7\u6574\u6570\u7684\u6d41\u884c\u8303\u56f4\uff09\u3002\uff08\u5982\u679c JSON \u662f\u4ece JavaScript \u5b9e\u73b0\u751f\u6210\u7684\uff0c\u5176\u7cbe\u5ea6\u5df2\u7ecf\u9650\u5236\u5728\u6700\u591a 53 \u4f4d\u3002\uff09\n\u5e26\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u8868\u793a\u4e3a\u6d6e\u70b9\u503c\uff0c\u6839\u636e IEEE 754 binary64 \u63d0\u4f9b\u7684\u7cbe\u5ea6\u6267\u884c\u5341\u8fdb\u5236\u5230\u4e8c\u8fdb\u5236\u7684\u8f6c\u6362\u3002\u5c06 JSON \u6570\u5b57\u7684\u6570\u5b66\u503c\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://ieeexplore.ieee.org/document/8766229"},"IEEE754")," \u7b2c 4.3.1 \u8282\u4e2d\u7684 roundTiesToEven \u8fc7\u7a0b\u8f6c\u6362\u4e3a binary64\u3002\u7136\u540e\uff0c\u5728 CBOR \u7f16\u7801\u65f6\uff0c\u9996\u9009\u5e8f\u5217\u5316\u4f7f\u7528\u7cbe\u786e\u8868\u793a\u6b64\u8f6c\u6362\u7ed3\u679c\u7684\u6700\u77ed\u6d6e\u70b9\u8868\u793a\uff1b\u4f8b\u5982\uff0c1.5 \u7528 16 \u4f4d\u6d6e\u70b9\u503c\u8868\u793a\uff08\u5c3d\u7ba1\u5e76\u975e\u6240\u6709\u5b9e\u73b0\u90fd\u80fd\u6709\u6548\u5730\u627e\u5230\u6700\u5c0f\u5f62\u5f0f\uff09\u3002\u9664\u4e86\u4f7f\u7528\u9ed8\u8ba4\u7684 binary64 \u7cbe\u5ea6\u4e4b\u5916\uff0c\u53ef\u80fd\u5b58\u5728\u5f71\u54cd\u8868\u793a\u503c\u7cbe\u5ea6\u7684\u5b9e\u73b0\u5b9a\u4e49\u7684\u7cbe\u5ea6\u9650\u5236\u3002\u4ec5\u5f53\u534f\u8bae\u4e2d\u6307\u5b9a\u65f6\uff0c\u624d\u5e94\u5728 CBOR \u4fa7\u4f7f\u7528\u5341\u8fdb\u5236\u8868\u793a\u3002"),(0,i.kt)("p",null,"CBOR \u65e8\u5728\u901a\u5e38\u6bd4 JSON \u63d0\u4f9b\u66f4\u7d27\u51d1\u7684\u7f16\u7801\u3002\u4e00\u4e2a\u53ef\u80fd\u4f1a\u60f3\u5230\u7684\u5b9e\u73b0\u7b56\u7565\u662f\u5728\u5355\u4e2a\u7f13\u51b2\u533a\u4e2d\u6267\u884c JSON-to-CBOR \u7f16\u7801\u3002\u8fd9\u79cd\u7b56\u7565\u9700\u8981\u4ed4\u7ec6\u8003\u8651\u8bb8\u591a\u7279\u6b8a\u60c5\u51b5\uff0c\u4f8b\u5982\uff0c\u4e00\u4e9b\u6ca1\u6709\u8f6c\u4e49\u6216\u5f88\u5c11\u8f6c\u4e49\u4e14\u957f\u5ea6\u8d85\u8fc7 255 \u5b57\u8282\u7684\u5b57\u7b26\u4e32\u5728 CBOR \u4e2d\u7f16\u7801\u4e3a UTF-8 \u5b57\u7b26\u4e32\u65f6\u53ef\u80fd\u4f1a\u6269\u5c55\u3002\u7c7b\u4f3c\u5730\uff0c\u4e00\u4e9b\u4e8c\u8fdb\u5236\u6d6e\u70b9\u8868\u793a\u53ef\u80fd\u4f1a\u5bfc\u81f4 JSON \u4e2d\u4e00\u4e9b\u77ed\u5c0f\u6570\u8868\u793a\uff081.1\u30011e9\uff09\u7684\u6269\u5c55\u3002\u8fd9\u53ef\u80fd\u5f88\u96be\u505a\u5230\uff0c\u5e76\u4e14\u4efb\u4f55\u968f\u540e\u7684\u6f0f\u6d1e\u53ef\u80fd\u4f1a\u88ab\u653b\u51fb\u8005\u5229\u7528\u3002"),(0,i.kt)("h2",{id:"7-cbor-\u7684\u672a\u6765\u6f14\u8fdbfuture-evolution-of-cbor"},"7. CBOR \u7684\u672a\u6765\u6f14\u8fdb\uff08Future Evolution of CBOR\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Successful protocols evolve over time. New ideas appear, implementation platforms improve, related protocols are developed and evolve, and new requirements from applications and protocols are added. Facilitating protocol evolution is therefore an important design consideration for any protocol development."),(0,i.kt)("p",null,"For protocols that will use CBOR, CBOR provides some useful mechanisms to facilitate their evolution. Best practices for this are well known, particularly from JSON format development of JSON-based protocols. Therefore, such best practices are outside the scope of this specification."),(0,i.kt)("p",null,"However, facilitating the evolution of CBOR itself is very well within its scope. CBOR is designed to both provide a stable basis for development of CBOR-based protocols and to be able to evolve. Since a successful protocol may live for decades, CBOR needs to be designed for decades of use and evolution. This section provides some guidance for the evolution of CBOR. It is necessarily more subjective than other parts of this document. It is also necessarily incomplete, lest it turn into a textbook on protocol development.")),(0,i.kt)("p",null,"\u6210\u529f\u7684\u534f\u8bae\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u6f14\u8fdb\u3002\u65b0\u89c2\u5ff5\u51fa\u73b0\uff0c\u5b9e\u73b0\u5e73\u53f0\u5f97\u5230\u6539\u8fdb\uff0c\u76f8\u5173\u534f\u8bae\u5f97\u5230\u5f00\u53d1\u548c\u6f14\u8fdb\uff0c\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u548c\u534f\u8bae\u4e2d\u65b0\u589e\u7684\u9700\u6c42\u3002\u56e0\u6b64\uff0c\u4fc3\u8fdb\u534f\u8bae\u6f14\u8fdb\u662f\u4efb\u4f55\u534f\u8bae\u5f00\u53d1\u7684\u91cd\u8981\u8bbe\u8ba1\u8003\u8651\u56e0\u7d20\u3002"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u5c06\u4f7f\u7528 CBOR \u7684\u534f\u8bae\uff0cCBOR \u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u673a\u5236\u6765\u4fc3\u8fdb\u5b83\u4eec\u7684\u6f14\u8fdb\u3002\u8fd9\u65b9\u9762\u7684\u6700\u4f73\u5b9e\u8df5\u4f17\u6240\u5468\u77e5\uff0c\u5c24\u5176\u662f\u6765\u81ea\u57fa\u4e8e JSON \u7684\u534f\u8bae\u7684 JSON \u683c\u5f0f\u5f00\u53d1\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6700\u4f73\u5b9e\u8df5\u8d85\u51fa\u4e86\u672c\u89c4\u8303\u7684\u8303\u56f4\u3002"),(0,i.kt)("p",null,"\u7136\u800c\uff0c\u4fc3\u8fdb CBOR \u672c\u8eab\u7684\u6f14\u8fdb\u786e\u5b9e\u5728\u5176\u8303\u56f4\u4e4b\u5185\u3002CBOR \u65e8\u5728\u4e3a\u5f00\u53d1\u57fa\u4e8e CBOR \u7684\u534f\u8bae\u63d0\u4f9b\u7a33\u5b9a\u7684\u57fa\u7840\uff0c\u5e76\u4e14\u80fd\u591f\u6f14\u8fdb\u3002\u7531\u4e8e\u4e00\u4e2a\u6210\u529f\u7684\u534f\u8bae\u53ef\u80fd\u4f1a\u6301\u7eed\u6570\u5341\u5e74\uff0cCBOR \u9700\u8981\u4e3a\u6570\u5341\u5e74\u7684\u4f7f\u7528\u548c\u6f14\u8fdb\u800c\u8bbe\u8ba1\u3002\u672c\u8282\u4e3a CBOR \u7684\u6f14\u8fdb\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6307\u5bfc\u3002\u8fd9\u6bd4\u672c\u6587\u6863\u7684\u5176\u4ed6\u90e8\u5206\u66f4\u5177\u4e3b\u89c2\u6027\u3002\u5b83\u4e5f\u5fc5\u7136\u662f\u4e0d\u5b8c\u6574\u7684\uff0c\u4ee5\u514d\u5b83\u53d8\u6210\u4e00\u4e2a\u5173\u4e8e\u534f\u8bae\u5f00\u53d1\u7684\u6559\u6750\u3002"),(0,i.kt)("h3",{id:"71-\u6269\u5c55\u70b9extension-points"},"7.1. \u6269\u5c55\u70b9\uff08Extension Points\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"In a protocol design, opportunities for evolution are often included in the form of extension points. For example, there may be a codepoint space that is not fully allocated from the outset, and the protocol is designed to tolerate and embrace implementations that start using more codepoints than initially allocated."),(0,i.kt)("p",null,"Sizing the codepoint space may be difficult because the range required may be hard to predict. Protocol designs should attempt to make the codepoint space large enough so that it can slowly be filled over the intended lifetime of the protocol."),(0,i.kt)("p",null,"CBOR has three major extension points:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},'the "simple" space (values in major type 7):'),"\nOf the 24 efficient (and 224 slightly less efficient) values, only a small number have been allocated. Implementations receiving an unknown simple data item may easily be able to process it as such, given that the structure of the value is indeed simple. The IANA registry in Section 9.1 is the appropriate way to address the extensibility of this codepoint space."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},'the "tag" space (values in major type 6):'),'\nThe total codepoint space is abundant; only a tiny part of it has been allocated. However, not all of these codepoints are equally efficient: the first 24 only consume a single ("1+0") byte, and half of them have already been allocated. The next 232 values only consume two ("1+1") bytes, with nearly a quarter already allocated. These subspaces need some curation to last for a few more decades. Implementations receiving an unknown tag number can choose to process just the enclosed tag content or, preferably, to process the tag as an unknown tag number wrapping the tag content. The IANA registry in Section 9.2 is the appropriate way to address the extensibility of this codepoint space.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},'the "additional information" space:'),"\nAn implementation receiving an unknown additional information value has no way to continue decoding, so allocating codepoints in this space is a major step beyond just exercising an extension point. There are also very few codepoints left. See also Section 7.2.")),(0,i.kt)("p",null,"\u5728\u534f\u8bae\u8bbe\u8ba1\u4e2d\uff0c\u6f14\u8fdb\u7684\u673a\u4f1a\u901a\u5e38\u4ee5\u6269\u5c55\u70b9\u7684\u5f62\u5f0f\u5305\u542b\u5728\u5185\u3002\u4f8b\u5982\uff0c\u53ef\u80fd\u6709\u4e00\u4e2a\u4ece\u4e00\u5f00\u59cb\u5c31\u6ca1\u6709\u5b8c\u5168\u5206\u914d\u7684\u4ee3\u7801\u70b9\u7a7a\u95f4\uff0c\u534f\u8bae\u88ab\u8bbe\u8ba1\u4e3a\u80fd\u5bb9\u5fcd\u5e76\u63a5\u7eb3\u5f00\u59cb\u4f7f\u7528\u6bd4\u6700\u521d\u5206\u914d\u7684\u66f4\u591a\u4ee3\u7801\u70b9\u7684\u5b9e\u73b0\u3002"),(0,i.kt)("p",null,"\u786e\u5b9a\u4ee3\u7801\u70b9\u7a7a\u95f4\u7684\u5927\u5c0f\u53ef\u80fd\u5f88\u56f0\u96be\uff0c\u56e0\u4e3a\u6240\u9700\u7684\u8303\u56f4\u53ef\u80fd\u5f88\u96be\u9884\u6d4b\u3002\u534f\u8bae\u8bbe\u8ba1\u5e94\u5c1d\u8bd5\u4f7f\u4ee3\u7801\u70b9\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u4ee5\u4fbf\u5728\u534f\u8bae\u7684\u9884\u671f\u4f7f\u7528\u5bff\u547d\u5185\u53ef\u4ee5\u6162\u6162\u586b\u5145\u3002"),(0,i.kt)("p",null,"CBOR \u6709\u4e09\u4e2a\u4e3b\u8981\u6269\u5c55\u70b9\uff1a"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},'"simple" \u7a7a\u95f4\uff08\u4e3b\u7c7b\u578b 7 \u4e2d\u7684\u503c\uff09\uff1a'),"\n\u5728 24 \u4e2a\u9ad8\u6548\uff08\u548c 224 \u4e2a\u7a0d\u5fae\u4f4e\u6548\uff09\u7684\u503c\u4e2d\uff0c\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u5df2\u88ab\u5206\u914d\u3002\u5b9e\u73b0\u63a5\u6536\u5230\u672a\u77e5\u7b80\u5355\u6570\u636e\u9879\u65f6\uff0c\u53ef\u80fd\u5f88\u5bb9\u6613\u5c06\u5176\u5904\u7406\u4e3a\u7b80\u5355\u6570\u636e\u9879\uff0c\u56e0\u4e3a\u8be5\u503c\u7684\u7ed3\u6784\u786e\u5b9e\u662f\u7b80\u5355\u7684\u3002\u7b2c 9.1 \u8282\u7684 IANA \u6ce8\u518c\u8868\u662f\u89e3\u51b3\u6b64\u4ee3\u7801\u70b9\u7a7a\u95f4\u53ef\u6269\u5c55\u6027\u7684\u9002\u5f53\u65b9\u5f0f\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},'"tag" \u7a7a\u95f4\uff08\u4e3b\u7c7b\u578b 6 \u4e2d\u7684\u503c\uff09\uff1a'),"\n\u603b\u7684\u4ee3\u7801\u70b9\u7a7a\u95f4\u975e\u5e38\u4e30\u5bcc\uff0c\u4f46\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u5df2\u88ab\u5206\u914d\u3002\u7136\u800c\uff0c\u5e76\u975e\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u70b9\u90fd\u540c\u6837\u9ad8\u6548\uff1a\u524d 24 \u4e2a\u53ea\u5360\u7528\u4e00\u4e2a\uff08\u201c1+0\u201d\uff09\u5b57\u8282\uff0c\u5176\u4e2d\u4e00\u534a\u5df2\u88ab\u5206\u914d\u3002\u63a5\u4e0b\u6765\u7684 232 \u4e2a\u503c\u53ea\u5360\u7528\u4e24\u4e2a\uff08\u201c1+1\u201d\uff09\u5b57\u8282\uff0c\u5176\u4e2d\u8fd1\u56db\u5206\u4e4b\u4e00\u5df2\u7ecf\u5206\u914d\u3002\u8fd9\u4e9b\u5b50\u7a7a\u95f4\u9700\u8981\u4e00\u4e9b\u6574\u7406\u4ee5\u7ef4\u6301\u51e0\u5341\u5e74\u3002\u5b9e\u73b0\u63a5\u6536\u5230\u672a\u77e5\u6807\u7b7e\u53f7\u65f6\u53ef\u4ee5\u9009\u62e9\u4ec5\u5904\u7406\u5c01\u88c5\u7684\u6807\u7b7e\u5185\u5bb9\uff0c\u6216\u8005\u6700\u597d\u5904\u7406\u4e3a\u672a\u77e5\u6807\u7b7e\u53f7\u5305\u88c5\u6807\u7b7e\u5185\u5bb9\u3002\u7b2c 9.2 \u8282\u7684 IANA \u6ce8\u518c\u8868\u662f\u89e3\u51b3\u6b64\u4ee3\u7801\u70b9\u7a7a\u95f4\u53ef\u6269\u5c55\u6027\u7684\u9002\u5f53\u65b9\u5f0f\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},'"additional information" \u7a7a\u95f4\uff1a'),"\n\u4e00\u4e2a\u5b9e\u73b0\u63a5\u6536\u5230\u672a\u77e5\u9644\u52a0\u4fe1\u606f\u503c\u65f6\u65e0\u6cd5\u7ee7\u7eed\u89e3\u7801\uff0c\u56e0\u6b64\u5728\u8fd9\u4e2a\u7a7a\u95f4\u5206\u914d\u4ee3\u7801\u70b9\u662f\u6bd4\u4ec5\u4ec5\u4f7f\u7528\u6269\u5c55\u70b9\u66f4\u91cd\u8981\u7684\u4e00\u6b65\u3002\u8fd9\u91cc\u8fd8\u5269\u4e0b\u5f88\u5c11\u7684\u4ee3\u7801\u70b9\u3002\u53e6\u8bf7\u53c2\u89c1\u7b2c 7.2 \u8282\u3002"),(0,i.kt)("h3",{id:"72-\u7b56\u5c55\u9644\u52a0\u4fe1\u606f\u7a7a\u95f4curating-the-additional-information-space"},"7.2. \u7b56\u5c55\u9644\u52a0\u4fe1\u606f\u7a7a\u95f4\uff08Curating the Additional Information Space\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"The human mind is sometimes drawn to filling in little perceived gaps to make something neat. We expect the remaining gaps in the codepoint space for the additional information values to be an attractor for new ideas, just because they are there."),(0,i.kt)("p",null,"The present specification does not manage the additional information codepoint space by an IANA registry. Instead, allocations out of this space can only be done by updating this specification."),(0,i.kt)("p",null,"For an additional information value of n >= 24, the size of the additional data typically is 2n-24 bytes. Therefore, additional information values 28 and 29 should be viewed as candidates for 128-bit and 256-bit quantities, in case a need arises to add them to the protocol. Additional information value 30 is then the only additional information value available for general allocation, and there should be a very good reason for allocating it before assigning it through an update of the present specification.")),(0,i.kt)("p",null,"\u4eba\u7c7b\u601d\u7ef4\u6709\u65f6\u4f1a\u88ab\u5438\u5f15\u5230\u586b\u8865\u5c0f\u7684\u611f\u77e5\u7f3a\u53e3\u4ee5\u4f7f\u4e8b\u7269\u53d8\u5f97\u6574\u6d01\u3002\u6211\u4eec\u9884\u8ba1\u9644\u52a0\u4fe1\u606f\u503c\u4ee3\u7801\u70b9\u7a7a\u95f4\u4e2d\u5269\u4f59\u7684\u7f3a\u53e3\u5c06\u6210\u4e3a\u65b0\u60f3\u6cd5\u7684\u5438\u5f15\u7269\uff0c\u4ec5\u4ec5\u56e0\u4e3a\u5b83\u4eec\u5b58\u5728\u3002"),(0,i.kt)("p",null,"\u672c\u89c4\u8303\u6ca1\u6709\u901a\u8fc7 IANA \u6ce8\u518c\u8868\u7ba1\u7406\u9644\u52a0\u4fe1\u606f\u4ee3\u7801\u70b9\u7a7a\u95f4\u3002\u76f8\u53cd\uff0c\u4ece\u8fd9\u4e2a\u7a7a\u95f4\u4e2d\u5206\u914d\u53ea\u80fd\u901a\u8fc7\u66f4\u65b0\u672c\u89c4\u8303\u6765\u5b8c\u6210\u3002"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u9644\u52a0\u4fe1\u606f\u503c n >= 24\uff0c\u9644\u52a0\u6570\u636e\u7684\u5927\u5c0f\u901a\u5e38\u662f 2n-24 \u5b57\u8282\u3002\u56e0\u6b64\uff0c\u9644\u52a0\u4fe1\u606f\u503c 28 \u548c 29 \u5e94\u88ab\u89c6\u4e3a 128 \u4f4d\u548c 256 \u4f4d\u6570\u91cf\u7684\u5019\u9009\u9879\uff0c\u4ee5\u9632\u9700\u8981\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u534f\u8bae\u4e2d\u3002\u9644\u52a0\u4fe1\u606f\u503c 30 \u662f\u552f\u4e00\u53ef\u7528\u4e8e\u4e00\u822c\u5206\u914d\u7684\u9644\u52a0\u4fe1\u606f\u503c\uff0c\u5728\u901a\u8fc7\u66f4\u65b0\u73b0\u6709\u89c4\u8303\u5206\u914d\u5b83\u4e4b\u524d\uff0c\u5e94\u8be5\u6709\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u7406\u7531\u3002"),(0,i.kt)("h2",{id:"8-\u8bca\u65ad\u7b26\u53f7\u8868\u793a\u6cd5diagnostic-notation"},"8. \u8bca\u65ad\u7b26\u53f7\u8868\u793a\u6cd5\uff08Diagnostic Notation\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"CBOR is a binary interchange format. To facilitate documentation and debugging, and in particular to facilitate communication between entities cooperating in debugging, this section defines a simple human-readable diagnostic notation. All actual interchange always happens in the binary format."),(0,i.kt)("p",null,"Note that this truly is a diagnostic format; it is not meant to be parsed. Therefore, no formal definition (as in ABNF) is given in this document. (Implementers looking for a text-based format for representing CBOR data items in configuration files may also want to consider ",(0,i.kt)("a",{parentName:"p",href:"https://www.yaml.org/spec/1.2/spec.html"},"YAML"),".)"),(0,i.kt)("p",null,"The diagnostic notation is loosely based on JSON as it is defined in RFC 8259, extending it where needed."),(0,i.kt)("p",null,"The notation borrows the JSON syntax for numbers (integer and floating-point), True (>true<), False (>false<), Null (>null<), UTF-8 strings, arrays, and maps (maps are called objects in JSON; the diagnostic notation extends JSON here by allowing any data item in the key position). Undefined is written >undefined< as in JavaScript. The non-finite floating-point numbers Infinity, -Infinity, and NaN are written exactly as in this sentence (this is also a way they can be written in JavaScript, although JSON does not allow them). A tag is written as an integer number for the tag number, followed by the tag content in parentheses; for instance, a date in the format specified by RFC 3339 (ISO 8601) could be notated as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},'0("2013-03-21T20:04:00Z")\n')),(0,i.kt)("p",null,"or the equivalent relative time as the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"1(1363896240)\n")),(0,i.kt)("p",null,"Byte strings are notated in one of the base encodings, without padding, enclosed in single quotes, prefixed by >h< for base16, >b32< for base32, >h32< for base32hex, >b64< for base64 or base64url (the actual encodings do not overlap, so the string remains unambiguous). For example, the byte string 0x12345678 could be written h'12345678', b32'CI2FM6A', or b64'EjRWeA'."),(0,i.kt)("p",null,'Unassigned simple values are given as "simple()" with the appropriate integer in the parentheses. For example, "simple(42)" indicates major type 7, value 42.'),(0,i.kt)("p",null,"A number of useful extensions to the diagnostic notation defined here are provided in Appendix G of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8610"},"RFC8610"),', "Extended Diagnostic Notation" (EDN). Similarly, this notation could be extended in a separate document to provide documentation for NaN payloads, which are not covered in this document.')),(0,i.kt)("p",null,"CBOR \u662f\u4e00\u79cd\u4e8c\u8fdb\u5236\u4ea4\u6362\u683c\u5f0f\u3002\u4e3a\u4e86\u4fbf\u4e8e\u8bb0\u5f55\u548c\u8c03\u8bd5\uff0c\u7279\u522b\u662f\u4e3a\u4e86\u4fbf\u4e8e\u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u76f8\u4e92\u5408\u4f5c\u7684\u5b9e\u4f53\u4e4b\u95f4\u8fdb\u884c\u6c9f\u901a\uff0c\u672c\u8282\u5b9a\u4e49\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u4eba\u7c7b\u53ef\u8bfb\u8bca\u65ad\u8868\u793a\u6cd5\u3002\u6240\u6709\u5b9e\u9645\u4ea4\u6362\u90fd\u59cb\u7ec8\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u8fdb\u884c\u3002"),(0,i.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u8fd9\u786e\u5b9e\u662f\u4e00\u79cd\u8bca\u65ad\u683c\u5f0f\uff1b\u5b83\u5e76\u4e0d\u610f\u5473\u7740\u8981\u8fdb\u884c\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u672c\u6587\u6863\u672a\u7ed9\u51fa\u6b63\u5f0f\u5b9a\u4e49\uff08\u5982 ABNF \u4e2d\u7684\u5b9a\u4e49\uff09\u3002\uff08\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8868\u793a CBOR \u6570\u636e\u9879\u7684\u57fa\u4e8e\u6587\u672c\u7684\u683c\u5f0f\u7684\u5b9e\u73b0\u8005\u53ef\u80fd\u8fd8\u9700\u8981\u8003\u8651 ",(0,i.kt)("a",{parentName:"p",href:"https://www.yaml.org/spec/1.2/spec.html"},"YAML"),"\u3002\uff09"),(0,i.kt)("p",null,"\u8bca\u65ad\u8868\u793a\u6cd5\u677e\u6563\u5730\u57fa\u4e8e RFC 8259 \u4e2d\u5b9a\u4e49\u7684 JSON\uff0c\u5e76\u5728\u9700\u8981\u65f6\u5bf9\u5176\u8fdb\u884c\u6269\u5c55\u3002"),(0,i.kt)("p",null,"\u8868\u793a\u6cd5\u501f\u7528\u4e86 JSON \u8bed\u6cd5\u4e2d\u7684\u6570\u5b57\uff08\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff09\u3001True\uff08",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"\uff09\u3001False\uff08",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"\uff09\u3001Null\uff08",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"\uff09\u3001UTF-8 \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u6620\u5c04\uff08\u5728 JSON \u4e2d\uff0c\u6620\u5c04\u88ab\u79f0\u4e3a\u5bf9\u8c61\uff1b\u8bca\u65ad\u8868\u793a\u6cd5\u5728\u6b64\u901a\u8fc7\u5141\u8bb8\u5728\u952e\u4f4d\u7f6e\u4f7f\u7528\u4efb\u4f55\u6570\u636e\u9879\u6765\u6269\u5c55 JSON\uff09\u3002Undefined \u5982 JavaScript \u4e2d\u4e00\u6837\u5199\u4f5c ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"\u3002\u975e\u6709\u9650\u6d6e\u70b9\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"Infinity"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"-Infinity")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"NaN")," \u6b63\u5982\u672c\u53e5\u4e2d\u4e00\u6837\u8868\u793a\uff08\u8fd9\u4e5f\u662f\u5b83\u4eec\u53ef\u4ee5\u5728 JavaScript \u4e2d\u8868\u793a\u7684\u65b9\u5f0f\uff0c\u5c3d\u7ba1 JSON \u4e0d\u5141\u8bb8\u5b83\u4eec\uff09\u3002\u6807\u7b7e\u4ee5\u6807\u7b7e\u53f7\u7684\u6574\u6570\u5f62\u5f0f\u8868\u793a\uff0c\u540e\u8ddf\u62ec\u53f7\u5185\u7684\u6807\u7b7e\u5185\u5bb9\uff1b\u4f8b\u5982\uff0cRFC 3339\uff08ISO 8601\uff09\u89c4\u5b9a\u7684\u65e5\u671f\u683c\u5f0f\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},'0("2013-03-21T20:04:00Z")\n')),(0,i.kt)("p",null,"\u6216\u7b49\u6548\u7684\u76f8\u5bf9\u65f6\u95f4\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"1(1363896240)\n")),(0,i.kt)("p",null,"\u5b57\u8282\u4e32\u7528\u5355\u5f15\u53f7\u62ec\u8d77\uff0c\u4e0d\u5e26\u586b\u5145\uff0c\u524d\u7f00\u4e3a\u57fa\u6570\u7f16\u7801\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"h")," \u4ee3\u8868 base16\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"b32")," \u4ee3\u8868 base32\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"h32")," \u4ee3\u8868 base32hex\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"b64")," \u4ee3\u8868 base64 \u6216 base64url\uff08\u5b9e\u9645\u7f16\u7801\u6ca1\u6709\u91cd\u53e0\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u4ecd\u7136\u662f\u65e0\u6b67\u4e49\u7684\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u8282\u4e32 0x12345678 \u53ef\u4ee5\u5199\u6210 ",(0,i.kt)("inlineCode",{parentName:"p"},"h'12345678'"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"b32'CI2FM6A'")," \u6216 ",(0,i.kt)("inlineCode",{parentName:"p"},"b64'EjRWeA'"),"\u3002"),(0,i.kt)("p",null,"\u672a\u5206\u914d\u7684\u7b80\u5355\u503c\u8868\u793a\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"simple()"),"\uff0c\u62ec\u53f7\u5185\u662f\u9002\u5f53\u7684\u6574\u6570\u3002\u4f8b\u5982\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"simple(42)")," \u8868\u793a\u4e3b\u7c7b\u578b 7\uff0c\u503c 42\u3002"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8610"},"RFC8610")," \u9644\u5f55 G \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5bf9\u6b64\u5904\u5b9a\u4e49\u7684\u8bca\u65ad\u8868\u793a\u6cd5\u6709\u7528\u7684\u6269\u5c55\uff0c\u540d\u4e3a\u201c\u6269\u5c55\u8bca\u65ad\u8868\u793a\u6cd5\u201d\uff08EDN\uff09\u3002\u7c7b\u4f3c\u5730\uff0c\u672c\u8868\u793a\u6cd5\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u6587\u6863\u4e2d\u6269\u5c55\u4ee5\u63d0\u4f9b NaN \u6709\u6548\u8f7d\u8377\u7684\u6587\u6863\uff0c\u672c\u6587\u6863\u4e2d\u672a\u6d89\u53ca\u8fd9\u4e9b\u6709\u6548\u8f7d\u8377\u3002"),(0,i.kt)("h2",{id:"81-\u7f16\u7801\u6307\u793a\u7b26encoding-indicators"},"8.1. \u7f16\u7801\u6307\u793a\u7b26\uff08Encoding Indicators\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Sometimes it is useful to indicate in the diagnostic notation which of several alternative representations were actually used; for example, a data item written ",(0,i.kt)("inlineCode",{parentName:"p"},"1.5")," by a diagnostic decoder might have been encoded as a half-, single-, or double-precision float."),(0,i.kt)("p",null,"The convention for encoding indicators is that anything starting with an underscore and all following characters that are alphanumeric or underscore is an encoding indicator, and can be ignored by anyone not interested in this information. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"_3"),". Encoding indicators are always optional."),(0,i.kt)("p",null,"A single underscore can be written after the opening brace of a map or the opening bracket of an array to indicate that the data item was represented in indefinite-length format. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[_ 1, 2]")," contains an indicator that an indefinite-length representation was used to represent the data item ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2]"),"."),(0,i.kt)("p",null,"An underscore followed by a decimal digit n indicates that the preceding item (or, for arrays and maps, the item starting with the preceding bracket or brace) was encoded with an additional information value of 24+n. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"1.5_1")," is a half-precision floating-point number, while ",(0,i.kt)("inlineCode",{parentName:"p"},"1.5_3"),' is encoded as double precision. This encoding indicator is not shown in Appendix A. (Note that the encoding indicator "_" is thus an abbreviation of the full form "_7", which is not used.)'),(0,i.kt)("p",null,"The detailed chunk structure of byte and text strings of indefinite length can be notated in the form ",(0,i.kt)("inlineCode",{parentName:"p"},"(_ h'0123', h'4567')")," and ",(0,i.kt)("inlineCode",{parentName:"p"},'(_ "foo", "bar")'),". However, for an indefinite-length string with no chunks inside, ",(0,i.kt)("inlineCode",{parentName:"p"},"(_ )")," would be ambiguous as to whether a byte string (0x5fff) or a text string (0x7fff) is meant and is therefore not used. The basic forms ",(0,i.kt)("inlineCode",{parentName:"p"},"''_")," and ",(0,i.kt)("inlineCode",{parentName:"p"},'""_')," can be used instead and are reserved for the case of no chunks only -- not as short forms for the (permitted, but not really useful) encodings with only empty chunks, which need to be notated as ",(0,i.kt)("inlineCode",{parentName:"p"},"(_ '')"),", ",(0,i.kt)("inlineCode",{parentName:"p"},'(_ "")'),", etc., to preserve the chunk structure.")),(0,i.kt)("p",null,"\u6709\u65f6\u5728\u8bca\u65ad\u8868\u793a\u6cd5\u4e2d\u6307\u793a\u5b9e\u9645\u4f7f\u7528\u7684\u51e0\u79cd\u53ef\u9009\u8868\u793a\u6cd5\u4e2d\u7684\u54ea\u4e00\u79cd\u662f\u6709\u7528\u7684\uff1b\u4f8b\u5982\uff0c\u8bca\u65ad\u89e3\u7801\u5668\u5199\u7684\u6570\u636e\u9879 ",(0,i.kt)("inlineCode",{parentName:"p"},"1.5")," \u53ef\u80fd\u88ab\u7f16\u7801\u4e3a\u534a\u7cbe\u5ea6\u3001\u5355\u7cbe\u5ea6\u6216\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002"),(0,i.kt)("p",null,"\u7f16\u7801\u6307\u793a\u7b26\u7684\u7ea6\u5b9a\u662f\uff0c\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u4efb\u4f55\u5185\u5bb9\u4ee5\u53ca\u540e\u7eed\u6240\u6709\u5b57\u6bcd\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u5b57\u7b26\u90fd\u662f\u7f16\u7801\u6307\u793a\u7b26\uff0c\u5bf9\u4e8e\u5bf9\u8fd9\u4e9b\u4fe1\u606f\u4e0d\u611f\u5174\u8da3\u7684\u4eba\u53ef\u4ee5\u5ffd\u7565\u3002\u4f8b\u5982\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"_")," \u6216 ",(0,i.kt)("inlineCode",{parentName:"p"},"_3"),"\u3002\u7f16\u7801\u6307\u793a\u7b26\u59cb\u7ec8\u662f\u53ef\u9009\u7684\u3002"),(0,i.kt)("p",null,"\u5728\u6620\u5c04\u7684\u5f00\u59cb\u5927\u62ec\u53f7\u6216\u6570\u7ec4\u7684\u5f00\u59cb\u62ec\u53f7\u540e\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e0b\u5212\u7ebf\uff0c\u4ee5\u6307\u793a\u6570\u636e\u9879\u5728\u4e0d\u5b9a\u957f\u5ea6\u683c\u5f0f\u4e2d\u8868\u793a\u3002\u4f8b\u5982\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"[_ 1, 2]")," \u5305\u542b\u4e00\u4e2a\u6307\u793a\u7b26\uff0c\u8868\u793a\u6570\u636e\u9879 ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2]")," \u662f\u4f7f\u7528\u4e0d\u5b9a\u957f\u5ea6\u8868\u793a\u6cd5\u8868\u793a\u7684\u3002"),(0,i.kt)("p",null,"\u4e0b\u5212\u7ebf\u540e\u8ddf\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u5b57 n \u8868\u793a\u524d\u9762\u7684\u6570\u636e\u9879\uff08\u6216\u5bf9\u4e8e\u6570\u7ec4\u548c\u6620\u5c04\uff0c\u4ee5\u524d\u9762\u7684\u62ec\u53f7\u6216\u5927\u62ec\u53f7\u5f00\u59cb\u7684\u6570\u636e\u9879\uff09\u7f16\u7801\u4e3a\u9644\u52a0\u4fe1\u606f\u503c 24+n\u3002\u4f8b\u5982\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"1.5_1")," \u662f\u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u800c ",(0,i.kt)("inlineCode",{parentName:"p"},"1.5_3"),' \u662f\u53cc\u7cbe\u5ea6\u7f16\u7801\u3002\u9644\u5f55 A \u4e2d\u672a\u663e\u793a\u6b64\u7f16\u7801\u6307\u793a\u7b26\u3002\uff08\u6ce8\u610f\uff0c\u7f16\u7801\u6307\u793a\u7b26 "_" \u56e0\u6b64\u662f\u5168\u5f62\u5f0f "_7" \u7684\u7f29\u5199\uff0c\u800c\u4e0d\u4f7f\u7528\u5168\u5f62\u5f0f\u3002\uff09'),(0,i.kt)("p",null,"\u65e0\u9650\u957f\u5ea6\u5b57\u8282\u548c\u6587\u672c\u4e32\u7684\u8be6\u7ec6\u5757\u7ed3\u6784\u53ef\u4ee5\u8868\u793a\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"(_ h'0123', h'4567')")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},'(_ "foo", "bar")'),"\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5757\u7684\u65e0\u9650\u957f\u5ea6\u5b57\u7b26\u4e32\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"(_ )")," \u5728\u8868\u793a\u5b57\u8282\u4e32\uff080x5fff\uff09\u8fd8\u662f\u6587\u672c\u4e32\uff080x7fff\uff09\u65f6\u5c06\u4ea7\u751f\u6b67\u4e49\uff0c\u56e0\u6b64\u4e0d\u4f7f\u7528\u3002\u53ef\u4ee5\u4f7f\u7528\u57fa\u672c\u5f62\u5f0f ",(0,i.kt)("inlineCode",{parentName:"p"},"''_")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},'""_'),"\uff0c\u5e76\u4ec5\u4fdd\u7559\u7528\u4e8e\u6ca1\u6709\u5757\u7684\u60c5\u51b5 -- \u800c\u4e0d\u662f\u7528\u4f5c\u4ec5\u5177\u6709\u7a7a\u5757\u7684\u7f16\u7801\u7684\u7b80\u5199\u5f62\u5f0f\uff08\u5141\u8bb8\uff0c\u4f46\u5b9e\u9645\u4e0a\u6ca1\u6709\u7528\uff09\uff0c\u8fd9\u4e9b\u7f16\u7801\u9700\u8981\u8868\u793a\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"(_ '')"),", ",(0,i.kt)("inlineCode",{parentName:"p"},'(_ "")')," \u7b49\uff0c\u4ee5\u4fdd\u7559\u5757\u7ed3\u6784\u3002"),(0,i.kt)("h2",{id:"9-iana-\u6ce8\u610f\u4e8b\u9879iana-considerations"},"9. IANA \u6ce8\u610f\u4e8b\u9879\uff08IANA Considerations\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"IANA has created two registries for new CBOR values. The registries are separate, that is, not under an umbrella registry, and follow the rules in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8126"},"RFC8126"),". IANA has also assigned a new media type, an associated CoAP Content-Format entry, and a structured syntax suffix.")),(0,i.kt)("p",null,"IANA \u4e3a\u65b0\u7684 CBOR \u503c\u521b\u5efa\u4e86\u4e24\u4e2a\u6ce8\u518c\u8868\u3002\u6ce8\u518c\u8868\u662f\u72ec\u7acb\u7684\uff0c\u5373\u6ca1\u6709\u5728\u603b\u6ce8\u518c\u8868\u4e0b\uff0c\u5e76\u9075\u5faa ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8126"},"RFC8126")," \u4e2d\u7684\u89c4\u5219\u3002IANA \u8fd8\u5206\u914d\u4e86\u4e00\u4e2a\u65b0\u7684\u5a92\u4f53\u7c7b\u578b\u3001\u4e00\u4e2a\u76f8\u5173\u7684 CoAP Content-Format \u6761\u76ee\u548c\u4e00\u4e2a\u7ed3\u6784\u5316\u8bed\u6cd5\u540e\u7f00\u3002"),(0,i.kt)("h3",{id:"91-cbor-\u7b80\u5355\u503c\u6ce8\u518c\u8868cbor-simple-values-registry"},"9.1. CBOR \u7b80\u5355\u503c\u6ce8\u518c\u8868\uff08CBOR Simple Values Registry\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'IANA has created the "Concise Binary Object Representation (CBOR) Simple Values" registry at ',(0,i.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/cbor-simple-values"},"IANA.cbor-simple-values"),". The initial values are shown in Table 4."),(0,i.kt)("p",null,"New entries in the range 0 to 19 are assigned by Standards Action ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8126"},"RFC8126"),". It is suggested that IANA allocate values starting with the number 16 in order to reserve the lower numbers for contiguous blocks (if any)."),(0,i.kt)("p",null,"New entries in the range 32 to 255 are assigned by Specification Required.")),(0,i.kt)("p",null,"IANA \u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/cbor-simple-values"},"IANA.cbor-simple-values")," \u5904\u521b\u5efa\u4e86\u201c\u7b80\u660e\u4e8c\u8fdb\u5236\u5bf9\u8c61\u8868\u793a\uff08CBOR\uff09\u7b80\u5355\u503c\u201d\u6ce8\u518c\u8868\u3002\u521d\u59cb\u503c\u5982\u8868 4 \u6240\u793a\u3002"),(0,i.kt)("p",null,"\u8303\u56f4 0 \u81f3 19 \u7684\u65b0\u6761\u76ee\u7531\u6807\u51c6\u64cd\u4f5c ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8126"},"RFC8126")," \u5206\u914d\u3002\u5efa\u8bae IANA \u4ece 16 \u5f00\u59cb\u5206\u914d\u503c\uff0c\u4ee5\u4fbf\u4e3a\u8fde\u7eed\u7684\u5757\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u9884\u7559\u8f83\u4f4e\u7684\u6570\u5b57\u3002"),(0,i.kt)("p",null,"\u8303\u56f4 32 \u81f3 255 \u7684\u65b0\u6761\u76ee\u7531\u89c4\u8303\u8981\u6c42\u5206\u914d\u3002"),(0,i.kt)("h3",{id:"92-cbor-\u6807\u7b7e\u6ce8\u518c\u8868cbor-tags-registry"},"9.2. CBOR \u6807\u7b7e\u6ce8\u518c\u8868\uff08CBOR Tags Registry\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'IANA has created the "Concise Binary Object Representation (CBOR) Tags" registry at ',(0,i.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/cbor-tags"},"IANA.cbor-tags"),". The tags that were defined in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," are described in detail in Section 3.4, and other tags have already been defined since then."),(0,i.kt)("p",null,'New entries in the range 0 to 23 ("1+0") are assigned by Standards Action. New entries in the ranges 24 to 255 ("1+1") and 256 to 32767 (lower half of "1+2") are assigned by Specification Required. New entries in the range 32768 to 18446744073709551615 (upper half of "1+2", "1+4", and "1+8") are assigned by First Come First Served. The template for registration requests is:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Data item"),(0,i.kt)("li",{parentName:"ul"},"Semantics (short form)")),(0,i.kt)("p",null,"In addition, First Come First Served requests should include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Point of contact"),(0,i.kt)("li",{parentName:"ul"},"Description of semantics (URL) -- This description is optional; the URL can point to something like an Internet-Draft or a web page.")),(0,i.kt)("p",null,"Applicants exercising the First Come First Served range and making a suggestion for a tag number that is not representable in 32 bits (i.e., larger than 4294967295) should be aware that this could reduce interoperability with implementations that do not support 64-bit numbers.")),(0,i.kt)("p",null,"IANA \u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/cbor-tags"},"IANA.cbor-tags")," \u5904\u521b\u5efa\u4e86\u201c\u7b80\u660e\u4e8c\u8fdb\u5236\u5bf9\u8c61\u8868\u793a\uff08CBOR\uff09\u6807\u7b7e\u201d\u6ce8\u518c\u8868\u3002\u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc7049"},"RFC7049")," \u4e2d\u5b9a\u4e49\u7684\u6807\u7b7e\u5728\u7b2c 3.4 \u8282\u4e2d\u8be6\u7ec6\u63cf\u8ff0\uff0c\u6b64\u540e\u5df2\u7ecf\u5b9a\u4e49\u4e86\u5176\u4ed6\u6807\u7b7e\u3002"),(0,i.kt)("p",null,"\u8303\u56f4 0 \u81f3 23\uff08\u201c1+0\u201d\uff09\u7684\u65b0\u6761\u76ee\u7531\u6807\u51c6\u64cd\u4f5c\u5206\u914d\u3002\u8303\u56f4 24 \u81f3 255\uff08\u201c1+1\u201d\uff09\u548c 256 \u81f3 32767\uff08\u201c1+2\u201d\u4e0b\u534a\u90e8\u5206\uff09\u7684\u65b0\u6761\u76ee\u7531\u89c4\u8303\u8981\u6c42\u5206\u914d\u3002\u8303\u56f4 32768 \u81f3 18446744073709551615\uff08\u201c1+2\u201d\u4e0a\u534a\u90e8\u5206\u3001\u201c1+4\u201d\u548c\u201c1+8\u201d\uff09\u7684\u65b0\u6761\u76ee\u7531\u5148\u5230\u5148\u5f97\u5206\u914d\u3002\u6ce8\u518c\u8bf7\u6c42\u7684\u6a21\u677f\u662f\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6570\u636e\u9879\uff08Data item\uff09"),(0,i.kt)("li",{parentName:"ul"},"\u8bed\u4e49\uff08Semantics\uff0c\u7b80\u77ed\u5f62\u5f0f\uff09")),(0,i.kt)("p",null,"\u6b64\u5916\uff0c\u5148\u5230\u5148\u5f97\u7684\u8bf7\u6c42\u8fd8\u5e94\u5305\u62ec\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u8054\u7cfb\u4eba\uff08Point of contact\uff09"),(0,i.kt)("li",{parentName:"ul"},"\u8bed\u4e49\u63cf\u8ff0\uff08Description of semantics URL\uff09-- \u8be5\u63cf\u8ff0\u662f\u53ef\u9009\u7684\uff1bURL \u53ef\u4ee5\u6307\u5411\u7c7b\u4f3c\u4e8e Internet-Draft \u6216\u7f51\u9875\u7684\u5185\u5bb9\u3002")),(0,i.kt)("p",null,"\u5728\u5148\u5230\u5148\u5f97\u8303\u56f4\u5185\u7533\u8bf7\u5e76\u63d0\u8bae\u4e00\u4e2a\u65e0\u6cd5\u7528 32 \u4f4d\u8868\u793a\u7684\u6807\u7b7e\u53f7\uff08\u5373\u5927\u4e8e 4294967295 \uff09\u7684\u7533\u8bf7\u4eba\u5e94\u6ce8\u610f\uff0c\u8fd9\u53ef\u80fd\u4f1a\u964d\u4f4e\u4e0e\u4e0d\u652f\u6301 64 \u4f4d\u6570\u5b57\u7684\u5b9e\u73b0\u7684\u4e92\u64cd\u4f5c\u6027\u3002"),(0,i.kt)("h3",{id:"93-media-types-registry\u7565\u89c1\u539f\u6587"},"9.3. Media Types Registry\uff08\u7565\uff0c\u89c1\u539f\u6587\uff09"),(0,i.kt)("h3",{id:"94-coap-content-format-registry\u7565\u89c1\u539f\u6587"},"9.4. CoAP Content-Format Registry\uff08\u7565\uff0c\u89c1\u539f\u6587\uff09"),(0,i.kt)("h3",{id:"95-structured-syntax-suffix-registry\u7565\u89c1\u539f\u6587"},"9.5. Structured Syntax Suffix Registry\uff08\u7565\uff0c\u89c1\u539f\u6587\uff09"),(0,i.kt)("h2",{id:"10-\u5b89\u5168\u6027\u8003\u8651security-considerations"},"10. \u5b89\u5168\u6027\u8003\u8651\uff08Security Considerations\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"A network-facing application can exhibit vulnerabilities in its processing logic for incoming data. Complex parsers are well known as a likely source of such vulnerabilities, such as the ability to remotely crash a node, or even remotely execute arbitrary code on it. CBOR attempts to narrow the opportunities for introducing such vulnerabilities by reducing parser complexity, by giving the entire range of encodable values a meaning where possible."),(0,i.kt)("p",null,"Because CBOR decoders are often used as a first step in processing unvalidated input, they need to be fully prepared for all types of hostile input that may be designed to corrupt, overrun, or achieve control of the system decoding the CBOR data item. A CBOR decoder needs to assume that all input may be hostile even if it has been checked by a firewall, has come over a secure channel such as TLS, is encrypted or signed, or has come from some other source that is presumed trusted."),(0,i.kt)("p",null,"Section 4.1 gives examples of limitations in interoperability when using a constrained CBOR decoder with input from a CBOR encoder that uses a non-preferred serialization. When a single data item is consumed both by such a constrained decoder and a full decoder, it can lead to security issues that can be exploited by an attacker who can inject or manipulate content."),(0,i.kt)("p",null,'As discussed throughout this document, there are many values that can be considered "equivalent" in some circumstances and "not equivalent" in others. As just one example, the numeric value for the number "one" might be expressed as an integer or a bignum. A system interpreting CBOR input might accept either form for the number "one", or might reject one (or both) forms. Such acceptance or rejection can have security implications in the program that is using the interpreted input.'),(0,i.kt)("p",null,"Hostile input may be constructed to overrun buffers, to overflow or underflow integer arithmetic, or to cause other decoding disruption. CBOR data items might have lengths or sizes that are intentionally extremely large or too short. Resource exhaustion attacks might attempt to lure a decoder into allocating very big data items (strings, arrays, maps, or even arbitrary precision numbers) or exhaust the stack depth by setting up deeply nested items. Decoders need to have appropriate resource management to mitigate these attacks. (Items for which very large sizes are given can also attempt to exploit integer overflow vulnerabilities.)"),(0,i.kt)("p",null,"A CBOR decoder, by definition, only accepts well-formed CBOR; this is the first step to its robustness. Input that is not well-formed CBOR causes no further processing from the point where the lack of well-formedness was detected. If possible, any data decoded up to this point should have no impact on the application using the CBOR decoder."),(0,i.kt)("p",null,"In addition to ascertaining well-formedness, a CBOR decoder might also perform validity checks on the CBOR data. Alternatively, it can leave those checks to the application using the decoder. This choice needs to be clearly documented in the decoder. Beyond the validity at the CBOR level, an application also needs to ascertain that the input is in alignment with the application protocol that is serialized in CBOR."),(0,i.kt)("p",null,"The input check itself may consume resources. This is usually linear in the size of the input, which means that an attacker has to spend resources that are commensurate to the resources spent by the defender on input validation. However, an attacker might be able to craft inputs that will take longer for a target decoder to process than for the attacker to produce. Processing for arbitrary-precision numbers may exceed linear effort. Also, some hash-table implementations that are used by decoders to build in-memory representations of maps can be attacked to spend quadratic effort, unless a secret key (see Section 7 of ",(0,i.kt)("a",{parentName:"p",href:"https://doi.org/10.1007/978-3-642-34931-7_28"},"SIPHASH_LNCS"),", also ",(0,i.kt)("a",{parentName:"p",href:"https://www.aumasson.jp/siphash/siphash.pdf"},"SIPHASH_OPEN"),") or some other mitigation is employed. Such superlinear efforts can be exploited by an attacker to exhaust resources at or before the input validator; they therefore need to be avoided in a CBOR decoder implementation. Note that tag number definitions and their implementations can add security considerations of this kind; this should then be discussed in the security considerations of the tag number definition."),(0,i.kt)("p",null,"CBOR encoders do not receive input directly from the network and are thus not directly attackable in the same way as CBOR decoders. However, CBOR encoders often have an API that takes input from another level in the implementation and can be attacked through that API. The design and implementation of that API should assume the behavior of its caller may be based on hostile input or on coding mistakes. It should check inputs for buffer overruns, overflow and underflow of integer arithmetic, and other such errors that are aimed to disrupt the encoder."),(0,i.kt)("p",null,"Protocols should be defined in such a way that potential multiple interpretations are reliably reduced to a single interpretation. For example, an attacker could make use of invalid input such as duplicate keys in maps, or exploit different precision in processing numbers to make one application base its decisions on a different interpretation than the one that will be used by a second application. To facilitate consistent interpretation, encoder and decoder implementations should provide a validity-checking mode of operation (Section 5.4). Note, however, that a generic decoder cannot know about all requirements that an application poses on its input data; it is therefore not relieving the application from performing its own input checking. Also, since the set of defined tag numbers evolves, the application may employ a tag number that is not yet supported for validity checking by the generic decoder it uses. Generic decoders therefore need to document which tag numbers they support and what validity checking they provide for those tag numbers as well as for basic CBOR (UTF-8 checking, duplicate map key checking)."),(0,i.kt)("p",null,"Section 3.4.3 notes that using the non-preferred choice of a bignum representation instead of a basic integer for encoding a number is not intended to have application semantics, but it can have such semantics if an application receiving CBOR data is using a decoder in the basic generic data model. This disparity causes a security issue if the two sets of semantics differ. Thus, applications using CBOR need to specify the data model that they are using for each use of CBOR data."),(0,i.kt)("p",null,"It is common to convert CBOR data to other formats. In many cases, CBOR has more expressive types than other formats; this is particularly true for the common conversion to JSON. The loss of type information can cause security issues for the systems that are processing the less-expressive data."),(0,i.kt)("p",null,"Section 6.2 describes a possibly common usage scenario of converting between CBOR and JSON that could allow an attack if the attacker knows that the application is performing the conversion."),(0,i.kt)("p",null,"Security considerations for the use of base16 and base64 from ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648"),", and the use of UTF-8 from ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3629"},"RFC3629"),", are relevant to CBOR as well.")),(0,i.kt)("p",null,"\u9762\u5411\u7f51\u7edc\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u5904\u7406\u4f20\u5165\u6570\u636e\u7684\u903b\u8f91\u65f6\u53ef\u80fd\u4f1a\u66b4\u9732\u51fa\u6f0f\u6d1e\u3002\u590d\u6742\u7684\u89e3\u6790\u5668\u88ab\u516c\u8ba4\u4e3a\u53ef\u80fd\u5bfc\u81f4\u8bf8\u5982\u8fdc\u7a0b\u5d29\u6e83\u8282\u70b9\u6216\u751a\u81f3\u5728\u5176\u4e0a\u8fdc\u7a0b\u6267\u884c\u4efb\u610f\u4ee3\u7801\u7b49\u6f0f\u6d1e\u7684\u6765\u6e90\u3002CBOR \u8bd5\u56fe\u901a\u8fc7\u964d\u4f4e\u89e3\u6790\u5668\u590d\u6742\u6027\u6765\u51cf\u5c11\u5f15\u5165\u8fd9\u7c7b\u6f0f\u6d1e\u7684\u673a\u4f1a\uff0c\u5c3d\u53ef\u80fd\u4e3a\u53ef\u7f16\u7801\u503c\u7684\u6574\u4e2a\u8303\u56f4\u8d4b\u4e88\u610f\u4e49\u3002"),(0,i.kt)("p",null,"\u7531\u4e8e CBOR \u89e3\u7801\u5668\u901a\u5e38\u7528\u4f5c\u5904\u7406\u672a\u7ecf\u9a8c\u8bc1\u8f93\u5165\u7684\u7b2c\u4e00\u6b65\uff0c\u56e0\u6b64\u5b83\u4eec\u9700\u8981\u5145\u5206\u51c6\u5907\u5e94\u5bf9\u6240\u6709\u53ef\u80fd\u8bbe\u8ba1\u7528\u4e8e\u7834\u574f\u3001\u8d8a\u754c\u6216\u5b9e\u73b0\u5bf9\u89e3\u7801 CBOR \u6570\u636e\u9879\u7684\u7cfb\u7edf\u63a7\u5236\u7684\u6076\u610f\u8f93\u5165\u3002CBOR \u89e3\u7801\u5668\u9700\u8981\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u53ef\u80fd\u662f\u654c\u5bf9\u7684\uff0c\u5373\u4f7f\u5b83\u5df2\u7ecf\u8fc7\u9632\u706b\u5899\u68c0\u67e5\uff0c\u901a\u8fc7\u4e86\u50cf TLS \u8fd9\u6837\u7684\u5b89\u5168\u901a\u9053\uff0c\u662f\u52a0\u5bc6\u6216\u7b7e\u540d\u7684\uff0c\u6216\u8005\u6765\u81ea\u5176\u4ed6\u88ab\u8ba4\u4e3a\u53ef\u4fe1\u7684\u6765\u6e90\u3002"),(0,i.kt)("p",null,"\u7b2c 4.1 \u8282\u4e3e\u4f8b\u8bf4\u660e\u4e86\u5f53\u4f7f\u7528\u53d7\u9650\u5236\u7684 CBOR \u89e3\u7801\u5668\u5904\u7406\u6765\u81ea\u4f7f\u7528\u975e\u4f18\u9009\u5e8f\u5217\u5316\u7684 CBOR \u7f16\u7801\u5668\u7684\u8f93\u5165\u65f6\uff0c\u4e92\u64cd\u4f5c\u6027\u65b9\u9762\u7684\u9650\u5236\u3002\u5f53\u5355\u4e2a\u6570\u636e\u9879\u65e2\u88ab\u8fd9\u6837\u7684\u53d7\u9650\u89e3\u7801\u5668\u4e5f\u88ab\u5b8c\u6574\u89e3\u7801\u5668\u6d88\u8017\u65f6\uff0c\u53ef\u80fd\u5bfc\u81f4\u5b89\u5168\u95ee\u9898\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u5b89\u5168\u95ee\u9898\u6ce8\u5165\u6216\u64cd\u7eb5\u5185\u5bb9\u3002"),(0,i.kt)("p",null,"\u6b63\u5982\u672c\u6587\u6863\u6240\u8ba8\u8bba\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8bb8\u591a\u503c\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u201c\u7b49\u4ef7\u201d\u7684\uff0c\u800c\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u5219\u88ab\u8ba4\u4e3a\u662f\u201c\u4e0d\u7b49\u4ef7\u201d\u7684\u3002\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6570\u5b57\u201c\u4e00\u201d\u7684\u6570\u503c\u503c\u53ef\u4ee5\u8868\u793a\u4e3a\u6574\u6570\u6216\u5927\u6570\u3002\u89e3\u91ca CBOR \u8f93\u5165\u7684\u7cfb\u7edf\u53ef\u80fd\u63a5\u53d7\u6570\u5b57\u201c\u4e00\u201d\u7684\u4efb\u4e00\u5f62\u5f0f\uff0c\u4e5f\u53ef\u80fd\u62d2\u7edd\u5176\u4e2d\u4e00\u4e2a\uff08\u6216\u4e24\u4e2a\uff09\u5f62\u5f0f\u3002\u5728\u4f7f\u7528\u89e3\u91ca\u8f93\u5165\u7684\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u79cd\u63a5\u53d7\u6216\u62d2\u7edd\u53ef\u80fd\u5177\u6709\u5b89\u5168\u6027\u542b\u4e49\u3002"),(0,i.kt)("p",null,"\u6076\u610f\u8f93\u5165\u53ef\u80fd\u88ab\u6784\u9020\u4e3a\u8d8a\u8fc7\u7f13\u51b2\u533a\uff0c\u6ea2\u51fa\u6216\u4e0b\u6ea2\u6574\u6570\u8fd0\u7b97\uff0c\u6216\u5bfc\u81f4\u5176\u4ed6\u89e3\u7801\u4e2d\u65ad\u3002CBOR \u6570\u636e\u9879\u53ef\u80fd\u5177\u6709\u6545\u610f\u975e\u5e38\u5927\u6216\u592a\u77ed\u7684\u957f\u5ea6\u6216\u5927\u5c0f\u3002\u8d44\u6e90\u8017\u5c3d\u653b\u51fb\u53ef\u80fd\u8bd5\u56fe\u5f15\u8bf1\u89e3\u7801\u5668\u5206\u914d\u975e\u5e38\u5927\u7684\u6570\u636e\u9879\uff08\u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u3001\u6620\u5c04\u6216\u751a\u81f3\u4efb\u610f\u7cbe\u5ea6\u6570\u5b57\uff09\u6216\u901a\u8fc7\u8bbe\u7f6e\u6df1\u5ea6\u5d4c\u5957\u7684\u6570\u636e\u9879\u6765\u8017\u5c3d\u5806\u6808\u6df1\u5ea6\u3002\u89e3\u7801\u5668\u9700\u8981\u5177\u6709\u9002\u5f53\u7684\u8d44\u6e90\u7ba1\u7406\u6765\u62b5\u5fa1\u8fd9\u4e9b\u653b\u51fb\u3002\uff08\u7ed9\u51fa\u975e\u5e38\u5927\u5c3a\u5bf8\u7684\u6570\u636e\u9879\u4e5f\u53ef\u80fd\u8bd5\u56fe\u5229\u7528\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u3002\uff09"),(0,i.kt)("p",null,"CBOR \u89e3\u7801\u5668\uff0c\u987e\u540d\u601d\u4e49\uff0c\u53ea\u63a5\u53d7\u683c\u5f0f\u826f\u597d\u7684 CBOR\uff1b\u8fd9\u662f\u5176\u5065\u58ee\u6027\u7684\u7b2c\u4e00\u6b65\u3002\u4e0d\u7b26\u5408 CBOR \u683c\u5f0f\u7684\u8f93\u5165\u5c06\u4e0d\u4f1a\u4ece\u53d1\u73b0\u683c\u5f0f\u9519\u8bef\u7684\u5730\u65b9\u5f00\u59cb\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\u3002\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5728\u6b64\u70b9\u4e4b\u524d\u89e3\u7801\u7684\u4efb\u4f55\u6570\u636e\u90fd\u4e0d\u5e94\u5bf9\u4f7f\u7528 CBOR \u89e3\u7801\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u4ea7\u751f\u5f71\u54cd\u3002"),(0,i.kt)("p",null,"\u9664\u4e86\u786e\u5b9a\u683c\u5f0f\u826f\u597d\u4e4b\u5916\uff0cCBOR \u89e3\u7801\u5668\u8fd8\u53ef\u4ee5\u5bf9 CBOR \u6570\u636e\u8fdb\u884c\u6709\u6548\u6027\u68c0\u67e5\u3002\u6216\u8005\uff0c\u5b83\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u68c0\u67e5\u7559\u7ed9\u4f7f\u7528\u89e3\u7801\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e2a\u9009\u62e9\u9700\u8981\u5728\u89e3\u7801\u5668\u4e2d\u660e\u786e\u8bb0\u5f55\u3002\u9664\u4e86 CBOR \u7ea7\u522b\u7684\u6709\u6548\u6027\u4e4b\u5916\uff0c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u9700\u8981\u786e\u4fdd\u8f93\u5165\u4e0e\u4f7f\u7528 CBOR \u5e8f\u5217\u5316\u7684\u5e94\u7528\u7a0b\u5e8f\u534f\u8bae\u4fdd\u6301\u4e00\u81f4\u3002"),(0,i.kt)("p",null,"\u8f93\u5165\u68c0\u67e5\u672c\u8eab\u53ef\u80fd\u4f1a\u6d88\u8017\u8d44\u6e90\u3002\u8fd9\u901a\u5e38\u4e0e\u8f93\u5165\u7684\u5927\u5c0f\u6210\u7ebf\u6027\u5173\u7cfb\uff0c\u8fd9\u610f\u5473\u7740\u653b\u51fb\u8005\u5fc5\u987b\u82b1\u8d39\u4e0e\u9632\u5fa1\u8005\u5728\u8f93\u5165\u9a8c\u8bc1\u4e0a\u82b1\u8d39\u7684\u8d44\u6e90\u76f8\u5f53\u7684\u8d44\u6e90\u3002\u7136\u800c\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u80fd\u591f\u5236\u4f5c\u4e00\u4e9b\u8f93\u5165\uff0c\u4f7f\u76ee\u6807\u89e3\u7801\u5668\u5904\u7406\u6240\u9700\u7684\u65f6\u95f4\u6bd4\u653b\u51fb\u8005\u5236\u4f5c\u6240\u9700\u7684\u65f6\u95f4\u66f4\u957f\u3002\u5904\u7406\u4efb\u610f\u7cbe\u5ea6\u6570\u5b57\u7684\u8fc7\u7a0b\u53ef\u80fd\u8d85\u8fc7\u7ebf\u6027\u52aa\u529b\u3002\u6b64\u5916\uff0c\u4e00\u4e9b\u7531\u89e3\u7801\u5668\u7528\u4e8e\u6784\u5efa\u5185\u5b58\u6620\u5c04\u8868\u793a\u7684\u54c8\u5e0c\u8868\u5b9e\u73b0\u53ef\u80fd\u4f1a\u88ab\u653b\u51fb\u4ee5\u6d88\u8017\u4e8c\u6b21\u65b9\u52aa\u529b\uff0c\u9664\u975e\u4f7f\u7528\u79d8\u5bc6\u5bc6\u94a5\uff08\u53c2\u89c1 ",(0,i.kt)("a",{parentName:"p",href:"https://doi.org/10.1007/978-3-642-34931-7_28"},"SIPHASH_LNCS")," \u7b2c7\u8282\uff0c\u4e5f\u53c2\u89c1 ",(0,i.kt)("a",{parentName:"p",href:"https://www.aumasson.jp/siphash/siphash.pdf"},"SIPHASH_OPEN"),"\uff09\u6216\u5176\u4ed6\u4e00\u4e9b\u7f13\u89e3\u63aa\u65bd\u3002\u8fd9\u79cd\u8d85\u7ebf\u6027\u52aa\u529b\u53ef\u80fd\u4f1a\u88ab\u653b\u51fb\u8005\u5229\u7528\uff0c\u4ee5\u8017\u5c3d\u8f93\u5165\u9a8c\u8bc1\u5668\u5904\u6216\u4e4b\u524d\u7684\u8d44\u6e90\uff1b\u56e0\u6b64\uff0c\u5728 CBOR \u89e3\u7801\u5668\u5b9e\u73b0\u4e2d\u9700\u8981\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\u8bf7\u6ce8\u610f\uff0c\u6807\u7b7e\u53f7\u5b9a\u4e49\u53ca\u5176\u5b9e\u73b0\u53ef\u80fd\u4f1a\u589e\u52a0\u8fd9\u7c7b\u5b89\u5168\u6027\u8003\u8651\uff1b\u8fd9\u5e94\u8be5\u5728\u6807\u7b7e\u53f7\u5b9a\u4e49\u7684\u5b89\u5168\u6027\u8003\u8651\u4e2d\u8ba8\u8bba\u3002"),(0,i.kt)("p",null,"CBOR \u7f16\u7801\u5668\u4e0d\u76f4\u63a5\u4ece\u7f51\u7edc\u63a5\u6536\u8f93\u5165\uff0c\u56e0\u6b64\u4e0e CBOR \u89e3\u7801\u5668\u4e0d\u540c\uff0c\u5b83\u4eec\u65e0\u6cd5\u76f4\u63a5\u53d7\u5230\u653b\u51fb\u3002\u7136\u800c\uff0cCBOR \u7f16\u7801\u5668\u901a\u5e38\u5177\u6709\u4e00\u4e2a\u4ece\u5b9e\u73b0\u7684\u53e6\u4e00\u4e2a\u5c42\u6b21\u63a5\u6536\u8f93\u5165\u7684 API\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u8be5 API \u53d7\u5230\u653b\u51fb\u3002\u8be5API\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5e94\u5047\u8bbe\u5176\u8c03\u7528\u8005\u7684\u884c\u4e3a\u53ef\u80fd\u57fa\u4e8e\u6076\u610f\u8f93\u5165\u6216\u7f16\u7801\u9519\u8bef\u3002\u5b83\u5e94\u8be5\u68c0\u67e5\u8f93\u5165\u662f\u5426\u5b58\u5728\u7f13\u51b2\u533a\u8d8a\u754c\u3001\u6574\u6570\u8fd0\u7b97\u6ea2\u51fa\u548c\u4e0b\u6ea2\u4ee5\u53ca\u5176\u4ed6\u65e8\u5728\u7834\u574f\u7f16\u7801\u5668\u7684\u9519\u8bef\u3002"),(0,i.kt)("p",null,"\u534f\u8bae\u5e94\u8be5\u4ee5\u8fd9\u6837\u4e00\u79cd\u65b9\u5f0f\u5b9a\u4e49\uff0c\u4ee5\u4fbf\u53ef\u9760\u5730\u5c06\u6f5c\u5728\u7684\u591a\u91cd\u89e3\u91ca\u51cf\u5c11\u4e3a\u5355\u4e00\u89e3\u91ca\u3002\u4f8b\u5982\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528\u65e0\u6548\u8f93\u5165\uff0c\u4f8b\u5982\u5730\u56fe\u4e2d\u7684\u91cd\u590d\u952e\uff0c\u6216\u8005\u5229\u7528\u5904\u7406\u6570\u5b57\u65f6\u7684\u4e0d\u540c\u7cbe\u5ea6\uff0c\u4f7f\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6839\u636e\u4e0e\u7b2c\u4e8c\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u89e3\u91ca\u4e0d\u540c\u7684\u89e3\u91ca\u6765\u505a\u51fa\u51b3\u7b56\u3002\u4e3a\u4e86\u4fbf\u4e8e\u4e00\u81f4\u7684\u89e3\u91ca\uff0c\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5b9e\u73b0\u5e94\u63d0\u4f9b\u6709\u6548\u6027\u68c0\u67e5\u7684\u64cd\u4f5c\u6a21\u5f0f\uff08\u7b2c 5.4 \u8282\uff09\u3002\u4f46\u662f\uff0c\u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89e3\u7801\u5668\u65e0\u6cd5\u4e86\u89e3\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5176\u8f93\u5165\u6570\u636e\u7684\u6240\u6709\u8981\u6c42\uff1b\u56e0\u6b64\uff0c\u5b83\u5e76\u4e0d\u80fd\u514d\u9664\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u81ea\u5df1\u7684\u8f93\u5165\u68c0\u67e5\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u5df2\u5b9a\u4e49\u7684\u6807\u7b7e\u53f7\u96c6\u5408\u5728\u4e0d\u65ad\u6f14\u8fdb\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f7f\u7528\u5c1a\u672a\u5f97\u5230\u901a\u7528\u89e3\u7801\u5668\u652f\u6301\u7684\u6807\u7b7e\u53f7\u8fdb\u884c\u6709\u6548\u6027\u68c0\u67e5\u3002\u901a\u7528\u89e3\u7801\u5668\u56e0\u6b64\u9700\u8981\u8bb0\u5f55\u5b83\u4eec\u652f\u6301\u54ea\u4e9b\u6807\u7b7e\u53f7\u4ee5\u53ca\u4e3a\u8fd9\u4e9b\u6807\u7b7e\u53f7\u4ee5\u53ca\u57fa\u672c CBOR\uff08UTF-8 \u68c0\u67e5\uff0c\u91cd\u590d\u6620\u5c04\u952e\u68c0\u67e5\uff09\u63d0\u4f9b\u54ea\u4e9b\u6709\u6548\u6027\u68c0\u67e5\u3002"),(0,i.kt)("p",null,"\u7b2c 3.4.3 \u8282\u6307\u51fa\uff0c\u4f7f\u7528\u5927\u6570\u8868\u793a\u6cd5\u800c\u4e0d\u662f\u57fa\u672c\u6574\u6570\u5bf9\u6570\u5b57\u8fdb\u884c\u7f16\u7801\u7684\u975e\u9996\u9009\u9009\u62e9\u5e76\u4e0d\u662f\u4e3a\u4e86\u5177\u6709\u5e94\u7528\u7a0b\u5e8f\u8bed\u4e49\uff0c\u4f46\u5982\u679c\u63a5\u6536 CBOR \u6570\u636e\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u57fa\u672c\u901a\u7528\u6570\u636e\u6a21\u578b\u4e2d\u7684\u89e3\u7801\u5668\uff0c\u5b83\u53ef\u80fd\u5177\u6709\u8fd9\u6837\u7684\u8bed\u4e49\u3002\u5982\u679c\u4e24\u7ec4\u8bed\u4e49\u4e0d\u540c\uff0c\u5219\u6b64\u5dee\u5f02\u4f1a\u5bfc\u81f4\u5b89\u5168\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 CBOR \u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u6307\u5b9a\u5b83\u4eec\u5bf9\u6bcf\u4e2a CBOR \u6570\u636e\u4f7f\u7528\u7684\u6570\u636e\u6a21\u578b\u3002"),(0,i.kt)("p",null,"\u5c06 CBOR \u6570\u636e\u8f6c\u6362\u4e3a\u5176\u4ed6\u683c\u5f0f\u662f\u5f88\u5e38\u89c1\u7684\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0cCBOR \u5177\u6709\u6bd4\u5176\u4ed6\u683c\u5f0f\u66f4\u5177\u8868\u73b0\u529b\u7684\u7c7b\u578b\uff1b\u8fd9\u5bf9\u4e8e\u901a\u5e38\u8f6c\u6362\u4e3a JSON \u5c24\u4e3a\u6b63\u786e\u3002\u7c7b\u578b\u4fe1\u606f\u7684\u4e22\u5931\u53ef\u80fd\u4f1a\u7ed9\u5904\u7406\u8868\u8fbe\u80fd\u529b\u8f83\u5f31\u6570\u636e\u7684\u7cfb\u7edf\u5e26\u6765\u5b89\u5168\u95ee\u9898\u3002"),(0,i.kt)("p",null,"\u7b2c 6.2 \u8282\u63cf\u8ff0\u4e86\u4e00\u4e2a\u53ef\u80fd\u7684\u5e38\u89c1\u4f7f\u7528\u573a\u666f\uff0c\u5373\u5728 CBOR \u548c JSON \u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u5982\u679c\u653b\u51fb\u8005\u77e5\u9053\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u6267\u884c\u8f6c\u6362\uff0c\u53ef\u80fd\u5141\u8bb8\u653b\u51fb\u3002"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc4648"},"RFC4648")," \u4e2d\u5173\u4e8e base16 \u548c base64 \u7684\u4f7f\u7528\u4ee5\u53ca ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3629"},"RFC3629")," \u4e2d\u5173\u4e8e UTF-8 \u7684\u4f7f\u7528\u7684\u5b89\u5168\u6027\u8003\u8651\u4e5f\u4e0e CBOR \u76f8\u5173\u3002"),(0,i.kt)("h2",{id:"\u539f\u6587concise-binary-object-representation-cbor"},"\u539f\u6587\uff1a",(0,i.kt)("a",{parentName:"h2",href:"https://datatracker.ietf.org/doc/html/rfc8949"},"Concise Binary Object Representation (CBOR)")))}m.isMDXComponent=!0}}]);