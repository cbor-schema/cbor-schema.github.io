"use strict";(self.webpackChunkcbor_docs=self.webpackChunkcbor_docs||[]).push([[906],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(a),m=i,u=p["".concat(l,".").concat(m)]||p[m]||h[m]||o;return a?n.createElement(u,s(s({ref:t},d),{},{components:a})):n.createElement(u,s({ref:t},d))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,s=new Array(o);s[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:i,s[1]=r;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5713:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const o={sidebar_position:2},s="JSON Schema \u4e2d\u6587\u6587\u6863",r={unversionedId:"json-schema",id:"json-schema",title:"JSON Schema \u4e2d\u6587\u6587\u6863",description:"\u672c\u6587\u7ffb\u8bd1\u81ea\uff1aJSON Schema: A Media Type for Describing JSON Documents.",source:"@site/docs/json-schema.md",sourceDirName:".",slug:"/json-schema",permalink:"/docs/json-schema",draft:!1,editUrl:"https://github.com/cbor-schema/cbor-docs/tree/main/docs/json-schema.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CBOR \u4e2d\u6587\u6587\u6863",permalink:"/docs/cbor"}},l={},c=[{value:"\u6458\u8981\uff08Abstract\uff09",id:"\u6458\u8981abstract",level:2},{value:"1. \u5f15\u8a00\uff08Introduction\uff09",id:"1-\u5f15\u8a00introduction",level:2},{value:"2. \u7ea6\u5b9a\u548c\u672f\u8bed\uff08Conventions and Terminology\uff09",id:"2-\u7ea6\u5b9a\u548c\u672f\u8bedconventions-and-terminology",level:2},{value:"3. \u6982\u8ff0\uff08Overview\uff09",id:"3-\u6982\u8ff0overview",level:2},{value:"4. \u5b9a\u4e49\uff08Definitions\uff09",id:"4-\u5b9a\u4e49definitions",level:2},{value:"4.1 JSON \u6587\u6863",id:"41-json-\u6587\u6863",level:3},{value:"4.2 \u5b9e\u4f8b\uff08Instance\uff09",id:"42-\u5b9e\u4f8binstance",level:3},{value:"4.2.1 \u5b9e\u4f8b\u6570\u636e\u6a21\u578b\uff08Instance Data Model\uff09",id:"421-\u5b9e\u4f8b\u6570\u636e\u6a21\u578binstance-data-model",level:4},{value:"4.2.2 \u5b9e\u4f8b\u76f8\u7b49\uff08Instance Equality\uff09",id:"422-\u5b9e\u4f8b\u76f8\u7b49instance-equality",level:4},{value:"4.2.3 \u975e JSON \u5b9e\u4f8b\uff08Non-JSON Instances\uff09",id:"423-\u975e-json-\u5b9e\u4f8bnon-json-instances",level:4},{value:"4.3. JSON Schema \u6587\u6863",id:"43-json-schema-\u6587\u6863",level:3},{value:"4.3.1. JSON Schema \u5bf9\u8c61\uff08Objects\uff09\u548c\u5173\u952e\u5b57\uff08Keywords\uff09",id:"431-json-schema-\u5bf9\u8c61objects\u548c\u5173\u952e\u5b57keywords",level:4},{value:"4.3.2. \u5e03\u5c14 JSON Schemas",id:"432-\u5e03\u5c14-json-schemas",level:4},{value:"4.3.3. \u6a21\u5f0f\u8bcd\u6c47\u8868\uff08Schema Vocabularies\uff09",id:"433-\u6a21\u5f0f\u8bcd\u6c47\u8868schema-vocabularies",level:4},{value:"4.3.4. \u5143\u6a21\u5f0f\uff08Meta-Schemas\uff09",id:"434-\u5143\u6a21\u5f0fmeta-schemas",level:4},{value:"4.3.5. \u6839\u6a21\u5f0f\u3001\u5b50\u6a21\u5f0f\u548c\u8d44\u6e90\uff08Root Schema and Subschemas and Resources\uff09",id:"435-\u6839\u6a21\u5f0f\u5b50\u6a21\u5f0f\u548c\u8d44\u6e90root-schema-and-subschemas-and-resources",level:4},{value:"5. \u7247\u6bb5\u6807\u8bc6\u7b26\uff08Fragment Identifiers\uff09",id:"5-\u7247\u6bb5\u6807\u8bc6\u7b26fragment-identifiers",level:2}],d={toc:c},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"json-schema-\u4e2d\u6587\u6587\u6863"},"JSON Schema \u4e2d\u6587\u6587\u6863"),(0,i.kt)("p",null,"\u672c\u6587\u7ffb\u8bd1\u81ea\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://json-schema.org/draft/2020-12/json-schema-core.html"},"JSON Schema: A Media Type for Describing JSON Documents"),"."),(0,i.kt)("h2",{id:"\u6458\u8981abstract"},"\u6458\u8981\uff08Abstract\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'JSON Schema defines the media type "application/schema+json", a JSON-based format for describing the structure of JSON data.\nJSON Schema asserts what a JSON document must look like, ways to extract information from it, and how to interact with it. The "application/schema-instance+json" media type provides additional feature-rich integration with "application/schema+json" beyond what can be offered for "application/json" documents.')),(0,i.kt)("p",null,"JSON Schema \u5b9a\u4e49\u4e86\u5a92\u4f53\u7c7b\u578b ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json"),"\uff0c\u8fd9\u662f\u4e00\u79cd\u57fa\u4e8e JSON \u7684\u683c\u5f0f\uff0c\u7528\u4e8e\u63cf\u8ff0 JSON \u6570\u636e\u7684\u7ed3\u6784\u3002\nJSON Schema \u5b9a\u4e49\u4e86 JSON \u6587\u6863\u7684\u5185\u5bb9\u7ed3\u6784\uff0c\u4ece\u4e2d\u63d0\u53d6\u4fe1\u606f\u7684\u65b9\u6cd5\u4ee5\u53ca\u5982\u4f55\u4e0e\u5176\u4ea4\u4e92\u3002",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema-instance+json")," \u5a92\u4f53\u7c7b\u578b\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json")," \u63d0\u4f9b\u4e86\u989d\u5916\u7684\u529f\u80fd\u4e30\u5bcc\u7684\u96c6\u6210\uff0c\u8d85\u51fa\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},"application/json")," \u6587\u6863\u6240\u80fd\u63d0\u4f9b\u7684\u5185\u5bb9\u3002"),(0,i.kt)("h2",{id:"1-\u5f15\u8a00introduction"},"1. \u5f15\u8a00\uff08Introduction\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"JSON Schema is a JSON media type for defining the structure of JSON data. JSON Schema is intended to define validation, documentation, hyperlink navigation, and interaction control of JSON data."),(0,i.kt)("p",null,"This specification defines JSON Schema core terminology and mechanisms, including pointing to another JSON Schema by reference, dereferencing a JSON Schema reference, specifying the dialect being used, specifying a dialect's vocabulary requirements, and defining the expected output."),(0,i.kt)("p",null,"Other specifications define the vocabularies that perform assertions about validation, linking, annotation, navigation, and interaction.")),(0,i.kt)("p",null,"JSON Schema \u662f\u4e00\u79cd\u7528\u4e8e\u5b9a\u4e49 JSON \u6570\u636e\u7ed3\u6784\u7684 JSON \u5a92\u4f53\u7c7b\u578b\u3002JSON Schema \u65e8\u5728\u5b9a\u4e49 JSON \u6570\u636e\u7684\u9a8c\u8bc1\u3001\u6587\u6863\u3001\u8d85\u94fe\u63a5\u5bfc\u822a\u548c\u4ea4\u4e92\u63a7\u5236\u3002"),(0,i.kt)("p",null,"\u672c\u89c4\u8303\u5b9a\u4e49\u4e86 JSON Schema \u6838\u5fc3\u672f\u8bed\u548c\u673a\u5236\uff0c\u5305\u62ec\u901a\u8fc7\u5f15\u7528\u6307\u5411\u53e6\u4e00\u4e2a JSON Schema\u3001\u53d6\u6d88\u5f15\u7528 JSON Schema \u5f15\u7528\u3001\u6307\u5b9a\u6b63\u5728\u4f7f\u7528\u7684\u65b9\u8a00\uff08dialect\uff09\u3001\u6307\u5b9a\u65b9\u8a00\u7684\u8bcd\u6c47\u8868\uff08vocabulary\uff09\u8981\u6c42\u4ee5\u53ca\u5b9a\u4e49\u9884\u671f\u8f93\u51fa\u3002"),(0,i.kt)("p",null,"\u5176\u4ed6\u89c4\u8303\u5b9a\u4e49\u4e86\u7528\u4e8e\u6267\u884c\u5173\u4e8e\u9a8c\u8bc1\uff08validation\uff09\u3001\u94fe\u63a5\uff08linking\uff09\u3001\u6ce8\u91ca\uff08annotation\uff09\u3001\u5bfc\u822a\uff08navigation\uff09\u548c\u4ea4\u4e92\uff08interaction\uff09\u7684\u65ad\u8a00\u7684\u8bcd\u6c47\u8868\u3002"),(0,i.kt)("h2",{id:"2-\u7ea6\u5b9a\u548c\u672f\u8bedconventions-and-terminology"},"2. \u7ea6\u5b9a\u548c\u672f\u8bed\uff08Conventions and Terminology\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in ',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc2119"},"RFC 2119"),"."),(0,i.kt)("p",null,'The terms "JSON", "JSON text", "JSON value", "member", "element", "object", "array", "number", "string", "boolean", "true", "false", and "null" in this document are to be interpreted as defined in ',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8259"},"RFC 8259"),".")),(0,i.kt)("p",null,'\u672c\u6587\u6863\u4e2d\u7684\u5173\u952e\u8bcd "\u5fc5\u987b"\uff08MUST\uff09\uff0c"\u5fc5\u987b\u4e0d"\uff08MUST NOT\uff09\uff0c"\u8981\u6c42"\uff08REQUIRED\uff09\uff0c"\u5e94"\uff08SHALL\uff09\uff0c"\u4e0d\u5e94"\uff08SHALL NOT\uff09\uff0c"\u5e94\u8be5"\uff08SHOULD\uff09\uff0c"\u4e0d\u5e94\u8be5"\uff08SHOULD NOT\uff09\uff0c"\u5efa\u8bae"\uff08RECOMMENDED\uff09\uff0c"\u53ef\u4ee5"\uff08MAY\uff09\u548c "\u53ef\u9009"\uff08OPTIONAL\uff09\u5e94\u6309\u7167 ',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc2119"},"RFC 2119")," \u4e2d\u7684\u63cf\u8ff0\u8fdb\u884c\u89e3\u91ca\u3002"),(0,i.kt)("p",null,'\u672c\u6587\u6863\u4e2d\u7684\u672f\u8bed "JSON"\u3001"JSON text"\u3001"JSON value"\u3001"member"\u3001"element"\u3001"object"\u3001"array"\u3001"number"\u3001"string"\u3001"boolean"\u3001"true"\u3001"false" \u548c "null" \u5e94\u6309\u7167 ',(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8259"},"RFC 8259")," \u4e2d\u7684\u5b9a\u4e49\u8fdb\u884c\u89e3\u91ca\u3002"),(0,i.kt)("h2",{id:"3-\u6982\u8ff0overview"},"3. \u6982\u8ff0\uff08Overview\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'This document proposes a new media type "application/schema+json" to identify a JSON Schema for describing JSON data. It also proposes a further optional media type, "application/schema-instance+json", to provide additional integration features. JSON Schemas are themselves JSON documents. This, and related specifications, define keywords allowing authors to describe JSON data in several ways.'),(0,i.kt)("p",null,"JSON Schema uses keywords to assert constraints on JSON instances or annotate those instances with additional information. Additional keywords are used to apply assertions and annotations to more complex JSON data structures, or based on some sort of condition."),(0,i.kt)("p",null,"To facilitate re-use, keywords can be organized into vocabularies. A vocabulary consists of a list of keywords, together with their syntax and semantics. A dialect is defined as a set of vocabularies and their required support identified in a meta-schema."),(0,i.kt)("p",null,"JSON Schema can be extended either by defining additional vocabularies, or less formally by defining additional keywords outside of any vocabulary. Unrecognized individual keywords simply have their values collected as annotations, while the behavior with respect to an unrecognized vocabulary can be controlled when declaring which vocabularies are in use."),(0,i.kt)("p",null,'This document defines a core vocabulary that MUST be supported by any implementation, and cannot be disabled. Its keywords are each prefixed with a "$" character to emphasize their required nature. This vocabulary is essential to the functioning of the "application/schema+json" media type, and is used to bootstrap the loading of other vocabularies.'),(0,i.kt)("p",null,"Additionally, this document defines a RECOMMENDED vocabulary of keywords for applying subschemas conditionally, and for applying subschemas to the contents of objects and arrays. Either this vocabulary or one very much like it is required to write schemas for non-trivial JSON instances, whether those schemas are intended for assertion validation, annotation, or both. While not part of the required core vocabulary, for maximum interoperability this additional vocabulary is included in this document and its use is strongly encouraged."),(0,i.kt)("p",null,"Further vocabularies for purposes such as structural validation or hypermedia annotation are defined in other documents. These other documents each define a dialect collecting the standard sets of vocabularies needed to write schemas for that document's purpose.")),(0,i.kt)("p",null,"\u672c\u6587\u6863\u63d0\u8bae\u4e00\u79cd\u65b0\u7684\u5a92\u4f53\u7c7b\u578b ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json"),"\uff0c\u7528\u4e8e\u6807\u8bc6\u63cf\u8ff0 JSON \u6570\u636e\u7684 JSON \u6a21\u5f0f\u3002\u5b83\u8fd8\u63d0\u8bae\u4e86\u53e6\u4e00\u79cd\u53ef\u9009\u7684\u5a92\u4f53\u7c7b\u578b ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema-instance+json"),"\uff0c\u4ee5\u63d0\u4f9b\u5176\u4ed6\u96c6\u6210\u529f\u80fd\u3002JSON \u6a21\u5f0f\u672c\u8eab\u662f JSON \u6587\u6863\u3002\u6b64\u7c7b\u53ca\u76f8\u5173\u89c4\u8303\u5b9a\u4e49\u4e86\u5141\u8bb8\u4f5c\u8005\u4ee5\u591a\u79cd\u65b9\u5f0f\u63cf\u8ff0 JSON \u6570\u636e\u7684\u5173\u952e\u5b57\u3002"),(0,i.kt)("p",null,"JSON Schema \u4f7f\u7528\u5173\u952e\u5b57\u5bf9 JSON \u5b9e\u4f8b\u8fdb\u884c\u7ea6\u675f\u6216\u7528\u9644\u52a0\u4fe1\u606f\u5bf9\u8fd9\u4e9b\u5b9e\u4f8b\u8fdb\u884c\u6ce8\u91ca\u3002\u5176\u4ed6\u5173\u952e\u5b57\u7528\u4e8e\u5bf9\u66f4\u590d\u6742\u7684 JSON \u6570\u636e\u7ed3\u6784\u5e94\u7528\u65ad\u8a00\u548c\u6ce8\u91ca\uff0c\u6216\u57fa\u4e8e\u67d0\u79cd\u6761\u4ef6\u3002"),(0,i.kt)("p",null,"\u4e3a\u4e86\u4fbf\u4e8e\u91cd\u7528\uff0c\u5173\u952e\u5b57\u53ef\u4ee5\u7ec4\u7ec7\u6210\u8bcd\u6c47\u8868\u3002\u4e00\u4e2a\u8bcd\u6c47\u8868\u7531\u4e00\u7ec4\u5173\u952e\u5b57\u53ca\u5176\u8bed\u6cd5\u548c\u8bed\u4e49\u7ec4\u6210\u3002\u4e00\u79cd\u65b9\u8a00\u88ab\u5b9a\u4e49\u4e3a\u4e00\u7ec4\u8bcd\u6c47\u8868\u53ca\u5176\u5728\u5143\u6a21\u5f0f\u4e2d\u786e\u5b9a\u7684\u6240\u9700\u652f\u6301\u3002"),(0,i.kt)("p",null,"JSON Schema \u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u989d\u5916\u7684\u8bcd\u6c47\u8868\u6216\u8005\u5728\u8bcd\u6c47\u8868\u4e4b\u5916\u975e\u6b63\u5f0f\u5730\u5b9a\u4e49\u989d\u5916\u7684\u5173\u952e\u5b57\u6765\u6269\u5c55\u3002\u65e0\u6cd5\u8bc6\u522b\u7684\u5355\u4e2a\u5173\u952e\u5b57\u4f1a\u5c06\u5176\u503c\u4f5c\u4e3a\u6ce8\u91ca\u6536\u96c6\uff0c\u800c\u5728\u58f0\u660e\u6b63\u5728\u4f7f\u7528\u7684\u8bcd\u6c47\u8868\u65f6\uff0c\u53ef\u4ee5\u63a7\u5236\u5bf9\u65e0\u6cd5\u8bc6\u522b\u7684\u8bcd\u6c47\u8868\u7684\u884c\u4e3a\u3002"),(0,i.kt)("p",null,'\u672c\u6587\u6863\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6838\u5fc3\u8bcd\u6c47\u8868\uff0c\u5fc5\u987b\u7531\u4efb\u4f55\u5b9e\u73b0\u652f\u6301\uff0c\u5e76\u4e14\u4e0d\u80fd\u88ab\u7981\u7528\u3002\u5176\u5173\u952e\u5b57\u90fd\u4ee5 "$" \u5b57\u7b26\u4e3a\u524d\u7f00\uff0c\u4ee5\u5f3a\u8c03\u5176\u5fc5\u9700\u6027\u3002\u8fd9\u4e2a\u8bcd\u6c47\u8868\u5bf9\u4e8e "application/schema+json" \u5a92\u4f53\u7c7b\u578b\u7684\u529f\u80fd\u81f3\u5173\u91cd\u8981\uff0c\u5e76\u7528\u4e8e\u5f15\u5bfc\u5176\u4ed6\u8bcd\u6c47\u8868\u7684\u52a0\u8f7d\u3002'),(0,i.kt)("p",null,"\u6b64\u5916\uff0c\u672c\u6587\u6863\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5efa\u8bae\u7684\u5173\u952e\u5b57\u8bcd\u6c47\u8868\uff0c\u7528\u4e8e\u6709\u6761\u4ef6\u5730\u5e94\u7528\u5b50\u6a21\u5f0f\uff0c\u4ee5\u53ca\u5c06\u5b50\u6a21\u5f0f\u5e94\u7528\u4e8e\u5bf9\u8c61\u548c\u6570\u7ec4\u7684\u5185\u5bb9\u3002\u4e3a\u4e86\u7f16\u5199\u7528\u4e8e\u65ad\u8a00\u9a8c\u8bc1\u3001\u6ce8\u91ca\u6216\u4e24\u8005\u517c\u800c\u6709\u4e4b\u7684\u975e\u5e73\u51e1 JSON \u5b9e\u4f8b\u7684\u6a21\u5f0f\uff0c\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a\u8bcd\u6c47\u8868\u6216\u7c7b\u4f3c\u7684\u8bcd\u6c47\u8868\u3002\u867d\u7136\u4e0d\u662f\u5fc5\u9700\u7684\u6838\u5fc3\u8bcd\u6c47\u8868\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u4e3a\u4e86\u6700\u5927\u7684\u4e92\u64cd\u4f5c\u6027\uff0c\u672c\u6587\u6863\u5305\u542b\u4e86\u8fd9\u4e2a\u9644\u52a0\u8bcd\u6c47\u8868\uff0c\u5e76\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528\u3002"),(0,i.kt)("p",null,"\u5176\u4ed6\u6587\u6863\u4e2d\u5b9a\u4e49\u4e86\u7528\u4e8e\u7ed3\u6784\u9a8c\u8bc1\u6216\u8d85\u5a92\u4f53\u6ce8\u91ca\u7b49\u76ee\u7684\u7684\u66f4\u591a\u8bcd\u6c47\u8868\u3002\u8fd9\u4e9b\u5176\u4ed6\u6587\u6863\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b9\u8a00\uff0c\u6536\u96c6\u7f16\u5199\u7528\u4e8e\u8be5\u6587\u6863\u76ee\u7684\u7684\u6a21\u5f0f\u6240\u9700\u7684\u6807\u51c6\u8bcd\u6c47\u8868\u96c6\u5408\u3002"),(0,i.kt)("h2",{id:"4-\u5b9a\u4e49definitions"},"4. \u5b9a\u4e49\uff08Definitions\uff09"),(0,i.kt)("h3",{id:"41-json-\u6587\u6863"},"4.1 JSON \u6587\u6863"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"A JSON document is an information resource (series of octets) described by the application/json media type."),(0,i.kt)("p",null,'In JSON Schema, the terms "JSON document", "JSON text", and "JSON value" are interchangeable because of the data model it defines.'),(0,i.kt)("p",null,"JSON Schema is only defined over JSON documents. However, any document or memory structure that can be parsed into or processed according to the JSON Schema data model can be interpreted against a JSON Schema, including media types like ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8949"},"CBOR"),".")),(0,i.kt)("p",null,'JSON \u6587\u6863\u662f\u4e00\u4e2a\u7531 application/json \u5a92\u4f53\u7c7b\u578b\u63cf\u8ff0\u7684\u4fe1\u606f\u8d44\u6e90\uff08\u4e00\u7cfb\u5217\u516b\u4f4d\u5b57\u8282\u7ec4\uff09\u3002\n\u5728 JSON Schema \u4e2d\uff0c\u672f\u8bed "JSON \u6587\u6863"\u3001"JSON \u6587\u672c" \u548c "JSON \u503c" \u662f\u53ef\u4ee5\u4e92\u6362\u7684\uff0c\u56e0\u4e3a\u5b83\u5b9a\u4e49\u4e86\u6570\u636e\u6a21\u578b\u3002'),(0,i.kt)("p",null,"JSON Schema \u53ea\u9488\u5bf9 JSON \u6587\u6863\u8fdb\u884c\u5b9a\u4e49\u3002\u7136\u800c\uff0c\u4efb\u4f55\u53ef\u4ee5\u89e3\u6790\u4e3a JSON Schema \u6570\u636e\u6a21\u578b\u7684\u6587\u6863\u6216\u5185\u5b58\u7ed3\u6784\u90fd\u53ef\u4ee5\u6839\u636e JSON Schema \u8fdb\u884c\u89e3\u91ca\uff0c\u5305\u62ec\u50cf ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc8949"},"CBOR")," \u8fd9\u6837\u7684\u5a92\u4f53\u7c7b\u578b\u3002"),(0,i.kt)("h3",{id:"42-\u5b9e\u4f8binstance"},"4.2 \u5b9e\u4f8b\uff08Instance\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'A JSON document to which a schema is applied is known as an "instance".'),(0,i.kt)("p",null,'JSON Schema is defined over "application/json" or compatible documents, including media types with the "+json" structured syntax suffix.'),(0,i.kt)("p",null,'Among these, this specification defines the "application/schema-instance+json" media type which defines handling for fragments in the URI.')),(0,i.kt)("p",null,'\u5e94\u7528\u4e86\u4e00\u4e2a\u6a21\u5f0f\u7684 JSON \u6587\u6863\u88ab\u79f0\u4e3a "\u5b9e\u4f8b"\u3002'),(0,i.kt)("p",null,"JSON Schema \u662f\u9488\u5bf9 ",(0,i.kt)("inlineCode",{parentName:"p"},"application/json")," \u6216\u517c\u5bb9\u6587\u6863\u5b9a\u4e49\u7684\uff0c\u5305\u62ec\u5177\u6709 ",(0,i.kt)("inlineCode",{parentName:"p"},"+json")," \u7ed3\u6784\u5316\u8bed\u6cd5\u540e\u7f00\u7684\u5a92\u4f53\u7c7b\u578b\u3002"),(0,i.kt)("p",null,"\u5728\u8fd9\u4e9b\u5a92\u4f53\u7c7b\u578b\u4e2d\uff0c\u672c\u89c4\u8303\u5b9a\u4e49\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema-instance+json")," \u5a92\u4f53\u7c7b\u578b\uff0c\u5b83\u4e3a URI \u4e2d\u7684\u7247\u6bb5\u5b9a\u4e49\u4e86\u5904\u7406\u89c4\u5219\u3002"),(0,i.kt)("h4",{id:"421-\u5b9e\u4f8b\u6570\u636e\u6a21\u578binstance-data-model"},"4.2.1 \u5b9e\u4f8b\u6570\u636e\u6a21\u578b\uff08Instance Data Model\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'JSON Schema interprets documents according to a data model. A JSON value interpreted according to this data model is called an "instance".'),(0,i.kt)("p",null,"An instance has one of six primitive types, and a range of possible values depending on the type:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'null: A JSON "null" value'),(0,i.kt)("li",{parentName:"ul"},'boolean: A "true" or "false" value, from the JSON "true" or "false" value'),(0,i.kt)("li",{parentName:"ul"},'object: An unordered set of properties mapping a string to an instance, from the JSON "object" value'),(0,i.kt)("li",{parentName:"ul"},'array: An ordered list of instances, from the JSON "array" value'),(0,i.kt)("li",{parentName:"ul"},'number: An arbitrary-precision, base-10 decimal number value, from the JSON "number" value'),(0,i.kt)("li",{parentName:"ul"},'string: A string of Unicode code points, from the JSON "string" value')),(0,i.kt)("p",null,"Whitespace and formatting concerns, including different lexical representations of numbers that are equal within the data model, are thus outside the scope of JSON Schema. JSON Schema vocabularies (Section 8.1) that wish to work with such differences in lexical representations SHOULD define keywords to precisely interpret formatted strings within the data model rather than relying on having the original JSON representation Unicode characters available."),(0,i.kt)("p",null,"Since an object cannot have two properties with the same key, behavior for a JSON document that tries to define two properties with the same key in a single object is undefined."),(0,i.kt)("p",null,'Note that JSON Schema vocabularies are free to define their own extended type system. This should not be confused with the core data model types defined here. As an example, "integer" is a reasonable type for a vocabulary to define as a value for a keyword, but the data model makes no distinction between integers and other numbers.')),(0,i.kt)("p",null,'JSON Schema \u6839\u636e\u6570\u636e\u6a21\u578b\u89e3\u91ca\u6587\u6863\u3002\u6839\u636e\u8fd9\u4e2a\u6570\u636e\u6a21\u578b\u89e3\u91ca\u7684 JSON \u503c\u88ab\u79f0\u4e3a "\u5b9e\u4f8b"\u3002'),(0,i.kt)("p",null,"\u5b9e\u4f8b\u6709\u516d\u79cd\u57fa\u672c\u7c7b\u578b\uff0c\u53d6\u51b3\u4e8e\u7c7b\u578b\uff0c\u53ef\u4ee5\u6709\u4e00\u7cfb\u5217\u53ef\u80fd\u7684\u503c\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"null"),'\uff1aJSON "null" \u503c'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),'\uff1aJSON "true" \u6216 "false" \u503c\u7684 "true" \u6216 "false" \u503c'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"object"),'\uff1a\u4e00\u4e2a\u5c06\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u5b9e\u4f8b\u7684\u65e0\u5e8f\u5c5e\u6027\u96c6\uff0c\u6765\u81ea JSON "object" \u503c'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"array"),'\uff1a\u5b9e\u4f8b\u7684\u6709\u5e8f\u5217\u8868\uff0c\u6765\u81ea JSON "array" \u503c'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"number"),'\uff1a\u4efb\u610f\u7cbe\u5ea6\u3001\u57fa\u6570\u4e3a10\u7684\u5341\u8fdb\u5236\u6570\u5b57\u503c\uff0c\u6765\u81ea JSON "number" \u503c'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string"),'\uff1aUnicode \u4ee3\u7801\u70b9\u7684\u5b57\u7b26\u4e32\uff0c\u6765\u81ea JSON "string" \u503c')),(0,i.kt)("p",null,"\u56e0\u6b64\uff0c\u7a7a\u767d\u548c\u683c\u5f0f\u95ee\u9898\uff08\u4f8b\u5982\uff0c\u6570\u636e\u6a21\u578b\u4e2d\u76f8\u7b49\u7684\u6570\u5b57\u7684\u4e0d\u540c\u8bcd\u6cd5\u8868\u793a\uff09\u4e0d\u5728 JSON Schema \u7684\u8303\u56f4\u5185\u3002\u5e0c\u671b\u5904\u7406\u8bcd\u6cd5\u8868\u793a\u5dee\u5f02\u7684 JSON Schema \u8bcd\u6c47\u8868\uff08\u7b2c 8.1 \u8282\uff09\u5e94\u8be5\u5b9a\u4e49\u5173\u952e\u5b57\uff0c\u4ee5\u4fbf\u5728\u6570\u636e\u6a21\u578b\u4e2d\u7cbe\u786e\u89e3\u91ca\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u4e8e\u539f\u59cb JSON \u8868\u793a\u7684 Unicode \u5b57\u7b26\u3002"),(0,i.kt)("p",null,"\u7531\u4e8e\u5bf9\u8c61\u4e0d\u80fd\u6709\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u952e\u7684\u5c5e\u6027\uff0c\u6240\u4ee5\u5728\u5355\u4e2a\u5bf9\u8c61\u4e2d\u5c1d\u8bd5\u5b9a\u4e49\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u952e\u7684\u5c5e\u6027\u7684 JSON \u6587\u6863\u7684\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\u3002"),(0,i.kt)("p",null,'\u8bf7\u6ce8\u610f\uff0cJSON Schema \u8bcd\u6c47\u8868\u53ef\u4ee5\u81ea\u7531\u5730\u5b9a\u4e49\u81ea\u5df1\u7684\u6269\u5c55\u7c7b\u578b\u7cfb\u7edf\u3002\u8fd9\u4e0d\u5e94\u4e0e\u6b64\u5904\u5b9a\u4e49\u7684\u6838\u5fc3\u6570\u636e\u6a21\u578b\u7c7b\u578b\u6df7\u6dc6\u3002\u4f8b\u5982\uff0c"integer" \u662f\u4e00\u4e2a\u5408\u7406\u7684\u7c7b\u578b\uff0c\u8bcd\u6c47\u8868\u53ef\u4ee5\u5c06\u5176\u5b9a\u4e49\u4e3a\u5173\u952e\u5b57\u7684\u503c\uff0c\u4f46\u6570\u636e\u6a21\u578b\u4e0d\u533a\u5206\u6574\u6570\u548c\u5176\u4ed6\u6570\u5b57\u3002'),(0,i.kt)("h4",{id:"422-\u5b9e\u4f8b\u76f8\u7b49instance-equality"},"4.2.2 \u5b9e\u4f8b\u76f8\u7b49\uff08Instance Equality\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"Two JSON instances are said to be equal if and only if they are of the same type and have the same value according to the data model. Specifically, this means:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"both are null; or\nboth are true; or\nboth are false; or\nboth are strings, and are the same codepoint-for-codepoint; or\nboth are numbers, and have the same mathematical value; or\nboth are arrays, and have an equal value item-for-item; or\nboth are objects, and each property in one has exactly one property with a key equal to the other's, and that other property has an equal value.\n")),(0,i.kt)("p",null,"Implied in this definition is that arrays must be the same length, objects must have the same number of members, properties in objects are unordered, there is no way to define multiple properties with the same key, and mere formatting differences (indentation, placement of commas, trailing zeros) are insignificant.")),(0,i.kt)("p",null,"\u5982\u679c\u4e24\u4e2a JSON \u5b9e\u4f8b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u5e76\u6839\u636e\u6570\u636e\u6a21\u578b\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u5b83\u4eec\u88ab\u8ba4\u4e3a\u662f\u76f8\u7b49\u7684\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u4e24\u8005\u90fd\u662f null\uff1b\u6216\n\u4e24\u8005\u90fd\u662f true\uff1b\u6216\n\u4e24\u8005\u90fd\u662f false\uff1b\u6216\n\u4e24\u8005\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5728\u6bcf\u4e2a\u4ee3\u7801\u70b9\u4e0a\u76f8\u540c\uff1b\u6216\n\u4e24\u8005\u90fd\u662f\u6570\u5b57\uff0c\u5e76\u5177\u6709\u76f8\u540c\u7684\u6570\u5b66\u503c\uff1b\u6216\n\u4e24\u8005\u90fd\u662f\u6570\u7ec4\uff0c\u5e76\u4e14\u6309\u9879\u5177\u6709\u76f8\u7b49\u7684\u503c\uff1b\u6216\n\u4e24\u8005\u90fd\u662f\u5bf9\u8c61\uff0c\u5e76\u4e14\u5176\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u7684\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u4e00\u4e2a\u952e\u7b49\u4e8e\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u4e14\u53e6\u4e00\u4e2a\u5c5e\u6027\u5177\u6709\u76f8\u7b49\u7684\u503c\n")),(0,i.kt)("p",null,"\u8fd9\u4e2a\u5b9a\u4e49\u6697\u793a\uff0c\u6570\u7ec4\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u5bf9\u8c61\u5fc5\u987b\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u6210\u5458\uff0c\u5bf9\u8c61\u4e2d\u7684\u5c5e\u6027\u662f\u65e0\u5e8f\u7684\uff0c\u4e0d\u80fd\u5b9a\u4e49\u5177\u6709\u76f8\u540c\u952e\u7684\u591a\u4e2a\u5c5e\u6027\uff0c\u4ec5\u683c\u5f0f\u5dee\u5f02\uff08\u7f29\u8fdb\u3001\u9017\u53f7\u4f4d\u7f6e\u3001\u5c3e\u968f\u96f6\uff09\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002"),(0,i.kt)("h4",{id:"423-\u975e-json-\u5b9e\u4f8bnon-json-instances"},"4.2.3 \u975e JSON \u5b9e\u4f8b\uff08Non-JSON Instances\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"It is possible to use JSON Schema with a superset of the JSON Schema data model, where an instance may be outside any of the six JSON data types."),(0,i.kt)("p",null,"In this case, annotations still apply; but most validation keywords will not be useful, as they will always pass or always fail."),(0,i.kt)("p",null,'A custom vocabulary may define support for a superset of the core data model. The schema itself may only be expressible in this superset; for example, to make use of the "const" keyword.')),(0,i.kt)("p",null,"\u53ef\u4ee5\u5728 JSON Schema \u6570\u636e\u6a21\u578b\u7684\u8d85\u96c6\u4e2d\u4f7f\u7528 JSON Schema\uff0c\u5176\u4e2d\u5b9e\u4f8b\u53ef\u80fd\u8d85\u51fa JSON \u7684\u516d\u79cd\u6570\u636e\u7c7b\u578b\u4e4b\u5916\u3002"),(0,i.kt)("p",null,"\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6ce8\u91ca\u4ecd\u7136\u9002\u7528\uff1b\u4f46\u5927\u591a\u6570\u9a8c\u8bc1\u5173\u952e\u5b57\u53ef\u80fd\u6ca1\u6709\u7528\u5904\uff0c\u56e0\u4e3a\u5b83\u4eec\u603b\u662f\u901a\u8fc7\u6216\u603b\u662f\u5931\u8d25\u3002"),(0,i.kt)("p",null,"\u81ea\u5b9a\u4e49\u8bcd\u6c47\u8868\u53ef\u4ee5\u5b9a\u4e49\u5bf9\u6838\u5fc3\u6570\u636e\u6a21\u578b\u7684\u8d85\u96c6\u7684\u652f\u6301\u3002\u6a21\u5f0f\u672c\u8eab\u53ef\u80fd\u53ea\u80fd\u5728\u8fd9\u4e2a\u8d85\u96c6\u4e2d\u8868\u793a\uff1b\u4f8b\u5982\uff0c\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," \u5173\u952e\u5b57\u3002"),(0,i.kt)("h3",{id:"43-json-schema-\u6587\u6863"},"4.3. JSON Schema \u6587\u6863"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'A JSON Schema document, or simply a schema, is a JSON document used to describe an instance. A schema can itself be interpreted as an instance, but SHOULD always be given the media type "application/schema+json" rather than "application/schema-instance+json". The "application/schema+json" media type is defined to offer a superset of the fragment identifier syntax and semantics provided by "application/schema-instance+json".'),(0,i.kt)("p",null,"A JSON Schema MUST be an object or a boolean.")),(0,i.kt)("p",null,"JSON Schema \u6587\u6863\uff0c\u6216\u7b80\u79f0\u4e3a\u6a21\u5f0f\uff0c\u662f\u7528\u4e8e\u63cf\u8ff0\u5b9e\u4f8b\u7684 JSON \u6587\u6863\u3002\u6a21\u5f0f\u672c\u8eab\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a\u5b9e\u4f8b\uff0c\u4f46\u5e94\u59cb\u7ec8\u4f7f\u7528\u5a92\u4f53\u7c7b\u578b ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json")," \u800c\u4e0d\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema-instance+json"),"\u3002",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json")," \u5a92\u4f53\u7c7b\u578b\u88ab\u5b9a\u4e49\u4e3a\u63d0\u4f9b\u8d85\u8fc7 ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema-instance+json")," \u63d0\u4f9b\u7684\u7247\u6bb5\u6807\u8bc6\u7b26\u8bed\u6cd5\u548c\u8bed\u4e49\u7684\u8d85\u96c6\u3002"),(0,i.kt)("p",null,"JSON Schema \u5fc5\u987b\u662f\u4e00\u4e2a\u5bf9\u8c61\uff08object\uff09\u6216\u5e03\u5c14\u503c\uff08boolean\uff09\u3002"),(0,i.kt)("h4",{id:"431-json-schema-\u5bf9\u8c61objects\u548c\u5173\u952e\u5b57keywords"},"4.3.1. JSON Schema \u5bf9\u8c61\uff08Objects\uff09\u548c\u5173\u952e\u5b57\uff08Keywords\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),"Object properties that are applied to the instance are called keywords, or schema keywords. Broadly speaking, keywords fall into one of five categories:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"identifiers: control schema identification through setting a URI for the schema and/or changing how the base URI is determined\nassertions: produce a boolean result when applied to an instance\nannotations: attach information to an instance for application use\napplicators: apply one or more subschemas to a particular location in the instance, and combine or modify their results\nreserved locations: do not directly affect results, but reserve a place for a specific purpose to ensure interoperability\n")),(0,i.kt)("p",null,"Keywords may fall into multiple categories, although applicators SHOULD only produce assertion results based on their subschemas' results. They should not define additional constraints independent of their subschemas."),(0,i.kt)("p",null,"Keywords which are properties within the same schema object are referred to as adjacent keywords."),(0,i.kt)("p",null,"Extension keywords, meaning those defined outside of this document and its companions, are free to define other behaviors as well."),(0,i.kt)("p",null,"A JSON Schema MAY contain properties which are not schema keywords. Unknown keywords SHOULD be treated as annotations, where the value of the keyword is the value of the annotation."),(0,i.kt)("p",null,"An empty schema is a JSON Schema with no properties, or only unknown properties.")),(0,i.kt)("p",null,"\u5e94\u7528\u4e8e\u5b9e\u4f8b\u7684\u5bf9\u8c61\u5c5e\u6027\u79f0\u4e3a\u5173\u952e\u5b57\u6216\u6a21\u5f0f\u5173\u952e\u5b57\u3002\u5927\u81f4\u4e0a\uff0c\u5173\u952e\u5b57\u53ef\u5206\u4e3a\u4e94\u7c7b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u6807\u8bc6\u7b26\uff08identifiers\uff09\uff1a\u901a\u8fc7\u4e3a\u6a21\u5f0f\u8bbe\u7f6e URI \u548c/\u6216\u66f4\u6539\u57fa\u672c URI \u7684\u786e\u5b9a\u65b9\u5f0f\u6765\u63a7\u5236\u6a21\u5f0f\u8bc6\u522b\n\u65ad\u8a00\uff08assertions\uff09\uff1a\u5728\u5e94\u7528\u4e8e\u5b9e\u4f8b\u65f6\u4ea7\u751f\u5e03\u5c14\u7ed3\u679c\n\u6ce8\u89e3\uff08annotations\uff09\uff1a\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u9644\u52a0\u4fe1\u606f\u5230\u5b9e\u4f8b\n\u4fee\u6539\u5668\uff08applicators\uff09\uff1a\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u6a21\u5f0f\u5e94\u7528\u4e8e\u5b9e\u4f8b\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\uff0c\u5e76\u7ec4\u5408\u6216\u4fee\u6539\u5b83\u4eec\u7684\u7ed3\u679c\n\u4fdd\u7559\u4f4d\u7f6e\uff08reserved locations\uff09\uff1a\u4e0d\u76f4\u63a5\u5f71\u54cd\u7ed3\u679c\uff0c\u4f46\u4e3a\u786e\u4fdd\u4e92\u64cd\u4f5c\u6027\u4fdd\u7559\u4e00\u4e2a\u7279\u5b9a\u76ee\u7684\u7684\u4f4d\u7f6e\n")),(0,i.kt)("p",null,"\u5173\u952e\u5b57\u53ef\u80fd\u5c5e\u4e8e\u591a\u4e2a\u7c7b\u522b\uff0c\u5c3d\u7ba1\u5e94\u7528\u7a0b\u5e8f\u5e94\u4ec5\u6839\u636e\u5176\u5b50\u6a21\u5f0f\u7684\u7ed3\u679c\u4ea7\u751f\u65ad\u8a00\u7ed3\u679c\u3002\u5b83\u4eec\u4e0d\u5e94\u5b9a\u4e49\u4e0e\u5176\u5b50\u6a21\u5f0f\u65e0\u5173\u7684\u5176\u4ed6\u7ea6\u675f\u3002"),(0,i.kt)("p",null,"\u5728\u540c\u4e00\u6a21\u5f0f\u5bf9\u8c61\u4e2d\u7684\u5c5e\u6027\u7684\u5173\u952e\u5b57\u88ab\u79f0\u4e3a\u76f8\u90bb\u5173\u952e\u5b57\u3002"),(0,i.kt)("p",null,"\u6269\u5c55\u5173\u952e\u5b57\uff0c\u5373\u5728\u672c\u6587\u6863\u53ca\u5176\u9644\u4ef6\u4e4b\u5916\u5b9a\u4e49\u7684\u5173\u952e\u5b57\uff0c\u4e5f\u53ef\u4ee5\u81ea\u7531\u5b9a\u4e49\u5176\u4ed6\u884c\u4e3a\u3002"),(0,i.kt)("p",null,"JSON Schema \u53ef\u80fd\u5305\u542b\u975e\u6a21\u5f0f\u5173\u952e\u5b57\u7684\u5c5e\u6027\u3002\u672a\u77e5\u5173\u952e\u5b57\u5e94\u88ab\u89c6\u4e3a\u6ce8\u89e3\uff0c\u5176\u4e2d\u5173\u952e\u5b57\u7684\u503c\u662f\u6ce8\u89e3\u7684\u503c\u3002"),(0,i.kt)("p",null,"\u7a7a\u6a21\u5f0f\u662f\u4e00\u4e2a\u6ca1\u6709\u5c5e\u6027\u6216\u53ea\u6709\u672a\u77e5\u5c5e\u6027\u7684 JSON Schema\u3002"),(0,i.kt)("h4",{id:"432-\u5e03\u5c14-json-schemas"},"4.3.2. \u5e03\u5c14 JSON Schemas"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,'The boolean schema values "true" and "false" are trivial schemas that always produce themselves as assertion results, regardless of the instance value. They never produce annotation results.'),(0,i.kt)("p",null,'These boolean schemas exist to clarify schema author intent and facilitate schema processing optimizations. They behave identically to the following schema objects (where "not" is part of the subschema application vocabulary defined in this document).'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'true: Always passes validation, as if the empty schema {}\nfalse: Always fails validation, as if the schema { "not": {} }\n')),(0,i.kt)("p",null,'While the empty schema object is unambiguous, there are many possible equivalents to the "false" schema. Using the boolean values ensures that the intent is clear to both human readers and implementations.')),(0,i.kt)("p",null,'\u5e03\u5c14\u6a21\u5f0f\u503c "true" \u548c "false" \u662f\u59cb\u7ec8\u4ea7\u751f\u5b83\u4eec\u81ea\u8eab\u4f5c\u4e3a\u65ad\u8a00\u7ed3\u679c\u7684\u7b80\u5355\u6a21\u5f0f\uff0c\u65e0\u8bba\u5b9e\u4f8b\u503c\u5982\u4f55\u3002\u5b83\u4eec\u4ece\u4e0d\u4ea7\u751f\u6ce8\u89e3\u7ed3\u679c\u3002'),(0,i.kt)("p",null,'\u8fd9\u4e9b\u5e03\u5c14\u6a21\u5f0f\u5b58\u5728\u662f\u4e3a\u4e86\u6f84\u6e05\u6a21\u5f0f\u4f5c\u8005\u7684\u610f\u56fe\u5e76\u4fc3\u8fdb\u6a21\u5f0f\u5904\u7406\u4f18\u5316\u3002\u5b83\u4eec\u7684\u884c\u4e3a\u4e0e\u4ee5\u4e0b\u6a21\u5f0f\u5bf9\u8c61\u5b8c\u5168\u76f8\u540c\uff08\u5176\u4e2d "not" \u662f\u672c\u6587\u6863\u4e2d\u5b9a\u4e49\u7684\u5b50\u6a21\u5f0f\u5e94\u7528\u8bcd\u6c47\u7684\u4e00\u90e8\u5206\uff09\u3002'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'`true`\uff1a\u59cb\u7ec8\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5c31\u50cf\u7a7a\u6a21\u5f0f `{}` \u4e00\u6837\n`false`\uff1a\u59cb\u7ec8\u65e0\u6cd5\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5c31\u50cf\u6a21\u5f0f `{ "not": {} }` \u4e00\u6837\n')),(0,i.kt)("p",null,'\u867d\u7136\u7a7a\u6a21\u5f0f\u5bf9\u8c61\u662f\u660e\u786e\u7684\uff0c\u4f46\u4e0e "false" \u6a21\u5f0f\u7b49\u4ef7\u7684\u53ef\u80fd\u6709\u5f88\u591a\u3002\u4f7f\u7528\u5e03\u5c14\u503c\u786e\u4fdd\u610f\u56fe\u5bf9\u4eba\u7c7b\u9605\u8bfb\u8005\u548c\u5b9e\u73b0\u90fd\u662f\u6e05\u6670\u7684\u3002'),(0,i.kt)("h4",{id:"433-\u6a21\u5f0f\u8bcd\u6c47\u8868schema-vocabularies"},"4.3.3. \u6a21\u5f0f\u8bcd\u6c47\u8868\uff08Schema Vocabularies\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),"A schema vocabulary, or simply a vocabulary, is a set of keywords, their syntax, and their semantics. A vocabulary is generally organized around a particular purpose. Different uses of JSON Schema, such as validation, hypermedia, or user interface generation, will involve different sets of vocabularies.",(0,i.kt)("p",null,"Vocabularies are the primary unit of re-use in JSON Schema, as schema authors can indicate what vocabularies are required or optional in order to process the schema. Since vocabularies are identified by URIs in the meta-schema, generic implementations can load extensions to support previously unknown vocabularies. While keywords can be supported outside of any vocabulary, there is no analogous mechanism to indicate individual keyword usage."),(0,i.kt)("p",null,"A schema vocabulary can be defined by anything from an informal description to a standards proposal, depending on the audience and interoperability expectations. In particular, in order to facilitate vocabulary use within non-public organizations, a vocabulary specification need not be published outside of its scope of use.")),(0,i.kt)("p",null,"\u6a21\u5f0f\u8bcd\u6c47\u8868\uff0c\u6216\u7b80\u79f0\u4e3a\u8bcd\u6c47\u8868\uff0c\u662f\u4e00\u7ec4\u5173\u952e\u5b57\u3001\u5b83\u4eec\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\u3002\u8bcd\u6c47\u8868\u901a\u5e38\u56f4\u7ed5\u7279\u5b9a\u76ee\u7684\u7ec4\u7ec7\u3002JSON Schema \u7684\u4e0d\u540c\u7528\u9014\uff0c\u5982\u9a8c\u8bc1\u3001\u8d85\u5a92\u4f53\u6216\u7528\u6237\u754c\u9762\u751f\u6210\uff0c\u5c06\u6d89\u53ca\u4e0d\u540c\u7684\u8bcd\u6c47\u8868\u96c6\u5408\u3002"),(0,i.kt)("p",null,"\u8bcd\u6c47\u8868\u662f JSON Schema \u4e2d\u4e3b\u8981\u7684\u53ef\u91cd\u7528\u5355\u5143\uff0c\u56e0\u4e3a\u6a21\u5f0f\u4f5c\u8005\u53ef\u4ee5\u6307\u793a\u5904\u7406\u6a21\u5f0f\u6240\u9700\u6216\u53ef\u9009\u7684\u8bcd\u6c47\u8868\u3002\u7531\u4e8e\u5143\u6a21\u5f0f\u4e2d\u7684\u8bcd\u6c47\u8868\u7531 URI \u6807\u8bc6\uff0c\u901a\u7528\u5b9e\u73b0\u53ef\u4ee5\u52a0\u8f7d\u6269\u5c55\u4ee5\u652f\u6301\u4ee5\u524d\u672a\u77e5\u7684\u8bcd\u6c47\u8868\u3002\u867d\u7136\u5173\u952e\u5b57\u53ef\u4ee5\u5728\u4efb\u4f55\u8bcd\u6c47\u8868\u4e4b\u5916\u5f97\u5230\u652f\u6301\uff0c\u4f46\u6ca1\u6709\u7c7b\u4f3c\u7684\u673a\u5236\u6765\u6307\u793a\u5355\u4e2a\u5173\u952e\u5b57\u7684\u4f7f\u7528\u3002"),(0,i.kt)("p",null,"\u6a21\u5f0f\u8bcd\u6c47\u8868\u53ef\u4ee5\u7531\u4ece\u975e\u6b63\u5f0f\u63cf\u8ff0\u5230\u6807\u51c6\u63d0\u6848\u7684\u4efb\u4f55\u5185\u5bb9\u5b9a\u4e49\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u53d7\u4f17\u548c\u4e92\u64cd\u4f5c\u6027\u671f\u671b\u3002\u7279\u522b\u662f\u4e3a\u4e86\u4fc3\u8fdb\u975e\u516c\u5171\u7ec4\u7ec7\u5185\u7684\u8bcd\u6c47\u8868\u4f7f\u7528\uff0c\u8bcd\u6c47\u8868\u89c4\u8303\u4e0d\u9700\u8981\u5728\u5176\u4f7f\u7528\u8303\u56f4\u4e4b\u5916\u53d1\u5e03\u3002"),(0,i.kt)("h4",{id:"434-\u5143\u6a21\u5f0fmeta-schemas"},"4.3.4. \u5143\u6a21\u5f0f\uff08Meta-Schemas\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"4.3.4. Meta-Schemas\nA schema that itself describes a schema is called a meta-schema. Meta-schemas are used to validate JSON Schemas and specify which vocabularies they are using."),(0,i.kt)("p",null,"Typically, a meta-schema will specify a set of vocabularies, and validate schemas that conform to the syntax of those vocabularies. However, meta-schemas and vocabularies are separate in order to allow meta-schemas to validate schema conformance more strictly or more loosely than the vocabularies' specifications call for. Meta-schemas may also describe and validate additional keywords that are not part of a formal vocabulary.")),(0,i.kt)("p",null,"\u7528\u6765\u63cf\u8ff0\u6a21\u5f0f\u7684\u6a21\u5f0f\u88ab\u79f0\u4e3a\u5143\u6a21\u5f0f\u3002\u5143\u6a21\u5f0f\u7528\u4e8e\u9a8c\u8bc1 JSON \u6a21\u5f0f\u5e76\u6307\u5b9a\u5b83\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u8bcd\u6c47\u8868\u3002"),(0,i.kt)("p",null,"\u901a\u5e38\uff0c\u5143\u6a21\u5f0f\u4f1a\u6307\u5b9a\u4e00\u7ec4\u8bcd\u6c47\u8868\uff0c\u5e76\u9a8c\u8bc1\u7b26\u5408\u8fd9\u4e9b\u8bcd\u6c47\u8868\u8bed\u6cd5\u7684\u6a21\u5f0f\u3002\u7136\u800c\uff0c\u5143\u6a21\u5f0f\u548c\u8bcd\u6c47\u8868\u662f\u5206\u5f00\u7684\uff0c\u4ee5\u4fbf\u5141\u8bb8\u5143\u6a21\u5f0f\u6bd4\u8bcd\u6c47\u8868\u7684\u89c4\u8303\u8981\u6c42\u66f4\u4e25\u683c\u6216\u66f4\u5bbd\u677e\u5730\u9a8c\u8bc1\u6a21\u5f0f\u4e00\u81f4\u6027\u3002\u5143\u6a21\u5f0f\u8fd8\u53ef\u4ee5\u63cf\u8ff0\u548c\u9a8c\u8bc1\u4e0d\u5c5e\u4e8e\u6b63\u5f0f\u8bcd\u6c47\u8868\u7684\u989d\u5916\u5173\u952e\u5b57\u3002"),(0,i.kt)("h4",{id:"435-\u6839\u6a21\u5f0f\u5b50\u6a21\u5f0f\u548c\u8d44\u6e90root-schema-and-subschemas-and-resources"},"4.3.5. \u6839\u6a21\u5f0f\u3001\u5b50\u6a21\u5f0f\u548c\u8d44\u6e90\uff08Root Schema and Subschemas and Resources\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),"A JSON Schema resource is a schema which is canonically [RFC6596] identified by an absolute URI [RFC3986]. Schema resources MAY also be identified by URIs, including URIs with fragments, if the resulting secondary resource (as defined by section 3.5 of RFC 3986 [RFC3986]) is identical to the primary resource. This can occur with the empty fragment, or when one schema resource is embedded in another. Any such URIs with fragments are considered to be non-canonical.",(0,i.kt)("p",null,"The root schema is the schema that comprises the entire JSON document in question. The root schema is always a schema resource, where the URI is determined as described in section 9.1.1. Note that documents that embed schemas in another format will not have a root schema resource in this sense. Exactly how such usages fit with the JSON Schema document and resource concepts will be clarified in a future draft."),(0,i.kt)("p",null,"Some keywords take schemas themselves, allowing JSON Schemas to be nested:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "title": "root",\n    "items": {\n        "title": "array item"\n    }\n}\n')),(0,i.kt)("p",null,'In this example document, the schema titled "array item" is a subschema, and the schema titled "root" is the root schema.'),(0,i.kt)("p",null,"As with the root schema, a subschema is either an object or a boolean."),(0,i.kt)("p",null,"As discussed in section 8.2.1, a JSON Schema document can contain multiple JSON Schema resources. When used without qualification, the term \"root schema\" refers to the document's root schema. In some cases, resource root schemas are discussed. A resource's root schema is its top-level schema object, which would also be a document root schema if the resource were to be extracted to a standalone JSON Schema document."),(0,i.kt)("p",null,"Whether multiple schema resources are embedded or linked with a reference, they are processed in the same way, with the same available behaviors.")),(0,i.kt)("p",null,"JSON Schema \u8d44\u6e90\u662f\u7531\u7edd\u5bf9 URI ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3986"},"RFC 3986")," \u89c4\u8303\u5316 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc6596"},"RFC 6596")," \u6807\u8bc6\u7684\u6a21\u5f0f\u3002\u6a21\u5f0f\u8d44\u6e90\u8fd8\u53ef\u4ee5\u901a\u8fc7 URI \u6807\u8bc6\uff0c\u5305\u62ec\u5e26\u6709\u7247\u6bb5\u7684 URI\uff0c\u5982\u679c\u7531\u6b64\u4ea7\u751f\u7684\u8f85\u52a9\u8d44\u6e90\uff08\u5982 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc3986"},"RFC 3986")," \u7b2c 3.5 \u8282\u5b9a\u4e49\u7684\uff09\u4e0e\u4e3b\u8d44\u6e90\u76f8\u540c\u3002\u8fd9\u53ef\u4ee5\u53d1\u751f\u5728\u7a7a\u7247\u6bb5\u4e2d\uff0c\u6216\u8005\u5f53\u4e00\u4e2a\u6a21\u5f0f\u8d44\u6e90\u5d4c\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5f0f\u8d44\u6e90\u4e2d\u3002\u4efb\u4f55\u8fd9\u6837\u7684\u5e26\u6709\u7247\u6bb5\u7684 URI \u90fd\u88ab\u8ba4\u4e3a\u662f\u975e\u89c4\u8303\u7684\u3002"),(0,i.kt)("p",null,"\u6839\u6a21\u5f0f\u662f\u7ec4\u6210\u6574\u4e2a JSON \u6587\u6863\u7684\u6a21\u5f0f\u3002\u6839\u6a21\u5f0f\u59cb\u7ec8\u662f\u4e00\u4e2a\u6a21\u5f0f\u8d44\u6e90\uff0cURI \u662f\u6309\u7167\u7b2c 9.1.1 \u8282\u7684\u63cf\u8ff0\u786e\u5b9a\u7684\u3002\u8bf7\u6ce8\u610f\uff0c\u5c06\u6a21\u5f0f\u5d4c\u5165\u5230\u5176\u4ed6\u683c\u5f0f\u7684\u6587\u6863\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\u4e0d\u4f1a\u6709\u4e00\u4e2a\u6839\u6a21\u5f0f\u8d44\u6e90\u3002\u8fd9\u79cd\u7528\u6cd5\u4e0e JSON Schema \u6587\u6863\u548c\u8d44\u6e90\u6982\u5ff5\u5982\u4f55\u9002\u5e94\u5c06\u5728\u672a\u6765\u7684\u8349\u6848\u4e2d\u5f97\u5230\u6f84\u6e05\u3002"),(0,i.kt)("p",null,"\u67d0\u4e9b\u5173\u952e\u5b57\u672c\u8eab\u91c7\u7528\u6a21\u5f0f\uff0c\u5141\u8bb8 JSON \u6a21\u5f0f\u5d4c\u5957\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "title": "root",\n    "items": {\n        "title": "array item"\n    }\n}\n')),(0,i.kt)("p",null,'\u5728\u8fd9\u4e2a\u793a\u4f8b\u6587\u6863\u4e2d\uff0c\u6807\u9898\u4e3a "array item" \u7684\u6a21\u5f0f\u662f\u4e00\u4e2a\u5b50\u6a21\u5f0f\uff0c\u6807\u9898\u4e3a "root" \u7684\u6a21\u5f0f\u662f\u6839\u6a21\u5f0f\u3002'),(0,i.kt)("p",null,"\u4e0e\u6839\u6a21\u5f0f\u4e00\u6837\uff0c\u5b50\u6a21\u5f0f\u53ef\u4ee5\u662f\u5bf9\u8c61\u6216\u5e03\u5c14\u503c\u3002"),(0,i.kt)("p",null,'\u5982\u7b2c 8.2.1 \u8282\u6240\u8ba8\u8bba\u7684\uff0c\u4e00\u4e2a JSON Schema \u6587\u6863\u53ef\u4ee5\u5305\u542b\u591a\u4e2a JSON Schema \u8d44\u6e90\u3002\u5728\u672a\u7ecf\u9650\u5b9a\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u672f\u8bed "\u6839\u6a21\u5f0f" \u662f\u6307\u6587\u6863\u7684\u6839\u6a21\u5f0f\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8ba8\u8bba\u4e86\u8d44\u6e90\u7684\u6839\u6a21\u5f0f\u3002\u8d44\u6e90\u7684\u6839\u6a21\u5f0f\u662f\u5176\u9876\u7ea7\u6a21\u5f0f\u5bf9\u8c61\uff0c\u5982\u679c\u8d44\u6e90\u88ab\u63d0\u53d6\u5230\u4e00\u4e2a\u72ec\u7acb\u7684 JSON Schema \u6587\u6863\u4e2d\uff0c\u5b83\u4e5f\u5c06\u6210\u4e3a\u4e00\u4e2a\u6587\u6863\u6839\u6a21\u5f0f\u3002'),(0,i.kt)("p",null,"\u65e0\u8bba\u662f\u5d4c\u5165\u591a\u4e2a\u6a21\u5f0f\u8d44\u6e90\u8fd8\u662f\u901a\u8fc7\u5f15\u7528\u94fe\u63a5\u5b83\u4eec\uff0c\u5b83\u4eec\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\uff0c\u5177\u6709\u76f8\u540c\u7684\u53ef\u7528\u884c\u4e3a\u3002"),(0,i.kt)("h2",{id:"5-\u7247\u6bb5\u6807\u8bc6\u7b26fragment-identifiers"},"5. \u7247\u6bb5\u6807\u8bc6\u7b26\uff08Fragment Identifiers\uff09"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand original text"),(0,i.kt)("p",null,"In accordance with section 3.1 of ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc6839"},"RFC 6839"),', the syntax and semantics of fragment identifiers specified for any +json media type SHOULD be as specified for "application/json". (At publication of this document, there is no fragment identification syntax defined for "application/json".)'),(0,i.kt)("p",null,'Additionally, the "application/schema+json" media type supports two fragment identifier structures: plain names and JSON Pointers. The "application/schema-instance+json" media type supports one fragment identifier structure: JSON Pointers.'),(0,i.kt)("p",null,"The use of JSON Pointers as URI fragment identifiers is described in ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc6901"},"RFC 6901"),'. For "application/schema+json", which supports two fragment identifier syntaxes, fragment identifiers matching the JSON Pointer syntax, including the empty string, MUST be interpreted as JSON Pointer fragment identifiers.'),(0,i.kt)("p",null,"Per the W3C's best practices for fragment identifiers ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/2012/WD-fragid-best-practices-20121025"},"W3C.WD-fragid-best-practices-20121025"),', plain name fragment identifiers in "application/schema+json" are reserved for referencing locally named schemas. All fragment identifiers that do not match the JSON Pointer syntax MUST be interpreted as plain name fragment identifiers.'),(0,i.kt)("p",null,'Defining and referencing a plain name fragment identifier within an "application/schema+json" document are specified in the "$anchor" keyword (Section 8.2.2) section.')),(0,i.kt)("p",null,"\u6839\u636e ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc6839"},"RFC 6839")," \u7b2c 3.1 \u8282\u7684\u89c4\u5b9a\uff0c\u4efb\u4f55 ",(0,i.kt)("inlineCode",{parentName:"p"},"+json")," \u5a92\u4f53\u7c7b\u578b\u7684\u7247\u6bb5\u6807\u8bc6\u7b26\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\u5e94\u4e0e ",(0,i.kt)("inlineCode",{parentName:"p"},"application/json"),' \u7684\u89c4\u5b9a\u76f8\u540c\u3002\uff08\u5728\u672c\u6587\u6863\u53d1\u5e03\u65f6\uff0c\u5c1a\u672a\u4e3a "application/json" \u5b9a\u4e49\u7247\u6bb5\u6807\u8bc6\u7b26\u8bed\u6cd5\u3002\uff09\n\u6b64\u5916\uff0c',(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json")," \u5a92\u4f53\u7c7b\u578b\u652f\u6301\u4e24\u79cd\u7247\u6bb5\u6807\u8bc6\u7b26\u7ed3\u6784\uff1a\u7eaf\u540d\u79f0\u548c JSON \u6307\u9488\u3002",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema-instance+json")," \u5a92\u4f53\u7c7b\u578b\u652f\u6301\u4e00\u79cd\u7247\u6bb5\u6807\u8bc6\u7b26\u7ed3\u6784\uff1aJSON \u6307\u9488\u3002"),(0,i.kt)("p",null,"\u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/info/rfc6901"},"RFC 6901")," \u4e2d\u63cf\u8ff0\u4e86\u5c06 JSON \u6307\u9488\u7528\u4f5c URI \u7247\u6bb5\u6807\u8bc6\u7b26\u3002\u5bf9\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json"),"\uff0c\u5b83\u652f\u6301\u4e24\u79cd\u7247\u6bb5\u6807\u8bc6\u7b26\u8bed\u6cd5\uff0c\u5339\u914d JSON \u6307\u9488\u8bed\u6cd5\u7684\u7247\u6bb5\u6807\u8bc6\u7b26\uff08\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\u5fc5\u987b\u88ab\u89e3\u91ca\u4e3a JSON \u6307\u9488\u7247\u6bb5\u6807\u8bc6\u7b26\u3002"),(0,i.kt)("p",null,"\u6839\u636e W3C \u5173\u4e8e\u7247\u6bb5\u6807\u8bc6\u7b26\u7684\u6700\u4f73\u5b9e\u8df5 ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/2012/WD-fragid-best-practices-20121025"},"W3C.WD-fragid-best-practices-20121025"),"\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json")," \u4e2d\u7684\u7eaf\u540d\u79f0\u7247\u6bb5\u6807\u8bc6\u7b26\u4fdd\u7559\u7528\u4e8e\u5f15\u7528\u672c\u5730\u547d\u540d\u7684\u6a21\u5f0f\u3002\u6240\u6709\u4e0d\u7b26\u5408 JSON \u6307\u9488\u8bed\u6cd5\u7684\u7247\u6bb5\u6807\u8bc6\u7b26\u5fc5\u987b\u88ab\u89e3\u91ca\u4e3a\u7eaf\u540d\u79f0\u7247\u6bb5\u6807\u8bc6\u7b26\u3002"),(0,i.kt)("p",null,"\u5728 ",(0,i.kt)("inlineCode",{parentName:"p"},"application/schema+json")," \u6587\u6863\u4e2d\u5b9a\u4e49\u548c\u5f15\u7528\u7eaf\u540d\u79f0\u7247\u6bb5\u6807\u8bc6\u7b26\u7684\u89c4\u5b9a\u5728 ",(0,i.kt)("inlineCode",{parentName:"p"},"$anchor")," \u5173\u952e\u5b57\uff08\u7b2c 8.2.2 \u8282\uff09\u90e8\u5206\u3002"))}h.isMDXComponent=!0}}]);